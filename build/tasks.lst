ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
  20              		.global	pxCurrentTCB
  21              		.section	.bss.pxCurrentTCB,"aw",%nobits
  22              		.align	2
  25              	pxCurrentTCB:
  26 0000 00000000 		.space	4
  27              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  28              		.align	2
  31              	pxReadyTasksLists:
  32 0000 00000000 		.space	1120
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  34              		.align	2
  37              	xDelayedTaskList1:
  38 0000 00000000 		.space	20
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  40              		.align	2
  43              	xDelayedTaskList2:
  44 0000 00000000 		.space	20
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  46              		.align	2
  49              	pxDelayedTaskList:
  50 0000 00000000 		.space	4
  51              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  52              		.align	2
  55              	pxOverflowDelayedTaskList:
  56 0000 00000000 		.space	4
  57              		.section	.bss.xPendingReadyList,"aw",%nobits
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 2


  58              		.align	2
  61              	xPendingReadyList:
  62 0000 00000000 		.space	20
  62      00000000 
  62      00000000 
  62      00000000 
  62      00000000 
  63              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  64              		.align	2
  67              	xTasksWaitingTermination:
  68 0000 00000000 		.space	20
  68      00000000 
  68      00000000 
  68      00000000 
  68      00000000 
  69              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  70              		.align	2
  73              	uxDeletedTasksWaitingCleanUp:
  74 0000 00000000 		.space	4
  75              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  76              		.align	2
  79              	xSuspendedTaskList:
  80 0000 00000000 		.space	20
  80      00000000 
  80      00000000 
  80      00000000 
  80      00000000 
  81              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  82              		.align	2
  85              	uxCurrentNumberOfTasks:
  86 0000 00000000 		.space	4
  87              		.section	.bss.xTickCount,"aw",%nobits
  88              		.align	2
  91              	xTickCount:
  92 0000 00000000 		.space	4
  93              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  94              		.align	2
  97              	uxTopReadyPriority:
  98 0000 00000000 		.space	4
  99              		.section	.bss.xSchedulerRunning,"aw",%nobits
 100              		.align	2
 103              	xSchedulerRunning:
 104 0000 00000000 		.space	4
 105              		.section	.bss.xPendedTicks,"aw",%nobits
 106              		.align	2
 109              	xPendedTicks:
 110 0000 00000000 		.space	4
 111              		.section	.bss.xYieldPending,"aw",%nobits
 112              		.align	2
 115              	xYieldPending:
 116 0000 00000000 		.space	4
 117              		.section	.bss.xNumOfOverflows,"aw",%nobits
 118              		.align	2
 121              	xNumOfOverflows:
 122 0000 00000000 		.space	4
 123              		.section	.bss.uxTaskNumber,"aw",%nobits
 124              		.align	2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 3


 127              	uxTaskNumber:
 128 0000 00000000 		.space	4
 129              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 130              		.align	2
 133              	xNextTaskUnblockTime:
 134 0000 00000000 		.space	4
 135              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 136              		.align	2
 139              	xIdleTaskHandle:
 140 0000 00000000 		.space	4
 141              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 142              		.align	2
 145              	uxSchedulerSuspended:
 146 0000 00000000 		.space	4
 147              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 148              		.align	2
 151              	ulTaskSwitchedInTime:
 152 0000 00000000 		.space	4
 153              		.section	.bss.ulTotalRunTime,"aw",%nobits
 154              		.align	2
 157              	ulTotalRunTime:
 158 0000 00000000 		.space	4
 159              		.section	.text.xTaskCreateStatic,"ax",%progbits
 160              		.align	1
 161              		.global	xTaskCreateStatic
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 166              	xTaskCreateStatic:
 167              	.LFB4:
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 4


  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 5


  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 6


 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 7


 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 8


 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 9


 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 10


 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 11


 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 12


 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 13


 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 168              		.loc 1 588 2
 169              		.cfi_startproc
 170              		@ args = 12, pretend = 0, frame = 40
 171              		@ frame_needed = 1, uses_anonymous_args = 0
 172 0000 80B5     		push	{r7, lr}
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 14


 177 0002 8EB0     		sub	sp, sp, #56
 178              	.LCFI1:
 179              		.cfi_def_cfa_offset 64
 180 0004 04AF     		add	r7, sp, #16
 181              	.LCFI2:
 182              		.cfi_def_cfa 7, 48
 183 0006 F860     		str	r0, [r7, #12]
 184 0008 B960     		str	r1, [r7, #8]
 185 000a 7A60     		str	r2, [r7, #4]
 186 000c 3B60     		str	r3, [r7]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 187              		.loc 1 592 3
 188 000e 7B6B     		ldr	r3, [r7, #52]
 189 0010 002B     		cmp	r3, #0
 190 0012 0BD1     		bne	.L2
 191              	.LBB126:
 192              	.LBB127:
 193              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 15


  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 16


  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 17


 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 194              		.loc 2 195 2
 195              		.syntax unified
 196              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 197 0014 4FF05003 			mov r3, #80												
 198 0018 83F31188 		msr basepri, r3											
 199 001c BFF36F8F 		isb														
 200 0020 BFF34F8F 		dsb														
 201              	
 202              	@ 0 "" 2
 203              		.thumb
 204              		.syntax unified
 205 0024 3B62     		str	r3, [r7, #32]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 18


 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 206              		.loc 2 203 1
 207 0026 00BF     		nop
 208              	.L3:
 209              	.LBE127:
 210              	.LBE126:
 211              		.loc 1 592 3
 212 0028 00BF     		nop
 213 002a FDE7     		b	.L3
 214              	.L2:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 215              		.loc 1 593 3
 216 002c BB6B     		ldr	r3, [r7, #56]
 217 002e 002B     		cmp	r3, #0
 218 0030 0BD1     		bne	.L4
 219              	.LBB128:
 220              	.LBB129:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 221              		.loc 2 195 2
 222              		.syntax unified
 223              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 224 0032 4FF05003 			mov r3, #80												
 225 0036 83F31188 		msr basepri, r3											
 226 003a BFF36F8F 		isb														
 227 003e BFF34F8F 		dsb														
 228              	
 229              	@ 0 "" 2
 230              		.thumb
 231              		.syntax unified
 232 0042 FB61     		str	r3, [r7, #28]
 233              		.loc 2 203 1
 234 0044 00BF     		nop
 235              	.L5:
 236              	.LBE129:
 237              	.LBE128:
 238              		.loc 1 593 3
 239 0046 00BF     		nop
 240 0048 FDE7     		b	.L5
 241              	.L4:
 242              	.LBB130:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 243              		.loc 1 600 20
 244 004a 6423     		movs	r3, #100
 245 004c 3B61     		str	r3, [r7, #16]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 19


 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 246              		.loc 1 601 4
 247 004e 3B69     		ldr	r3, [r7, #16]
 248 0050 642B     		cmp	r3, #100
 249 0052 0BD0     		beq	.L6
 250              	.LBB131:
 251              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 252              		.loc 2 195 2
 253              		.syntax unified
 254              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 255 0054 4FF05003 			mov r3, #80												
 256 0058 83F31188 		msr basepri, r3											
 257 005c BFF36F8F 		isb														
 258 0060 BFF34F8F 		dsb														
 259              	
 260              	@ 0 "" 2
 261              		.thumb
 262              		.syntax unified
 263 0064 BB61     		str	r3, [r7, #24]
 264              		.loc 2 203 1
 265 0066 00BF     		nop
 266              	.L7:
 267              	.LBE132:
 268              	.LBE131:
 269              		.loc 1 601 4
 270 0068 00BF     		nop
 271 006a FDE7     		b	.L7
 272              	.L6:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 273              		.loc 1 602 4
 274 006c 3B69     		ldr	r3, [r7, #16]
 275              	.LBE130:
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 276              		.loc 1 607 5
 277 006e BB6B     		ldr	r3, [r7, #56]
 278 0070 002B     		cmp	r3, #0
 279 0072 1ED0     		beq	.L8
 280              		.loc 1 607 32 discriminator 1
 281 0074 7B6B     		ldr	r3, [r7, #52]
 282 0076 002B     		cmp	r3, #0
 283 0078 1BD0     		beq	.L8
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 284              		.loc 1 611 13
 285 007a BB6B     		ldr	r3, [r7, #56]
 286 007c 7B62     		str	r3, [r7, #36]
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 287              		.loc 1 612 22
 288 007e 7B6A     		ldr	r3, [r7, #36]
 289 0080 7A6B     		ldr	r2, [r7, #52]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 20


 290 0082 1A63     		str	r2, [r3, #48]
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 291              		.loc 1 618 37
 292 0084 7B6A     		ldr	r3, [r7, #36]
 293 0086 0222     		movs	r2, #2
 294 0088 83F86120 		strb	r2, [r3, #97]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 295              		.loc 1 622 4
 296 008c 0023     		movs	r3, #0
 297 008e 0393     		str	r3, [sp, #12]
 298 0090 7B6A     		ldr	r3, [r7, #36]
 299 0092 0293     		str	r3, [sp, #8]
 300 0094 07F11403 		add	r3, r7, #20
 301 0098 0193     		str	r3, [sp, #4]
 302 009a 3B6B     		ldr	r3, [r7, #48]
 303 009c 0093     		str	r3, [sp]
 304 009e 3B68     		ldr	r3, [r7]
 305 00a0 7A68     		ldr	r2, [r7, #4]
 306 00a2 B968     		ldr	r1, [r7, #8]
 307 00a4 F868     		ldr	r0, [r7, #12]
 308 00a6 FFF7FEFF 		bl	prvInitialiseNewTask
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 309              		.loc 1 623 4
 310 00aa 786A     		ldr	r0, [r7, #36]
 311 00ac FFF7FEFF 		bl	prvAddNewTaskToReadyList
 312 00b0 01E0     		b	.L9
 313              	.L8:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 314              		.loc 1 627 12
 315 00b2 0023     		movs	r3, #0
 316 00b4 7B61     		str	r3, [r7, #20]
 317              	.L9:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 318              		.loc 1 630 10
 319 00b6 7B69     		ldr	r3, [r7, #20]
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 320              		.loc 1 631 2
 321 00b8 1846     		mov	r0, r3
 322 00ba 2837     		adds	r7, r7, #40
 323              	.LCFI3:
 324              		.cfi_def_cfa_offset 8
 325 00bc BD46     		mov	sp, r7
 326              	.LCFI4:
 327              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 21


 328              		@ sp needed
 329 00be 80BD     		pop	{r7, pc}
 330              		.cfi_endproc
 331              	.LFE4:
 333              		.section	.text.xTaskCreate,"ax",%progbits
 334              		.align	1
 335              		.global	xTaskCreate
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 340              	xTaskCreate:
 341              	.LFB5:
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 22


 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 23


 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 342              		.loc 1 739 2
 343              		.cfi_startproc
 344              		@ args = 8, pretend = 0, frame = 32
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346 0000 80B5     		push	{r7, lr}
 347              	.LCFI5:
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 7, -8
 350              		.cfi_offset 14, -4
 351 0002 8CB0     		sub	sp, sp, #48
 352              	.LCFI6:
 353              		.cfi_def_cfa_offset 56
 354 0004 04AF     		add	r7, sp, #16
 355              	.LCFI7:
 356              		.cfi_def_cfa 7, 40
 357 0006 F860     		str	r0, [r7, #12]
 358 0008 B960     		str	r1, [r7, #8]
 359 000a 3B60     		str	r3, [r7]
 360 000c 1346     		mov	r3, r2	@ movhi
 361 000e FB80     		strh	r3, [r7, #6]	@ movhi
 362              	.LBB133:
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 24


 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 363              		.loc 1 773 32
 364 0010 FB88     		ldrh	r3, [r7, #6]
 365              		.loc 1 773 14
 366 0012 9B00     		lsls	r3, r3, #2
 367 0014 1846     		mov	r0, r3
 368 0016 FFF7FEFF 		bl	pvPortMalloc
 369 001a 7861     		str	r0, [r7, #20]
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 370              		.loc 1 775 6
 371 001c 7B69     		ldr	r3, [r7, #20]
 372 001e 002B     		cmp	r3, #0
 373 0020 0ED0     		beq	.L12
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 374              		.loc 1 778 28
 375 0022 6420     		movs	r0, #100
 376 0024 FFF7FEFF 		bl	pvPortMalloc
 377 0028 F861     		str	r0, [r7, #28]
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 378              		.loc 1 780 7
 379 002a FB69     		ldr	r3, [r7, #28]
 380 002c 002B     		cmp	r3, #0
 381 002e 03D0     		beq	.L13
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 382              		.loc 1 783 24
 383 0030 FB69     		ldr	r3, [r7, #28]
 384 0032 7A69     		ldr	r2, [r7, #20]
 385 0034 1A63     		str	r2, [r3, #48]
 386 0036 05E0     		b	.L14
 387              	.L13:
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 388              		.loc 1 789 6
 389 0038 7869     		ldr	r0, [r7, #20]
 390 003a FFF7FEFF 		bl	vPortFree
 391 003e 01E0     		b	.L14
 392              	.L12:
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 393              		.loc 1 794 14
 394 0040 0023     		movs	r3, #0
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 25


 395 0042 FB61     		str	r3, [r7, #28]
 396              	.L14:
 397              	.LBE133:
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 398              		.loc 1 799 5
 399 0044 FB69     		ldr	r3, [r7, #28]
 400 0046 002B     		cmp	r3, #0
 401 0048 17D0     		beq	.L15
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 402              		.loc 1 805 37
 403 004a FB69     		ldr	r3, [r7, #28]
 404 004c 0022     		movs	r2, #0
 405 004e 83F86120 		strb	r2, [r3, #97]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 406              		.loc 1 809 4
 407 0052 FA88     		ldrh	r2, [r7, #6]
 408 0054 0023     		movs	r3, #0
 409 0056 0393     		str	r3, [sp, #12]
 410 0058 FB69     		ldr	r3, [r7, #28]
 411 005a 0293     		str	r3, [sp, #8]
 412 005c FB6A     		ldr	r3, [r7, #44]
 413 005e 0193     		str	r3, [sp, #4]
 414 0060 BB6A     		ldr	r3, [r7, #40]
 415 0062 0093     		str	r3, [sp]
 416 0064 3B68     		ldr	r3, [r7]
 417 0066 B968     		ldr	r1, [r7, #8]
 418 0068 F868     		ldr	r0, [r7, #12]
 419 006a FFF7FEFF 		bl	prvInitialiseNewTask
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 420              		.loc 1 810 4
 421 006e F869     		ldr	r0, [r7, #28]
 422 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 423              		.loc 1 811 12
 424 0074 0123     		movs	r3, #1
 425 0076 BB61     		str	r3, [r7, #24]
 426 0078 02E0     		b	.L16
 427              	.L15:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 428              		.loc 1 815 12
 429 007a 4FF0FF33 		mov	r3, #-1
 430 007e BB61     		str	r3, [r7, #24]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 26


 431              	.L16:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 432              		.loc 1 818 10
 433 0080 BB69     		ldr	r3, [r7, #24]
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 434              		.loc 1 819 2
 435 0082 1846     		mov	r0, r3
 436 0084 2037     		adds	r7, r7, #32
 437              	.LCFI8:
 438              		.cfi_def_cfa_offset 8
 439 0086 BD46     		mov	sp, r7
 440              	.LCFI9:
 441              		.cfi_def_cfa_register 13
 442              		@ sp needed
 443 0088 80BD     		pop	{r7, pc}
 444              		.cfi_endproc
 445              	.LFE5:
 447              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 448              		.align	1
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 453              	prvInitialiseNewTask:
 454              	.LFB6:
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 455              		.loc 1 832 1
 456              		.cfi_startproc
 457              		@ args = 16, pretend = 0, frame = 32
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459 0000 80B5     		push	{r7, lr}
 460              	.LCFI10:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0002 88B0     		sub	sp, sp, #32
 465              	.LCFI11:
 466              		.cfi_def_cfa_offset 40
 467 0004 00AF     		add	r7, sp, #0
 468              	.LCFI12:
 469              		.cfi_def_cfa_register 7
 470 0006 F860     		str	r0, [r7, #12]
 471 0008 B960     		str	r1, [r7, #8]
 472 000a 7A60     		str	r2, [r7, #4]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 27


 473 000c 3B60     		str	r3, [r7]
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 474              		.loc 1 854 28
 475 000e 3B6B     		ldr	r3, [r7, #48]
 476 0010 186B     		ldr	r0, [r3, #48]
 477              		.loc 1 854 12
 478 0012 7B68     		ldr	r3, [r7, #4]
 479 0014 9B00     		lsls	r3, r3, #2
 480 0016 1A46     		mov	r2, r3
 481 0018 A521     		movs	r1, #165
 482 001a FFF7FEFF 		bl	memset
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 483              		.loc 1 864 29
 484 001e 3B6B     		ldr	r3, [r7, #48]
 485 0020 1A6B     		ldr	r2, [r3, #48]
 486              		.loc 1 864 38
 487 0022 7B68     		ldr	r3, [r7, #4]
 488 0024 03F18043 		add	r3, r3, #1073741824
 489 0028 013B     		subs	r3, r3, #1
 490 002a 9B00     		lsls	r3, r3, #2
 491              		.loc 1 864 16
 492 002c 1344     		add	r3, r3, r2
 493 002e BB61     		str	r3, [r7, #24]
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 494              		.loc 1 865 40
 495 0030 BB69     		ldr	r3, [r7, #24]
 496              		.loc 1 865 81
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 28


 497 0032 23F00703 		bic	r3, r3, #7
 498              		.loc 1 865 16
 499 0036 BB61     		str	r3, [r7, #24]
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 500              		.loc 1 868 3
 501 0038 BB69     		ldr	r3, [r7, #24]
 502 003a 03F00703 		and	r3, r3, #7
 503 003e 002B     		cmp	r3, #0
 504 0040 0BD0     		beq	.L19
 505              	.LBB134:
 506              	.LBB135:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 507              		.loc 2 195 2
 508              		.syntax unified
 509              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 510 0042 4FF05003 			mov r3, #80												
 511 0046 83F31188 		msr basepri, r3											
 512 004a BFF36F8F 		isb														
 513 004e BFF34F8F 		dsb														
 514              	
 515              	@ 0 "" 2
 516              		.thumb
 517              		.syntax unified
 518 0052 7B61     		str	r3, [r7, #20]
 519              		.loc 2 203 1
 520 0054 00BF     		nop
 521              	.L20:
 522              	.LBE135:
 523              	.LBE134:
 524              		.loc 1 868 3
 525 0056 00BF     		nop
 526 0058 FDE7     		b	.L20
 527              	.L19:
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 528              		.loc 1 874 27
 529 005a 3B6B     		ldr	r3, [r7, #48]
 530 005c BA69     		ldr	r2, [r7, #24]
 531 005e 5A64     		str	r2, [r3, #68]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 29


 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 532              		.loc 1 892 4
 533 0060 BB68     		ldr	r3, [r7, #8]
 534 0062 002B     		cmp	r3, #0
 535 0064 1FD0     		beq	.L21
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 536              		.loc 1 894 10
 537 0066 0023     		movs	r3, #0
 538 0068 FB61     		str	r3, [r7, #28]
 539              		.loc 1 894 3
 540 006a 12E0     		b	.L22
 541              	.L25:
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 542              		.loc 1 896 38
 543 006c BA68     		ldr	r2, [r7, #8]
 544 006e FB69     		ldr	r3, [r7, #28]
 545 0070 1344     		add	r3, r3, r2
 546 0072 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 547              		.loc 1 896 30
 548 0074 3A6B     		ldr	r2, [r7, #48]
 549 0076 FB69     		ldr	r3, [r7, #28]
 550 0078 1344     		add	r3, r3, r2
 551 007a 3433     		adds	r3, r3, #52
 552 007c 0A46     		mov	r2, r1
 553 007e 1A70     		strb	r2, [r3]
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 554              		.loc 1 901 14
 555 0080 BA68     		ldr	r2, [r7, #8]
 556 0082 FB69     		ldr	r3, [r7, #28]
 557 0084 1344     		add	r3, r3, r2
 558 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 559              		.loc 1 901 6
 560 0088 002B     		cmp	r3, #0
 561 008a 06D0     		beq	.L29
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 562              		.loc 1 894 77 discriminator 2
 563 008c FB69     		ldr	r3, [r7, #28]
 564 008e 0133     		adds	r3, r3, #1
 565 0090 FB61     		str	r3, [r7, #28]
 566              	.L22:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 567              		.loc 1 894 33 discriminator 1
 568 0092 FB69     		ldr	r3, [r7, #28]
 569 0094 0F2B     		cmp	r3, #15
 570 0096 E9D9     		bls	.L25
 571 0098 00E0     		b	.L24
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 30


 572              	.L29:
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 573              		.loc 1 903 5
 574 009a 00BF     		nop
 575              	.L24:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 576              		.loc 1 913 55
 577 009c 3B6B     		ldr	r3, [r7, #48]
 578 009e 0022     		movs	r2, #0
 579 00a0 83F84320 		strb	r2, [r3, #67]
 580 00a4 03E0     		b	.L26
 581              	.L21:
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 582              		.loc 1 919 29
 583 00a6 3B6B     		ldr	r3, [r7, #48]
 584 00a8 0022     		movs	r2, #0
 585 00aa 83F83420 		strb	r2, [r3, #52]
 586              	.L26:
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 587              		.loc 1 924 4
 588 00ae BB6A     		ldr	r3, [r7, #40]
 589 00b0 372B     		cmp	r3, #55
 590 00b2 01D9     		bls	.L27
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 591              		.loc 1 926 14
 592 00b4 3723     		movs	r3, #55
 593 00b6 BB62     		str	r3, [r7, #40]
 594              	.L27:
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 595              		.loc 1 933 23
 596 00b8 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 31


 597 00ba BA6A     		ldr	r2, [r7, #40]
 598 00bc DA62     		str	r2, [r3, #44]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 599              		.loc 1 936 28
 600 00be 3B6B     		ldr	r3, [r7, #48]
 601 00c0 BA6A     		ldr	r2, [r7, #40]
 602 00c2 1A65     		str	r2, [r3, #80]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 603              		.loc 1 937 27
 604 00c4 3B6B     		ldr	r3, [r7, #48]
 605 00c6 0022     		movs	r2, #0
 606 00c8 5A65     		str	r2, [r3, #84]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 607              		.loc 1 941 2
 608 00ca 3B6B     		ldr	r3, [r7, #48]
 609 00cc 0433     		adds	r3, r3, #4
 610 00ce 1846     		mov	r0, r3
 611 00d0 FFF7FEFF 		bl	vListInitialiseItem
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 612              		.loc 1 942 2
 613 00d4 3B6B     		ldr	r3, [r7, #48]
 614 00d6 1833     		adds	r3, r3, #24
 615 00d8 1846     		mov	r0, r3
 616 00da FFF7FEFF 		bl	vListInitialiseItem
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 617              		.loc 1 946 2
 618 00de 3B6B     		ldr	r3, [r7, #48]
 619 00e0 3A6B     		ldr	r2, [r7, #48]
 620 00e2 1A61     		str	r2, [r3, #16]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 621              		.loc 1 949 2
 622 00e4 BB6A     		ldr	r3, [r7, #40]
 623 00e6 C3F13802 		rsb	r2, r3, #56
 624 00ea 3B6B     		ldr	r3, [r7, #48]
 625 00ec 9A61     		str	r2, [r3, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 626              		.loc 1 950 2
 627 00ee 3B6B     		ldr	r3, [r7, #48]
 628 00f0 3A6B     		ldr	r2, [r7, #48]
 629 00f2 5A62     		str	r2, [r3, #36]
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 32


 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 630              		.loc 1 966 30
 631 00f4 3B6B     		ldr	r3, [r7, #48]
 632 00f6 0022     		movs	r2, #0
 633 00f8 9A65     		str	r2, [r3, #88]
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 634              		.loc 1 992 29
 635 00fa 3B6B     		ldr	r3, [r7, #48]
 636 00fc 0022     		movs	r2, #0
 637 00fe DA65     		str	r2, [r3, #92]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 638              		.loc 1 993 27
 639 0100 3B6B     		ldr	r3, [r7, #48]
 640 0102 0022     		movs	r2, #0
 641 0104 83F86020 		strb	r2, [r3, #96]
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 33


1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 642              		.loc 1 1058 29
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 34


 643 0108 3A68     		ldr	r2, [r7]
 644 010a F968     		ldr	r1, [r7, #12]
 645 010c B869     		ldr	r0, [r7, #24]
 646 010e FFF7FEFF 		bl	pxPortInitialiseStack
 647 0112 0246     		mov	r2, r0
 648              		.loc 1 1058 27 discriminator 1
 649 0114 3B6B     		ldr	r3, [r7, #48]
 650 0116 1A60     		str	r2, [r3]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 651              		.loc 1 1064 4
 652 0118 FB6A     		ldr	r3, [r7, #44]
 653 011a 002B     		cmp	r3, #0
 654 011c 02D0     		beq	.L30
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 655              		.loc 1 1068 18
 656 011e FB6A     		ldr	r3, [r7, #44]
 657 0120 3A6B     		ldr	r2, [r7, #48]
 658 0122 1A60     		str	r2, [r3]
 659              	.L30:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 660              		.loc 1 1074 1
 661 0124 00BF     		nop
 662 0126 2037     		adds	r7, r7, #32
 663              	.LCFI13:
 664              		.cfi_def_cfa_offset 8
 665 0128 BD46     		mov	sp, r7
 666              	.LCFI14:
 667              		.cfi_def_cfa_register 13
 668              		@ sp needed
 669 012a 80BD     		pop	{r7, pc}
 670              		.cfi_endproc
 671              	.LFE6:
 673              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 674              		.align	1
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 679              	prvAddNewTaskToReadyList:
 680              	.LFB7:
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 681              		.loc 1 1078 1
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 35


 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 8
 684              		@ frame_needed = 1, uses_anonymous_args = 0
 685 0000 80B5     		push	{r7, lr}
 686              	.LCFI15:
 687              		.cfi_def_cfa_offset 8
 688              		.cfi_offset 7, -8
 689              		.cfi_offset 14, -4
 690 0002 82B0     		sub	sp, sp, #8
 691              	.LCFI16:
 692              		.cfi_def_cfa_offset 16
 693 0004 00AF     		add	r7, sp, #0
 694              	.LCFI17:
 695              		.cfi_def_cfa_register 7
 696 0006 7860     		str	r0, [r7, #4]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 697              		.loc 1 1081 2
 698 0008 FFF7FEFF 		bl	vPortEnterCritical
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 699              		.loc 1 1083 25
 700 000c 2D4B     		ldr	r3, .L37
 701 000e 1B68     		ldr	r3, [r3]
 702 0010 0133     		adds	r3, r3, #1
 703 0012 2C4A     		ldr	r2, .L37
 704 0014 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 705              		.loc 1 1084 20
 706 0016 2C4B     		ldr	r3, .L37+4
 707 0018 1B68     		ldr	r3, [r3]
 708              		.loc 1 1084 5
 709 001a 002B     		cmp	r3, #0
 710 001c 09D1     		bne	.L32
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 711              		.loc 1 1088 17
 712 001e 2A4A     		ldr	r2, .L37+4
 713 0020 7B68     		ldr	r3, [r7, #4]
 714 0022 1360     		str	r3, [r2]
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 715              		.loc 1 1090 31
 716 0024 274B     		ldr	r3, .L37
 717 0026 1B68     		ldr	r3, [r3]
 718              		.loc 1 1090 6
 719 0028 012B     		cmp	r3, #1
 720 002a 10D1     		bne	.L33
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 721              		.loc 1 1095 5
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 36


 722 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 723 0030 0DE0     		b	.L33
 724              	.L32:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 725              		.loc 1 1107 26
 726 0032 264B     		ldr	r3, .L37+8
 727 0034 1B68     		ldr	r3, [r3]
 728              		.loc 1 1107 6
 729 0036 002B     		cmp	r3, #0
 730 0038 09D1     		bne	.L33
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 731              		.loc 1 1109 21
 732 003a 234B     		ldr	r3, .L37+4
 733 003c 1B68     		ldr	r3, [r3]
 734 003e DA6A     		ldr	r2, [r3, #44]
 735              		.loc 1 1109 45
 736 0040 7B68     		ldr	r3, [r7, #4]
 737 0042 DB6A     		ldr	r3, [r3, #44]
 738              		.loc 1 1109 7
 739 0044 9A42     		cmp	r2, r3
 740 0046 02D8     		bhi	.L33
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 741              		.loc 1 1111 19
 742 0048 1F4A     		ldr	r2, .L37+4
 743 004a 7B68     		ldr	r3, [r7, #4]
 744 004c 1360     		str	r3, [r2]
 745              	.L33:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 746              		.loc 1 1124 15
 747 004e 204B     		ldr	r3, .L37+12
 748 0050 1B68     		ldr	r3, [r3]
 749 0052 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 37


 750 0054 1E4A     		ldr	r2, .L37+12
 751 0056 1360     		str	r3, [r2]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 752              		.loc 1 1129 26
 753 0058 1D4B     		ldr	r3, .L37+12
 754 005a 1A68     		ldr	r2, [r3]
 755 005c 7B68     		ldr	r3, [r7, #4]
 756 005e 9A64     		str	r2, [r3, #72]
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 757              		.loc 1 1134 3
 758 0060 7B68     		ldr	r3, [r7, #4]
 759 0062 DA6A     		ldr	r2, [r3, #44]
 760 0064 1B4B     		ldr	r3, .L37+16
 761 0066 1B68     		ldr	r3, [r3]
 762 0068 9A42     		cmp	r2, r3
 763 006a 03D9     		bls	.L34
 764              		.loc 1 1134 3 is_stmt 0 discriminator 1
 765 006c 7B68     		ldr	r3, [r7, #4]
 766 006e DB6A     		ldr	r3, [r3, #44]
 767 0070 184A     		ldr	r2, .L37+16
 768 0072 1360     		str	r3, [r2]
 769              	.L34:
 770              		.loc 1 1134 3 discriminator 3
 771 0074 7B68     		ldr	r3, [r7, #4]
 772 0076 DA6A     		ldr	r2, [r3, #44]
 773 0078 1346     		mov	r3, r2
 774 007a 9B00     		lsls	r3, r3, #2
 775 007c 1344     		add	r3, r3, r2
 776 007e 9B00     		lsls	r3, r3, #2
 777 0080 154A     		ldr	r2, .L37+20
 778 0082 1A44     		add	r2, r2, r3
 779 0084 7B68     		ldr	r3, [r7, #4]
 780 0086 0433     		adds	r3, r3, #4
 781 0088 1946     		mov	r1, r3
 782 008a 1046     		mov	r0, r2
 783 008c FFF7FEFF 		bl	vListInsertEnd
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 784              		.loc 1 1138 2 is_stmt 1
 785 0090 FFF7FEFF 		bl	vPortExitCritical
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 786              		.loc 1 1140 24
 787 0094 0D4B     		ldr	r3, .L37+8
 788 0096 1B68     		ldr	r3, [r3]
 789              		.loc 1 1140 4
 790 0098 002B     		cmp	r3, #0
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 38


 791 009a 0ED0     		beq	.L36
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 792              		.loc 1 1144 19
 793 009c 0A4B     		ldr	r3, .L37+4
 794 009e 1B68     		ldr	r3, [r3]
 795 00a0 DA6A     		ldr	r2, [r3, #44]
 796              		.loc 1 1144 42
 797 00a2 7B68     		ldr	r3, [r7, #4]
 798 00a4 DB6A     		ldr	r3, [r3, #44]
 799              		.loc 1 1144 5
 800 00a6 9A42     		cmp	r2, r3
 801 00a8 07D2     		bcs	.L36
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 802              		.loc 1 1146 4
 803 00aa 0C4B     		ldr	r3, .L37+24
 804 00ac 4FF08052 		mov	r2, #268435456
 805 00b0 1A60     		str	r2, [r3]
 806              		.syntax unified
 807              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 808 00b2 BFF34F8F 		dsb
 809              	@ 0 "" 2
 810              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 811 00b6 BFF36F8F 		isb
 812              	@ 0 "" 2
 813              		.thumb
 814              		.syntax unified
 815              	.L36:
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 816              		.loc 1 1157 1
 817 00ba 00BF     		nop
 818 00bc 0837     		adds	r7, r7, #8
 819              	.LCFI18:
 820              		.cfi_def_cfa_offset 8
 821 00be BD46     		mov	sp, r7
 822              	.LCFI19:
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 00c0 80BD     		pop	{r7, pc}
 826              	.L38:
 827 00c2 00BF     		.align	2
 828              	.L37:
 829 00c4 00000000 		.word	uxCurrentNumberOfTasks
 830 00c8 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 39


 831 00cc 00000000 		.word	xSchedulerRunning
 832 00d0 00000000 		.word	uxTaskNumber
 833 00d4 00000000 		.word	uxTopReadyPriority
 834 00d8 00000000 		.word	pxReadyTasksLists
 835 00dc 04ED00E0 		.word	-536810236
 836              		.cfi_endproc
 837              	.LFE7:
 839              		.section	.text.vTaskDelete,"ax",%progbits
 840              		.align	1
 841              		.global	vTaskDelete
 842              		.syntax unified
 843              		.thumb
 844              		.thumb_func
 846              	vTaskDelete:
 847              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 848              		.loc 1 1163 2
 849              		.cfi_startproc
 850              		@ args = 0, pretend = 0, frame = 16
 851              		@ frame_needed = 1, uses_anonymous_args = 0
 852 0000 80B5     		push	{r7, lr}
 853              	.LCFI20:
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 84B0     		sub	sp, sp, #16
 858              	.LCFI21:
 859              		.cfi_def_cfa_offset 24
 860 0004 00AF     		add	r7, sp, #0
 861              	.LCFI22:
 862              		.cfi_def_cfa_register 7
 863 0006 7860     		str	r0, [r7, #4]
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 864              		.loc 1 1166 3
 865 0008 FFF7FEFF 		bl	vPortEnterCritical
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 866              		.loc 1 1170 12
 867 000c 7B68     		ldr	r3, [r7, #4]
 868 000e 002B     		cmp	r3, #0
 869 0010 02D1     		bne	.L40
 870              		.loc 1 1170 12 is_stmt 0 discriminator 1
 871 0012 2D4B     		ldr	r3, .L49
 872 0014 1B68     		ldr	r3, [r3]
 873 0016 00E0     		b	.L41
 874              	.L40:
 875              		.loc 1 1170 12 discriminator 2
 876 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 40


 877              	.L41:
 878              		.loc 1 1170 10 is_stmt 1 discriminator 4
 879 001a FB60     		str	r3, [r7, #12]
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 880              		.loc 1 1173 8
 881 001c FB68     		ldr	r3, [r7, #12]
 882 001e 0433     		adds	r3, r3, #4
 883 0020 1846     		mov	r0, r3
 884 0022 FFF7FEFF 		bl	uxListRemove
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 885              		.loc 1 1183 8
 886 0026 FB68     		ldr	r3, [r7, #12]
 887 0028 9B6A     		ldr	r3, [r3, #40]
 888              		.loc 1 1183 6
 889 002a 002B     		cmp	r3, #0
 890 002c 04D0     		beq	.L42
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 891              		.loc 1 1185 14
 892 002e FB68     		ldr	r3, [r7, #12]
 893 0030 1833     		adds	r3, r3, #24
 894 0032 1846     		mov	r0, r3
 895 0034 FFF7FEFF 		bl	uxListRemove
 896              	.L42:
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 897              		.loc 1 1196 16
 898 0038 244B     		ldr	r3, .L49+4
 899 003a 1B68     		ldr	r3, [r3]
 900 003c 0133     		adds	r3, r3, #1
 901 003e 234A     		ldr	r2, .L49+4
 902 0040 1360     		str	r3, [r2]
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 903              		.loc 1 1198 14
 904 0042 214B     		ldr	r3, .L49
 905 0044 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 41


 906              		.loc 1 1198 6
 907 0046 FA68     		ldr	r2, [r7, #12]
 908 0048 9A42     		cmp	r2, r3
 909 004a 0BD1     		bne	.L43
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 910              		.loc 1 1205 5
 911 004c FB68     		ldr	r3, [r7, #12]
 912 004e 0433     		adds	r3, r3, #4
 913 0050 1946     		mov	r1, r3
 914 0052 1F48     		ldr	r0, .L49+8
 915 0054 FFF7FEFF 		bl	vListInsertEnd
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 916              		.loc 1 1210 5
 917 0058 1E4B     		ldr	r3, .L49+12
 918 005a 1B68     		ldr	r3, [r3]
 919 005c 0133     		adds	r3, r3, #1
 920 005e 1D4A     		ldr	r2, .L49+12
 921 0060 1360     		str	r3, [r2]
 922 0062 09E0     		b	.L44
 923              	.L43:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 924              		.loc 1 1225 5
 925 0064 1C4B     		ldr	r3, .L49+16
 926 0066 1B68     		ldr	r3, [r3]
 927 0068 013B     		subs	r3, r3, #1
 928 006a 1B4A     		ldr	r2, .L49+16
 929 006c 1360     		str	r3, [r2]
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 930              		.loc 1 1227 5
 931 006e F868     		ldr	r0, [r7, #12]
 932 0070 FFF7FEFF 		bl	prvDeleteTCB
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 42


1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 933              		.loc 1 1231 5
 934 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 935              	.L44:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 936              		.loc 1 1234 3
 937 0078 FFF7FEFF 		bl	vPortExitCritical
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 938              		.loc 1 1238 25
 939 007c 174B     		ldr	r3, .L49+20
 940 007e 1B68     		ldr	r3, [r3]
 941              		.loc 1 1238 5
 942 0080 002B     		cmp	r3, #0
 943 0082 1CD0     		beq	.L48
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 944              		.loc 1 1240 14
 945 0084 104B     		ldr	r3, .L49
 946 0086 1B68     		ldr	r3, [r3]
 947              		.loc 1 1240 6
 948 0088 FA68     		ldr	r2, [r7, #12]
 949 008a 9A42     		cmp	r2, r3
 950 008c 17D1     		bne	.L48
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 951              		.loc 1 1242 5
 952 008e 144B     		ldr	r3, .L49+24
 953 0090 1B68     		ldr	r3, [r3]
 954 0092 002B     		cmp	r3, #0
 955 0094 0BD0     		beq	.L46
 956              	.LBB136:
 957              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 958              		.loc 2 195 2
 959              		.syntax unified
 960              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 961 0096 4FF05003 			mov r3, #80												
 962 009a 83F31188 		msr basepri, r3											
 963 009e BFF36F8F 		isb														
 964 00a2 BFF34F8F 		dsb														
 965              	
 966              	@ 0 "" 2
 967              		.thumb
 968              		.syntax unified
 969 00a6 BB60     		str	r3, [r7, #8]
 970              		.loc 2 203 1
 971 00a8 00BF     		nop
 972              	.L47:
 973              	.LBE137:
 974              	.LBE136:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 43


 975              		.loc 1 1242 5
 976 00aa 00BF     		nop
 977 00ac FDE7     		b	.L47
 978              	.L46:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 979              		.loc 1 1243 5
 980 00ae 0D4B     		ldr	r3, .L49+28
 981 00b0 4FF08052 		mov	r2, #268435456
 982 00b4 1A60     		str	r2, [r3]
 983              		.syntax unified
 984              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 985 00b6 BFF34F8F 		dsb
 986              	@ 0 "" 2
 987              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 988 00ba BFF36F8F 		isb
 989              	@ 0 "" 2
 990              		.thumb
 991              		.syntax unified
 992              	.L48:
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 993              		.loc 1 1250 2
 994 00be 00BF     		nop
 995 00c0 1037     		adds	r7, r7, #16
 996              	.LCFI23:
 997              		.cfi_def_cfa_offset 8
 998 00c2 BD46     		mov	sp, r7
 999              	.LCFI24:
 1000              		.cfi_def_cfa_register 13
 1001              		@ sp needed
 1002 00c4 80BD     		pop	{r7, pc}
 1003              	.L50:
 1004 00c6 00BF     		.align	2
 1005              	.L49:
 1006 00c8 00000000 		.word	pxCurrentTCB
 1007 00cc 00000000 		.word	uxTaskNumber
 1008 00d0 00000000 		.word	xTasksWaitingTermination
 1009 00d4 00000000 		.word	uxDeletedTasksWaitingCleanUp
 1010 00d8 00000000 		.word	uxCurrentNumberOfTasks
 1011 00dc 00000000 		.word	xSchedulerRunning
 1012 00e0 00000000 		.word	uxSchedulerSuspended
 1013 00e4 04ED00E0 		.word	-536810236
 1014              		.cfi_endproc
 1015              	.LFE8:
 1017              		.section	.text.vTaskDelayUntil,"ax",%progbits
 1018              		.align	1
 1019              		.global	vTaskDelayUntil
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1024              	vTaskDelayUntil:
 1025              	.LFB9:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 44


1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1026              		.loc 1 1258 2
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 40
 1029              		@ frame_needed = 1, uses_anonymous_args = 0
 1030 0000 80B5     		push	{r7, lr}
 1031              	.LCFI25:
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 7, -8
 1034              		.cfi_offset 14, -4
 1035 0002 8AB0     		sub	sp, sp, #40
 1036              	.LCFI26:
 1037              		.cfi_def_cfa_offset 48
 1038 0004 00AF     		add	r7, sp, #0
 1039              	.LCFI27:
 1040              		.cfi_def_cfa_register 7
 1041 0006 7860     		str	r0, [r7, #4]
 1042 0008 3960     		str	r1, [r7]
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1043              		.loc 1 1260 30
 1044 000a 0023     		movs	r3, #0
 1045 000c 7B62     		str	r3, [r7, #36]
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1046              		.loc 1 1262 3
 1047 000e 7B68     		ldr	r3, [r7, #4]
 1048 0010 002B     		cmp	r3, #0
 1049 0012 0BD1     		bne	.L52
 1050              	.LBB138:
 1051              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1052              		.loc 2 195 2
 1053              		.syntax unified
 1054              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1055 0014 4FF05003 			mov r3, #80												
 1056 0018 83F31188 		msr basepri, r3											
 1057 001c BFF36F8F 		isb														
 1058 0020 BFF34F8F 		dsb														
 1059              	
 1060              	@ 0 "" 2
 1061              		.thumb
 1062              		.syntax unified
 1063 0024 7B61     		str	r3, [r7, #20]
 1064              		.loc 2 203 1
 1065 0026 00BF     		nop
 1066              	.L53:
 1067              	.LBE139:
 1068              	.LBE138:
 1069              		.loc 1 1262 3
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 45


 1070 0028 00BF     		nop
 1071 002a FDE7     		b	.L53
 1072              	.L52:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1073              		.loc 1 1263 3
 1074 002c 3B68     		ldr	r3, [r7]
 1075 002e 002B     		cmp	r3, #0
 1076 0030 0BD1     		bne	.L54
 1077              	.LBB140:
 1078              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1079              		.loc 2 195 2
 1080              		.syntax unified
 1081              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1082 0032 4FF05003 			mov r3, #80												
 1083 0036 83F31188 		msr basepri, r3											
 1084 003a BFF36F8F 		isb														
 1085 003e BFF34F8F 		dsb														
 1086              	
 1087              	@ 0 "" 2
 1088              		.thumb
 1089              		.syntax unified
 1090 0042 3B61     		str	r3, [r7, #16]
 1091              		.loc 2 203 1
 1092 0044 00BF     		nop
 1093              	.L55:
 1094              	.LBE141:
 1095              	.LBE140:
 1096              		.loc 1 1263 3
 1097 0046 00BF     		nop
 1098 0048 FDE7     		b	.L55
 1099              	.L54:
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1100              		.loc 1 1264 3
 1101 004a 2A4B     		ldr	r3, .L64
 1102 004c 1B68     		ldr	r3, [r3]
 1103 004e 002B     		cmp	r3, #0
 1104 0050 0BD0     		beq	.L56
 1105              	.LBB142:
 1106              	.LBB143:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1107              		.loc 2 195 2
 1108              		.syntax unified
 1109              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1110 0052 4FF05003 			mov r3, #80												
 1111 0056 83F31188 		msr basepri, r3											
 1112 005a BFF36F8F 		isb														
 1113 005e BFF34F8F 		dsb														
 1114              	
 1115              	@ 0 "" 2
 1116              		.thumb
 1117              		.syntax unified
 1118 0062 FB60     		str	r3, [r7, #12]
 1119              		.loc 2 203 1
 1120 0064 00BF     		nop
 1121              	.L57:
 1122              	.LBE143:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 46


 1123              	.LBE142:
 1124              		.loc 1 1264 3
 1125 0066 00BF     		nop
 1126 0068 FDE7     		b	.L57
 1127              	.L56:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1128              		.loc 1 1266 3
 1129 006a FFF7FEFF 		bl	vTaskSuspendAll
 1130              	.LBB144:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1131              		.loc 1 1270 21
 1132 006e 224B     		ldr	r3, .L64+4
 1133 0070 1B68     		ldr	r3, [r3]
 1134 0072 3B62     		str	r3, [r7, #32]
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1135              		.loc 1 1273 18
 1136 0074 7B68     		ldr	r3, [r7, #4]
 1137 0076 1B68     		ldr	r3, [r3]
 1138              		.loc 1 1273 16
 1139 0078 3A68     		ldr	r2, [r7]
 1140 007a 1344     		add	r3, r3, r2
 1141 007c FB61     		str	r3, [r7, #28]
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1142              		.loc 1 1275 26
 1143 007e 7B68     		ldr	r3, [r7, #4]
 1144 0080 1B68     		ldr	r3, [r3]
 1145              		.loc 1 1275 6
 1146 0082 3A6A     		ldr	r2, [r7, #32]
 1147 0084 9A42     		cmp	r2, r3
 1148 0086 0BD2     		bcs	.L58
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1149              		.loc 1 1282 25
 1150 0088 7B68     		ldr	r3, [r7, #4]
 1151 008a 1B68     		ldr	r3, [r3]
 1152              		.loc 1 1282 7
 1153 008c FA69     		ldr	r2, [r7, #28]
 1154 008e 9A42     		cmp	r2, r3
 1155 0090 11D2     		bcs	.L59
 1156              		.loc 1 1282 47 discriminator 1
 1157 0092 FA69     		ldr	r2, [r7, #28]
 1158 0094 3B6A     		ldr	r3, [r7, #32]
 1159 0096 9A42     		cmp	r2, r3
 1160 0098 0DD9     		bls	.L59
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 47


1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1161              		.loc 1 1284 19
 1162 009a 0123     		movs	r3, #1
 1163 009c 7B62     		str	r3, [r7, #36]
 1164 009e 0AE0     		b	.L59
 1165              	.L58:
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1166              		.loc 1 1296 25
 1167 00a0 7B68     		ldr	r3, [r7, #4]
 1168 00a2 1B68     		ldr	r3, [r3]
 1169              		.loc 1 1296 7
 1170 00a4 FA69     		ldr	r2, [r7, #28]
 1171 00a6 9A42     		cmp	r2, r3
 1172 00a8 03D3     		bcc	.L60
 1173              		.loc 1 1296 47 discriminator 1
 1174 00aa FA69     		ldr	r2, [r7, #28]
 1175 00ac 3B6A     		ldr	r3, [r7, #32]
 1176 00ae 9A42     		cmp	r2, r3
 1177 00b0 01D9     		bls	.L59
 1178              	.L60:
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1179              		.loc 1 1298 19
 1180 00b2 0123     		movs	r3, #1
 1181 00b4 7B62     		str	r3, [r7, #36]
 1182              	.L59:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1183              		.loc 1 1307 24
 1184 00b6 7B68     		ldr	r3, [r7, #4]
 1185 00b8 FA69     		ldr	r2, [r7, #28]
 1186 00ba 1A60     		str	r2, [r3]
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1187              		.loc 1 1309 6
 1188 00bc 7B6A     		ldr	r3, [r7, #36]
 1189 00be 002B     		cmp	r3, #0
 1190 00c0 06D0     		beq	.L61
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 48


1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1191              		.loc 1 1315 5
 1192 00c2 FA69     		ldr	r2, [r7, #28]
 1193 00c4 3B6A     		ldr	r3, [r7, #32]
 1194 00c6 D31A     		subs	r3, r2, r3
 1195 00c8 0021     		movs	r1, #0
 1196 00ca 1846     		mov	r0, r3
 1197 00cc FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1198              	.L61:
 1199              	.LBE144:
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1200              		.loc 1 1322 21
 1201 00d0 FFF7FEFF 		bl	xTaskResumeAll
 1202 00d4 B861     		str	r0, [r7, #24]
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1203              		.loc 1 1326 5
 1204 00d6 BB69     		ldr	r3, [r7, #24]
 1205 00d8 002B     		cmp	r3, #0
 1206 00da 07D1     		bne	.L63
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1207              		.loc 1 1328 4
 1208 00dc 074B     		ldr	r3, .L64+8
 1209 00de 4FF08052 		mov	r2, #268435456
 1210 00e2 1A60     		str	r2, [r3]
 1211              		.syntax unified
 1212              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1213 00e4 BFF34F8F 		dsb
 1214              	@ 0 "" 2
 1215              	@ 1328 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1216 00e8 BFF36F8F 		isb
 1217              	@ 0 "" 2
 1218              		.thumb
 1219              		.syntax unified
 1220              	.L63:
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1221              		.loc 1 1334 2
 1222 00ec 00BF     		nop
 1223 00ee 2837     		adds	r7, r7, #40
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 49


 1224              	.LCFI28:
 1225              		.cfi_def_cfa_offset 8
 1226 00f0 BD46     		mov	sp, r7
 1227              	.LCFI29:
 1228              		.cfi_def_cfa_register 13
 1229              		@ sp needed
 1230 00f2 80BD     		pop	{r7, pc}
 1231              	.L65:
 1232              		.align	2
 1233              	.L64:
 1234 00f4 00000000 		.word	uxSchedulerSuspended
 1235 00f8 00000000 		.word	xTickCount
 1236 00fc 04ED00E0 		.word	-536810236
 1237              		.cfi_endproc
 1238              	.LFE9:
 1240              		.section	.text.vTaskDelay,"ax",%progbits
 1241              		.align	1
 1242              		.global	vTaskDelay
 1243              		.syntax unified
 1244              		.thumb
 1245              		.thumb_func
 1247              	vTaskDelay:
 1248              	.LFB10:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1249              		.loc 1 1342 2
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 16
 1252              		@ frame_needed = 1, uses_anonymous_args = 0
 1253 0000 80B5     		push	{r7, lr}
 1254              	.LCFI30:
 1255              		.cfi_def_cfa_offset 8
 1256              		.cfi_offset 7, -8
 1257              		.cfi_offset 14, -4
 1258 0002 84B0     		sub	sp, sp, #16
 1259              	.LCFI31:
 1260              		.cfi_def_cfa_offset 24
 1261 0004 00AF     		add	r7, sp, #0
 1262              	.LCFI32:
 1263              		.cfi_def_cfa_register 7
 1264 0006 7860     		str	r0, [r7, #4]
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 1265              		.loc 1 1343 13
 1266 0008 0023     		movs	r3, #0
 1267 000a FB60     		str	r3, [r7, #12]
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1268              		.loc 1 1346 5
 1269 000c 7B68     		ldr	r3, [r7, #4]
 1270 000e 002B     		cmp	r3, #0
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 50


 1271 0010 18D0     		beq	.L67
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1272              		.loc 1 1348 4
 1273 0012 144B     		ldr	r3, .L72
 1274 0014 1B68     		ldr	r3, [r3]
 1275 0016 002B     		cmp	r3, #0
 1276 0018 0BD0     		beq	.L68
 1277              	.LBB145:
 1278              	.LBB146:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1279              		.loc 2 195 2
 1280              		.syntax unified
 1281              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1282 001a 4FF05003 			mov r3, #80												
 1283 001e 83F31188 		msr basepri, r3											
 1284 0022 BFF36F8F 		isb														
 1285 0026 BFF34F8F 		dsb														
 1286              	
 1287              	@ 0 "" 2
 1288              		.thumb
 1289              		.syntax unified
 1290 002a BB60     		str	r3, [r7, #8]
 1291              		.loc 2 203 1
 1292 002c 00BF     		nop
 1293              	.L69:
 1294              	.LBE146:
 1295              	.LBE145:
 1296              		.loc 1 1348 4
 1297 002e 00BF     		nop
 1298 0030 FDE7     		b	.L69
 1299              	.L68:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1300              		.loc 1 1349 4
 1301 0032 FFF7FEFF 		bl	vTaskSuspendAll
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1302              		.loc 1 1360 5
 1303 0036 0021     		movs	r1, #0
 1304 0038 7868     		ldr	r0, [r7, #4]
 1305 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 1306              		.loc 1 1362 22
 1307 003e FFF7FEFF 		bl	xTaskResumeAll
 1308 0042 F860     		str	r0, [r7, #12]
 1309              	.L67:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 51


1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1310              		.loc 1 1371 5
 1311 0044 FB68     		ldr	r3, [r7, #12]
 1312 0046 002B     		cmp	r3, #0
 1313 0048 07D1     		bne	.L71
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1314              		.loc 1 1373 4
 1315 004a 074B     		ldr	r3, .L72+4
 1316 004c 4FF08052 		mov	r2, #268435456
 1317 0050 1A60     		str	r2, [r3]
 1318              		.syntax unified
 1319              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1320 0052 BFF34F8F 		dsb
 1321              	@ 0 "" 2
 1322              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1323 0056 BFF36F8F 		isb
 1324              	@ 0 "" 2
 1325              		.thumb
 1326              		.syntax unified
 1327              	.L71:
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1328              		.loc 1 1379 2
 1329 005a 00BF     		nop
 1330 005c 1037     		adds	r7, r7, #16
 1331              	.LCFI33:
 1332              		.cfi_def_cfa_offset 8
 1333 005e BD46     		mov	sp, r7
 1334              	.LCFI34:
 1335              		.cfi_def_cfa_register 13
 1336              		@ sp needed
 1337 0060 80BD     		pop	{r7, pc}
 1338              	.L73:
 1339 0062 00BF     		.align	2
 1340              	.L72:
 1341 0064 00000000 		.word	uxSchedulerSuspended
 1342 0068 04ED00E0 		.word	-536810236
 1343              		.cfi_endproc
 1344              	.LFE10:
 1346              		.section	.text.eTaskGetState,"ax",%progbits
 1347              		.align	1
 1348              		.global	eTaskGetState
 1349              		.syntax unified
 1350              		.thumb
 1351              		.thumb_func
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 52


 1353              	eTaskGetState:
 1354              	.LFB11:
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1355              		.loc 1 1387 2
 1356              		.cfi_startproc
 1357              		@ args = 0, pretend = 0, frame = 32
 1358              		@ frame_needed = 1, uses_anonymous_args = 0
 1359 0000 80B5     		push	{r7, lr}
 1360              	.LCFI35:
 1361              		.cfi_def_cfa_offset 8
 1362              		.cfi_offset 7, -8
 1363              		.cfi_offset 14, -4
 1364 0002 88B0     		sub	sp, sp, #32
 1365              	.LCFI36:
 1366              		.cfi_def_cfa_offset 40
 1367 0004 00AF     		add	r7, sp, #0
 1368              	.LCFI37:
 1369              		.cfi_def_cfa_register 7
 1370 0006 7860     		str	r0, [r7, #4]
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1371              		.loc 1 1390 22
 1372 0008 7B68     		ldr	r3, [r7, #4]
 1373 000a BB61     		str	r3, [r7, #24]
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1374              		.loc 1 1392 3
 1375 000c BB69     		ldr	r3, [r7, #24]
 1376 000e 002B     		cmp	r3, #0
 1377 0010 0BD1     		bne	.L75
 1378              	.LBB147:
 1379              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1380              		.loc 2 195 2
 1381              		.syntax unified
 1382              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1383 0012 4FF05003 			mov r3, #80												
 1384 0016 83F31188 		msr basepri, r3											
 1385 001a BFF36F8F 		isb														
 1386 001e BFF34F8F 		dsb														
 1387              	
 1388              	@ 0 "" 2
 1389              		.thumb
 1390              		.syntax unified
 1391 0022 BB60     		str	r3, [r7, #8]
 1392              		.loc 2 203 1
 1393 0024 00BF     		nop
 1394              	.L76:
 1395              	.LBE148:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 53


 1396              	.LBE147:
 1397              		.loc 1 1392 3
 1398 0026 00BF     		nop
 1399 0028 FDE7     		b	.L76
 1400              	.L75:
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1401              		.loc 1 1394 13
 1402 002a 244B     		ldr	r3, .L87
 1403 002c 1B68     		ldr	r3, [r3]
 1404              		.loc 1 1394 5
 1405 002e BA69     		ldr	r2, [r7, #24]
 1406 0030 9A42     		cmp	r2, r3
 1407 0032 02D1     		bne	.L77
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1408              		.loc 1 1397 12
 1409 0034 0023     		movs	r3, #0
 1410 0036 FB77     		strb	r3, [r7, #31]
 1411 0038 3AE0     		b	.L78
 1412              	.L77:
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1413              		.loc 1 1401 4
 1414 003a FFF7FEFF 		bl	vPortEnterCritical
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1415              		.loc 1 1403 17
 1416 003e BB69     		ldr	r3, [r7, #24]
 1417 0040 5B69     		ldr	r3, [r3, #20]
 1418 0042 7B61     		str	r3, [r7, #20]
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1419              		.loc 1 1404 19
 1420 0044 1E4B     		ldr	r3, .L87+4
 1421 0046 1B68     		ldr	r3, [r3]
 1422 0048 3B61     		str	r3, [r7, #16]
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1423              		.loc 1 1405 29
 1424 004a 1E4B     		ldr	r3, .L87+8
 1425 004c 1B68     		ldr	r3, [r3]
 1426 004e FB60     		str	r3, [r7, #12]
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1427              		.loc 1 1407 4
 1428 0050 FFF7FEFF 		bl	vPortExitCritical
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1429              		.loc 1 1409 6
 1430 0054 7A69     		ldr	r2, [r7, #20]
 1431 0056 3B69     		ldr	r3, [r7, #16]
 1432 0058 9A42     		cmp	r2, r3
 1433 005a 03D0     		beq	.L79
 1434              		.loc 1 1409 41 discriminator 1
 1435 005c 7A69     		ldr	r2, [r7, #20]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 54


 1436 005e FB68     		ldr	r3, [r7, #12]
 1437 0060 9A42     		cmp	r2, r3
 1438 0062 02D1     		bne	.L80
 1439              	.L79:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1440              		.loc 1 1413 13
 1441 0064 0223     		movs	r3, #2
 1442 0066 FB77     		strb	r3, [r7, #31]
 1443 0068 22E0     		b	.L78
 1444              	.L80:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1445              		.loc 1 1417 12
 1446 006a 7B69     		ldr	r3, [r7, #20]
 1447 006c 164A     		ldr	r2, .L87+12
 1448 006e 9342     		cmp	r3, r2
 1449 0070 12D1     		bne	.L81
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1450              		.loc 1 1422 10
 1451 0072 BB69     		ldr	r3, [r7, #24]
 1452 0074 9B6A     		ldr	r3, [r3, #40]
 1453              		.loc 1 1422 8
 1454 0076 002B     		cmp	r3, #0
 1455 0078 0BD1     		bne	.L82
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1456              		.loc 1 1430 17
 1457 007a BB69     		ldr	r3, [r7, #24]
 1458 007c 93F86030 		ldrb	r3, [r3, #96]
 1459 0080 DBB2     		uxtb	r3, r3
 1460              		.loc 1 1430 10
 1461 0082 012B     		cmp	r3, #1
 1462 0084 02D1     		bne	.L83
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1463              		.loc 1 1432 17
 1464 0086 0223     		movs	r3, #2
 1465 0088 FB77     		strb	r3, [r7, #31]
 1466 008a 11E0     		b	.L78
 1467              	.L83:
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 55


1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1468              		.loc 1 1436 17
 1469 008c 0323     		movs	r3, #3
 1470 008e FB77     		strb	r3, [r7, #31]
 1471 0090 0EE0     		b	.L78
 1472              	.L82:
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1473              		.loc 1 1447 15
 1474 0092 0223     		movs	r3, #2
 1475 0094 FB77     		strb	r3, [r7, #31]
 1476 0096 0BE0     		b	.L78
 1477              	.L81:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1478              		.loc 1 1453 12
 1479 0098 7B69     		ldr	r3, [r7, #20]
 1480 009a 0C4A     		ldr	r2, .L87+16
 1481 009c 9342     		cmp	r3, r2
 1482 009e 02D0     		beq	.L84
 1483              		.loc 1 1453 59 discriminator 1
 1484 00a0 7B69     		ldr	r3, [r7, #20]
 1485 00a2 002B     		cmp	r3, #0
 1486 00a4 02D1     		bne	.L85
 1487              	.L84:
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1488              		.loc 1 1458 14
 1489 00a6 0423     		movs	r3, #4
 1490 00a8 FB77     		strb	r3, [r7, #31]
 1491 00aa 01E0     		b	.L78
 1492              	.L85:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 56


 1493              		.loc 1 1466 13
 1494 00ac 0123     		movs	r3, #1
 1495 00ae FB77     		strb	r3, [r7, #31]
 1496              	.L78:
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1497              		.loc 1 1470 10
 1498 00b0 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1499              		.loc 1 1471 2
 1500 00b2 1846     		mov	r0, r3
 1501 00b4 2037     		adds	r7, r7, #32
 1502              	.LCFI38:
 1503              		.cfi_def_cfa_offset 8
 1504 00b6 BD46     		mov	sp, r7
 1505              	.LCFI39:
 1506              		.cfi_def_cfa_register 13
 1507              		@ sp needed
 1508 00b8 80BD     		pop	{r7, pc}
 1509              	.L88:
 1510 00ba 00BF     		.align	2
 1511              	.L87:
 1512 00bc 00000000 		.word	pxCurrentTCB
 1513 00c0 00000000 		.word	pxDelayedTaskList
 1514 00c4 00000000 		.word	pxOverflowDelayedTaskList
 1515 00c8 00000000 		.word	xSuspendedTaskList
 1516 00cc 00000000 		.word	xTasksWaitingTermination
 1517              		.cfi_endproc
 1518              	.LFE11:
 1520              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1521              		.align	1
 1522              		.global	uxTaskPriorityGet
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1527              	uxTaskPriorityGet:
 1528              	.LFB12:
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1529              		.loc 1 1479 2
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 16
 1532              		@ frame_needed = 1, uses_anonymous_args = 0
 1533 0000 80B5     		push	{r7, lr}
 1534              	.LCFI40:
 1535              		.cfi_def_cfa_offset 8
 1536              		.cfi_offset 7, -8
 1537              		.cfi_offset 14, -4
 1538 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 57


 1539              	.LCFI41:
 1540              		.cfi_def_cfa_offset 24
 1541 0004 00AF     		add	r7, sp, #0
 1542              	.LCFI42:
 1543              		.cfi_def_cfa_register 7
 1544 0006 7860     		str	r0, [r7, #4]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1545              		.loc 1 1483 3
 1546 0008 FFF7FEFF 		bl	vPortEnterCritical
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1547              		.loc 1 1487 12
 1548 000c 7B68     		ldr	r3, [r7, #4]
 1549 000e 002B     		cmp	r3, #0
 1550 0010 02D1     		bne	.L90
 1551              		.loc 1 1487 12 is_stmt 0 discriminator 1
 1552 0012 074B     		ldr	r3, .L93
 1553 0014 1B68     		ldr	r3, [r3]
 1554 0016 00E0     		b	.L91
 1555              	.L90:
 1556              		.loc 1 1487 12 discriminator 2
 1557 0018 7B68     		ldr	r3, [r7, #4]
 1558              	.L91:
 1559              		.loc 1 1487 10 is_stmt 1 discriminator 4
 1560 001a FB60     		str	r3, [r7, #12]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1561              		.loc 1 1488 13
 1562 001c FB68     		ldr	r3, [r7, #12]
 1563 001e DB6A     		ldr	r3, [r3, #44]
 1564 0020 BB60     		str	r3, [r7, #8]
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1565              		.loc 1 1490 3
 1566 0022 FFF7FEFF 		bl	vPortExitCritical
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1567              		.loc 1 1492 10
 1568 0026 BB68     		ldr	r3, [r7, #8]
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1569              		.loc 1 1493 2
 1570 0028 1846     		mov	r0, r3
 1571 002a 1037     		adds	r7, r7, #16
 1572              	.LCFI43:
 1573              		.cfi_def_cfa_offset 8
 1574 002c BD46     		mov	sp, r7
 1575              	.LCFI44:
 1576              		.cfi_def_cfa_register 13
 1577              		@ sp needed
 1578 002e 80BD     		pop	{r7, pc}
 1579              	.L94:
 1580              		.align	2
 1581              	.L93:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 58


 1582 0030 00000000 		.word	pxCurrentTCB
 1583              		.cfi_endproc
 1584              	.LFE12:
 1586              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1587              		.align	1
 1588              		.global	uxTaskPriorityGetFromISR
 1589              		.syntax unified
 1590              		.thumb
 1591              		.thumb_func
 1593              	uxTaskPriorityGetFromISR:
 1594              	.LFB13:
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1595              		.loc 1 1501 2
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 32
 1598              		@ frame_needed = 1, uses_anonymous_args = 0
 1599 0000 80B5     		push	{r7, lr}
 1600              	.LCFI45:
 1601              		.cfi_def_cfa_offset 8
 1602              		.cfi_offset 7, -8
 1603              		.cfi_offset 14, -4
 1604 0002 88B0     		sub	sp, sp, #32
 1605              	.LCFI46:
 1606              		.cfi_def_cfa_offset 40
 1607 0004 00AF     		add	r7, sp, #0
 1608              	.LCFI47:
 1609              		.cfi_def_cfa_register 7
 1610 0006 7860     		str	r0, [r7, #4]
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1611              		.loc 1 1521 3
 1612 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 59


 1613              	.LBB149:
 1614              	.LBB150:
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1615              		.loc 2 211 2
 1616              		.syntax unified
 1617              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1618 000c EFF31182 			mrs r2, basepri											
 1619 0010 4FF05003 		mov r3, #80												
 1620 0014 83F31188 		msr basepri, r3											
 1621 0018 BFF36F8F 		isb														
 1622 001c BFF34F8F 		dsb														
 1623              	
 1624              	@ 0 "" 2
 1625              		.thumb
 1626              		.syntax unified
 1627 0020 3A61     		str	r2, [r7, #16]
 1628 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1629              		.loc 2 223 9
 1630 0024 3B69     		ldr	r3, [r7, #16]
 1631              	.LBE150:
 1632              	.LBE149:
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1633              		.loc 1 1523 27
 1634 0026 FB61     		str	r3, [r7, #28]
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1635              		.loc 1 1527 12
 1636 0028 7B68     		ldr	r3, [r7, #4]
 1637 002a 002B     		cmp	r3, #0
 1638 002c 02D1     		bne	.L97
 1639              		.loc 1 1527 12 is_stmt 0 discriminator 1
 1640 002e 094B     		ldr	r3, .L100
 1641 0030 1B68     		ldr	r3, [r3]
 1642 0032 00E0     		b	.L98
 1643              	.L97:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 60


 1644              		.loc 1 1527 12 discriminator 2
 1645 0034 7B68     		ldr	r3, [r7, #4]
 1646              	.L98:
 1647              		.loc 1 1527 10 is_stmt 1 discriminator 4
 1648 0036 BB61     		str	r3, [r7, #24]
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1649              		.loc 1 1528 13
 1650 0038 BB69     		ldr	r3, [r7, #24]
 1651 003a DB6A     		ldr	r3, [r3, #44]
 1652 003c 7B61     		str	r3, [r7, #20]
 1653 003e FB69     		ldr	r3, [r7, #28]
 1654 0040 BB60     		str	r3, [r7, #8]
 1655              	.LBB151:
 1656              	.LBB152:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1657              		.loc 2 229 2
 1658 0042 BB68     		ldr	r3, [r7, #8]
 1659              		.syntax unified
 1660              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1661 0044 83F31188 			msr basepri, r3	
 1662              	@ 0 "" 2
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1663              		.loc 2 233 1
 1664              		.thumb
 1665              		.syntax unified
 1666 0048 00BF     		nop
 1667              	.LBE152:
 1668              	.LBE151:
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1669              		.loc 1 1532 10
 1670 004a 7B69     		ldr	r3, [r7, #20]
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1671              		.loc 1 1533 2
 1672 004c 1846     		mov	r0, r3
 1673 004e 2037     		adds	r7, r7, #32
 1674              	.LCFI48:
 1675              		.cfi_def_cfa_offset 8
 1676 0050 BD46     		mov	sp, r7
 1677              	.LCFI49:
 1678              		.cfi_def_cfa_register 13
 1679              		@ sp needed
 1680 0052 80BD     		pop	{r7, pc}
 1681              	.L101:
 1682              		.align	2
 1683              	.L100:
 1684 0054 00000000 		.word	pxCurrentTCB
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 61


 1685              		.cfi_endproc
 1686              	.LFE13:
 1688              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1689              		.align	1
 1690              		.global	vTaskPrioritySet
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1695              	vTaskPrioritySet:
 1696              	.LFB14:
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1697              		.loc 1 1541 2
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 32
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
 1701 0000 80B5     		push	{r7, lr}
 1702              	.LCFI50:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 7, -8
 1705              		.cfi_offset 14, -4
 1706 0002 88B0     		sub	sp, sp, #32
 1707              	.LCFI51:
 1708              		.cfi_def_cfa_offset 40
 1709 0004 00AF     		add	r7, sp, #0
 1710              	.LCFI52:
 1711              		.cfi_def_cfa_register 7
 1712 0006 7860     		str	r0, [r7, #4]
 1713 0008 3960     		str	r1, [r7]
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1714              		.loc 1 1544 13
 1715 000a 0023     		movs	r3, #0
 1716 000c FB61     		str	r3, [r7, #28]
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1717              		.loc 1 1546 3
 1718 000e 3B68     		ldr	r3, [r7]
 1719 0010 372B     		cmp	r3, #55
 1720 0012 0BD9     		bls	.L103
 1721              	.LBB153:
 1722              	.LBB154:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1723              		.loc 2 195 2
 1724              		.syntax unified
 1725              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1726 0014 4FF05003 			mov r3, #80												
 1727 0018 83F31188 		msr basepri, r3											
 1728 001c BFF36F8F 		isb														
 1729 0020 BFF34F8F 		dsb														
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 62


 1730              	
 1731              	@ 0 "" 2
 1732              		.thumb
 1733              		.syntax unified
 1734 0024 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1735              		.loc 2 203 1
 1736 0026 00BF     		nop
 1737              	.L104:
 1738              	.LBE154:
 1739              	.LBE153:
 1740              		.loc 1 1546 3
 1741 0028 00BF     		nop
 1742 002a FDE7     		b	.L104
 1743              	.L103:
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1744              		.loc 1 1549 5
 1745 002c 3B68     		ldr	r3, [r7]
 1746 002e 372B     		cmp	r3, #55
 1747 0030 01D9     		bls	.L105
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1748              		.loc 1 1551 18
 1749 0032 3723     		movs	r3, #55
 1750 0034 3B60     		str	r3, [r7]
 1751              	.L105:
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1752              		.loc 1 1558 3
 1753 0036 FFF7FEFF 		bl	vPortEnterCritical
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1754              		.loc 1 1562 12
 1755 003a 7B68     		ldr	r3, [r7, #4]
 1756 003c 002B     		cmp	r3, #0
 1757 003e 02D1     		bne	.L106
 1758              		.loc 1 1562 12 is_stmt 0 discriminator 1
 1759 0040 3A4B     		ldr	r3, .L115
 1760 0042 1B68     		ldr	r3, [r3]
 1761 0044 00E0     		b	.L107
 1762              	.L106:
 1763              		.loc 1 1562 12 discriminator 2
 1764 0046 7B68     		ldr	r3, [r7, #4]
 1765              	.L107:
 1766              		.loc 1 1562 10 is_stmt 1 discriminator 4
 1767 0048 BB61     		str	r3, [r7, #24]
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 63


1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1768              		.loc 1 1568 27
 1769 004a BB69     		ldr	r3, [r7, #24]
 1770 004c 1B6D     		ldr	r3, [r3, #80]
 1771 004e 7B61     		str	r3, [r7, #20]
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1772              		.loc 1 1576 6
 1773 0050 7A69     		ldr	r2, [r7, #20]
 1774 0052 3B68     		ldr	r3, [r7]
 1775 0054 9A42     		cmp	r2, r3
 1776 0056 63D0     		beq	.L108
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1777              		.loc 1 1580 7
 1778 0058 3A68     		ldr	r2, [r7]
 1779 005a 7B69     		ldr	r3, [r7, #20]
 1780 005c 9A42     		cmp	r2, r3
 1781 005e 0DD9     		bls	.L109
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1782              		.loc 1 1582 16
 1783 0060 324B     		ldr	r3, .L115
 1784 0062 1B68     		ldr	r3, [r3]
 1785              		.loc 1 1582 8
 1786 0064 BA69     		ldr	r2, [r7, #24]
 1787 0066 9A42     		cmp	r2, r3
 1788 0068 0FD0     		beq	.L110
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1789              		.loc 1 1587 40
 1790 006a 304B     		ldr	r3, .L115
 1791 006c 1B68     		ldr	r3, [r3]
 1792 006e DB6A     		ldr	r3, [r3, #44]
 1793              		.loc 1 1587 9
 1794 0070 3A68     		ldr	r2, [r7]
 1795 0072 9A42     		cmp	r2, r3
 1796 0074 09D3     		bcc	.L110
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1797              		.loc 1 1589 23
 1798 0076 0123     		movs	r3, #1
 1799 0078 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 64


 1800 007a 06E0     		b	.L110
 1801              	.L109:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1802              		.loc 1 1603 20
 1803 007c 2B4B     		ldr	r3, .L115
 1804 007e 1B68     		ldr	r3, [r3]
 1805              		.loc 1 1603 12
 1806 0080 BA69     		ldr	r2, [r7, #24]
 1807 0082 9A42     		cmp	r2, r3
 1808 0084 01D1     		bne	.L110
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1809              		.loc 1 1608 21
 1810 0086 0123     		movs	r3, #1
 1811 0088 FB61     		str	r3, [r7, #28]
 1812              	.L110:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1813              		.loc 1 1620 27
 1814 008a BB69     		ldr	r3, [r7, #24]
 1815 008c DB6A     		ldr	r3, [r3, #44]
 1816 008e 3B61     		str	r3, [r7, #16]
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1817              		.loc 1 1626 15
 1818 0090 BB69     		ldr	r3, [r7, #24]
 1819 0092 1A6D     		ldr	r2, [r3, #80]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 65


 1820              		.loc 1 1626 40
 1821 0094 BB69     		ldr	r3, [r7, #24]
 1822 0096 DB6A     		ldr	r3, [r3, #44]
 1823              		.loc 1 1626 8
 1824 0098 9A42     		cmp	r2, r3
 1825 009a 02D1     		bne	.L111
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1826              		.loc 1 1628 25
 1827 009c BB69     		ldr	r3, [r7, #24]
 1828 009e 3A68     		ldr	r2, [r7]
 1829 00a0 DA62     		str	r2, [r3, #44]
 1830              	.L111:
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1831              		.loc 1 1636 28
 1832 00a2 BB69     		ldr	r3, [r7, #24]
 1833 00a4 3A68     		ldr	r2, [r7]
 1834 00a6 1A65     		str	r2, [r3, #80]
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1835              		.loc 1 1646 11
 1836 00a8 BB69     		ldr	r3, [r7, #24]
 1837 00aa 9B69     		ldr	r3, [r3, #24]
 1838              		.loc 1 1646 7
 1839 00ac 002B     		cmp	r3, #0
 1840 00ae 04DB     		blt	.L112
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1841              		.loc 1 1648 6
 1842 00b0 3B68     		ldr	r3, [r7]
 1843 00b2 C3F13802 		rsb	r2, r3, #56
 1844 00b6 BB69     		ldr	r3, [r7, #24]
 1845 00b8 9A61     		str	r2, [r3, #24]
 1846              	.L112:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 66


1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1847              		.loc 1 1659 9
 1848 00ba BB69     		ldr	r3, [r7, #24]
 1849 00bc 5969     		ldr	r1, [r3, #20]
 1850 00be 3A69     		ldr	r2, [r7, #16]
 1851 00c0 1346     		mov	r3, r2
 1852 00c2 9B00     		lsls	r3, r3, #2
 1853 00c4 1344     		add	r3, r3, r2
 1854 00c6 9B00     		lsls	r3, r3, #2
 1855 00c8 194A     		ldr	r2, .L115+4
 1856 00ca 1344     		add	r3, r3, r2
 1857              		.loc 1 1659 7
 1858 00cc 9942     		cmp	r1, r3
 1859 00ce 1CD1     		bne	.L113
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1860              		.loc 1 1664 10
 1861 00d0 BB69     		ldr	r3, [r7, #24]
 1862 00d2 0433     		adds	r3, r3, #4
 1863 00d4 1846     		mov	r0, r3
 1864 00d6 FFF7FEFF 		bl	uxListRemove
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1865              		.loc 1 1675 6
 1866 00da BB69     		ldr	r3, [r7, #24]
 1867 00dc DA6A     		ldr	r2, [r3, #44]
 1868 00de 154B     		ldr	r3, .L115+8
 1869 00e0 1B68     		ldr	r3, [r3]
 1870 00e2 9A42     		cmp	r2, r3
 1871 00e4 03D9     		bls	.L114
 1872              		.loc 1 1675 6 is_stmt 0 discriminator 1
 1873 00e6 BB69     		ldr	r3, [r7, #24]
 1874 00e8 DB6A     		ldr	r3, [r3, #44]
 1875 00ea 124A     		ldr	r2, .L115+8
 1876 00ec 1360     		str	r3, [r2]
 1877              	.L114:
 1878              		.loc 1 1675 6 discriminator 3
 1879 00ee BB69     		ldr	r3, [r7, #24]
 1880 00f0 DA6A     		ldr	r2, [r3, #44]
 1881 00f2 1346     		mov	r3, r2
 1882 00f4 9B00     		lsls	r3, r3, #2
 1883 00f6 1344     		add	r3, r3, r2
 1884 00f8 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 67


 1885 00fa 0D4A     		ldr	r2, .L115+4
 1886 00fc 1A44     		add	r2, r2, r3
 1887 00fe BB69     		ldr	r3, [r7, #24]
 1888 0100 0433     		adds	r3, r3, #4
 1889 0102 1946     		mov	r1, r3
 1890 0104 1046     		mov	r0, r2
 1891 0106 FFF7FEFF 		bl	vListInsertEnd
 1892              	.L113:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1893              		.loc 1 1682 7 is_stmt 1
 1894 010a FB69     		ldr	r3, [r7, #28]
 1895 010c 002B     		cmp	r3, #0
 1896 010e 07D0     		beq	.L108
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1897              		.loc 1 1684 6
 1898 0110 094B     		ldr	r3, .L115+12
 1899 0112 4FF08052 		mov	r2, #268435456
 1900 0116 1A60     		str	r2, [r3]
 1901              		.syntax unified
 1902              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1903 0118 BFF34F8F 		dsb
 1904              	@ 0 "" 2
 1905              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1906 011c BFF36F8F 		isb
 1907              	@ 0 "" 2
 1908              		.thumb
 1909              		.syntax unified
 1910              	.L108:
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1911              		.loc 1 1696 3
 1912 0120 FFF7FEFF 		bl	vPortExitCritical
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1913              		.loc 1 1697 2
 1914 0124 00BF     		nop
 1915 0126 2037     		adds	r7, r7, #32
 1916              	.LCFI53:
 1917              		.cfi_def_cfa_offset 8
 1918 0128 BD46     		mov	sp, r7
 1919              	.LCFI54:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 68


 1920              		.cfi_def_cfa_register 13
 1921              		@ sp needed
 1922 012a 80BD     		pop	{r7, pc}
 1923              	.L116:
 1924              		.align	2
 1925              	.L115:
 1926 012c 00000000 		.word	pxCurrentTCB
 1927 0130 00000000 		.word	pxReadyTasksLists
 1928 0134 00000000 		.word	uxTopReadyPriority
 1929 0138 04ED00E0 		.word	-536810236
 1930              		.cfi_endproc
 1931              	.LFE14:
 1933              		.section	.text.vTaskSuspend,"ax",%progbits
 1934              		.align	1
 1935              		.global	vTaskSuspend
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1940              	vTaskSuspend:
 1941              	.LFB15:
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1942              		.loc 1 1705 2
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 16
 1945              		@ frame_needed = 1, uses_anonymous_args = 0
 1946 0000 80B5     		push	{r7, lr}
 1947              	.LCFI55:
 1948              		.cfi_def_cfa_offset 8
 1949              		.cfi_offset 7, -8
 1950              		.cfi_offset 14, -4
 1951 0002 84B0     		sub	sp, sp, #16
 1952              	.LCFI56:
 1953              		.cfi_def_cfa_offset 24
 1954 0004 00AF     		add	r7, sp, #0
 1955              	.LCFI57:
 1956              		.cfi_def_cfa_register 7
 1957 0006 7860     		str	r0, [r7, #4]
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1958              		.loc 1 1708 3
 1959 0008 FFF7FEFF 		bl	vPortEnterCritical
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1960              		.loc 1 1712 12
 1961 000c 7B68     		ldr	r3, [r7, #4]
 1962 000e 002B     		cmp	r3, #0
 1963 0010 02D1     		bne	.L118
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 69


 1964              		.loc 1 1712 12 is_stmt 0 discriminator 1
 1965 0012 304B     		ldr	r3, .L129
 1966 0014 1B68     		ldr	r3, [r3]
 1967 0016 00E0     		b	.L119
 1968              	.L118:
 1969              		.loc 1 1712 12 discriminator 2
 1970 0018 7B68     		ldr	r3, [r7, #4]
 1971              	.L119:
 1972              		.loc 1 1712 10 is_stmt 1 discriminator 4
 1973 001a FB60     		str	r3, [r7, #12]
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1974              		.loc 1 1718 8
 1975 001c FB68     		ldr	r3, [r7, #12]
 1976 001e 0433     		adds	r3, r3, #4
 1977 0020 1846     		mov	r0, r3
 1978 0022 FFF7FEFF 		bl	uxListRemove
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1979              		.loc 1 1728 8
 1980 0026 FB68     		ldr	r3, [r7, #12]
 1981 0028 9B6A     		ldr	r3, [r3, #40]
 1982              		.loc 1 1728 6
 1983 002a 002B     		cmp	r3, #0
 1984 002c 04D0     		beq	.L120
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1985              		.loc 1 1730 14
 1986 002e FB68     		ldr	r3, [r7, #12]
 1987 0030 1833     		adds	r3, r3, #24
 1988 0032 1846     		mov	r0, r3
 1989 0034 FFF7FEFF 		bl	uxListRemove
 1990              	.L120:
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1991              		.loc 1 1737 4
 1992 0038 FB68     		ldr	r3, [r7, #12]
 1993 003a 0433     		adds	r3, r3, #4
 1994 003c 1946     		mov	r1, r3
 1995 003e 2648     		ldr	r0, .L129+4
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 70


 1996 0040 FFF7FEFF 		bl	vListInsertEnd
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1997              		.loc 1 1741 14
 1998 0044 FB68     		ldr	r3, [r7, #12]
 1999 0046 93F86030 		ldrb	r3, [r3, #96]
 2000 004a DBB2     		uxtb	r3, r3
 2001              		.loc 1 1741 7
 2002 004c 012B     		cmp	r3, #1
 2003 004e 03D1     		bne	.L121
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 2004              		.loc 1 1745 27
 2005 0050 FB68     		ldr	r3, [r7, #12]
 2006 0052 0022     		movs	r2, #0
 2007 0054 83F86020 		strb	r2, [r3, #96]
 2008              	.L121:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2009              		.loc 1 1750 3
 2010 0058 FFF7FEFF 		bl	vPortExitCritical
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 2011              		.loc 1 1752 25
 2012 005c 1F4B     		ldr	r3, .L129+8
 2013 005e 1B68     		ldr	r3, [r3]
 2014              		.loc 1 1752 5
 2015 0060 002B     		cmp	r3, #0
 2016 0062 05D0     		beq	.L122
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2017              		.loc 1 1756 4
 2018 0064 FFF7FEFF 		bl	vPortEnterCritical
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 2019              		.loc 1 1758 5
 2020 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2021              		.loc 1 1760 4
 2022 006c FFF7FEFF 		bl	vPortExitCritical
 2023              	.L122:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 71


1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 2024              		.loc 1 1767 13
 2025 0070 184B     		ldr	r3, .L129
 2026 0072 1B68     		ldr	r3, [r3]
 2027              		.loc 1 1767 5
 2028 0074 FA68     		ldr	r2, [r7, #12]
 2029 0076 9A42     		cmp	r2, r3
 2030 0078 28D1     		bne	.L128
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 2031              		.loc 1 1769 26
 2032 007a 184B     		ldr	r3, .L129+8
 2033 007c 1B68     		ldr	r3, [r3]
 2034              		.loc 1 1769 6
 2035 007e 002B     		cmp	r3, #0
 2036 0080 18D0     		beq	.L124
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2037              		.loc 1 1772 5
 2038 0082 174B     		ldr	r3, .L129+12
 2039 0084 1B68     		ldr	r3, [r3]
 2040 0086 002B     		cmp	r3, #0
 2041 0088 0BD0     		beq	.L125
 2042              	.LBB155:
 2043              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2044              		.loc 2 195 2
 2045              		.syntax unified
 2046              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2047 008a 4FF05003 			mov r3, #80												
 2048 008e 83F31188 		msr basepri, r3											
 2049 0092 BFF36F8F 		isb														
 2050 0096 BFF34F8F 		dsb														
 2051              	
 2052              	@ 0 "" 2
 2053              		.thumb
 2054              		.syntax unified
 2055 009a BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2056              		.loc 2 203 1
 2057 009c 00BF     		nop
 2058              	.L126:
 2059              	.LBE156:
 2060              	.LBE155:
 2061              		.loc 1 1772 5
 2062 009e 00BF     		nop
 2063 00a0 FDE7     		b	.L126
 2064              	.L125:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2065              		.loc 1 1773 5
 2066 00a2 104B     		ldr	r3, .L129+16
 2067 00a4 4FF08052 		mov	r2, #268435456
 2068 00a8 1A60     		str	r2, [r3]
 2069              		.syntax unified
 2070              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2071 00aa BFF34F8F 		dsb
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 72


 2072              	@ 0 "" 2
 2073              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2074 00ae BFF36F8F 		isb
 2075              	@ 0 "" 2
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2076              		.loc 1 1798 2
 2077              		.thumb
 2078              		.syntax unified
 2079 00b2 0BE0     		b	.L128
 2080              	.L124:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2081              		.loc 1 1780 9
 2082 00b4 084B     		ldr	r3, .L129+4
 2083 00b6 1A68     		ldr	r2, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2084              		.loc 1 1780 56
 2085 00b8 0B4B     		ldr	r3, .L129+20
 2086 00ba 1B68     		ldr	r3, [r3]
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2087              		.loc 1 1780 7
 2088 00bc 9A42     		cmp	r2, r3
 2089 00be 03D1     		bne	.L127
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2090              		.loc 1 1786 19
 2091 00c0 044B     		ldr	r3, .L129
 2092 00c2 0022     		movs	r2, #0
 2093 00c4 1A60     		str	r2, [r3]
 2094              		.loc 1 1798 2
 2095 00c6 01E0     		b	.L128
 2096              	.L127:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2097              		.loc 1 1790 6
 2098 00c8 FFF7FEFF 		bl	vTaskSwitchContext
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 73


 2099              	.L128:
 2100              		.loc 1 1798 2
 2101 00cc 00BF     		nop
 2102 00ce 1037     		adds	r7, r7, #16
 2103              	.LCFI58:
 2104              		.cfi_def_cfa_offset 8
 2105 00d0 BD46     		mov	sp, r7
 2106              	.LCFI59:
 2107              		.cfi_def_cfa_register 13
 2108              		@ sp needed
 2109 00d2 80BD     		pop	{r7, pc}
 2110              	.L130:
 2111              		.align	2
 2112              	.L129:
 2113 00d4 00000000 		.word	pxCurrentTCB
 2114 00d8 00000000 		.word	xSuspendedTaskList
 2115 00dc 00000000 		.word	xSchedulerRunning
 2116 00e0 00000000 		.word	uxSchedulerSuspended
 2117 00e4 04ED00E0 		.word	-536810236
 2118 00e8 00000000 		.word	uxCurrentNumberOfTasks
 2119              		.cfi_endproc
 2120              	.LFE15:
 2122              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2123              		.align	1
 2124              		.syntax unified
 2125              		.thumb
 2126              		.thumb_func
 2128              	prvTaskIsTaskSuspended:
 2129              	.LFB16:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2130              		.loc 1 1806 2
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 24
 2133              		@ frame_needed = 1, uses_anonymous_args = 0
 2134              		@ link register save eliminated.
 2135 0000 80B4     		push	{r7}
 2136              	.LCFI60:
 2137              		.cfi_def_cfa_offset 4
 2138              		.cfi_offset 7, -4
 2139 0002 87B0     		sub	sp, sp, #28
 2140              	.LCFI61:
 2141              		.cfi_def_cfa_offset 32
 2142 0004 00AF     		add	r7, sp, #0
 2143              	.LCFI62:
 2144              		.cfi_def_cfa_register 7
 2145 0006 7860     		str	r0, [r7, #4]
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2146              		.loc 1 1807 13
 2147 0008 0023     		movs	r3, #0
 2148 000a 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 74


1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2149              		.loc 1 1808 22
 2150 000c 7B68     		ldr	r3, [r7, #4]
 2151 000e 3B61     		str	r3, [r7, #16]
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2152              		.loc 1 1814 3
 2153 0010 7B68     		ldr	r3, [r7, #4]
 2154 0012 002B     		cmp	r3, #0
 2155 0014 0BD1     		bne	.L132
 2156              	.LBB157:
 2157              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2158              		.loc 2 195 2
 2159              		.syntax unified
 2160              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2161 0016 4FF05003 			mov r3, #80												
 2162 001a 83F31188 		msr basepri, r3											
 2163 001e BFF36F8F 		isb														
 2164 0022 BFF34F8F 		dsb														
 2165              	
 2166              	@ 0 "" 2
 2167              		.thumb
 2168              		.syntax unified
 2169 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2170              		.loc 2 203 1
 2171 0028 00BF     		nop
 2172              	.L133:
 2173              	.LBE158:
 2174              	.LBE157:
 2175              		.loc 1 1814 3
 2176 002a 00BF     		nop
 2177 002c FDE7     		b	.L133
 2178              	.L132:
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2179              		.loc 1 1817 7
 2180 002e 3B69     		ldr	r3, [r7, #16]
 2181 0030 5B69     		ldr	r3, [r3, #20]
 2182              		.loc 1 1817 5
 2183 0032 0A4A     		ldr	r2, .L136
 2184 0034 9342     		cmp	r3, r2
 2185 0036 0AD1     		bne	.L134
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2186              		.loc 1 1820 8
 2187 0038 3B69     		ldr	r3, [r7, #16]
 2188 003a 9B6A     		ldr	r3, [r3, #40]
 2189              		.loc 1 1820 6
 2190 003c 084A     		ldr	r2, .L136+4
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 75


 2191 003e 9342     		cmp	r3, r2
 2192 0040 05D0     		beq	.L134
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2193              		.loc 1 1824 9
 2194 0042 3B69     		ldr	r3, [r7, #16]
 2195 0044 9B6A     		ldr	r3, [r3, #40]
 2196              		.loc 1 1824 7
 2197 0046 002B     		cmp	r3, #0
 2198 0048 01D1     		bne	.L134
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2199              		.loc 1 1826 14
 2200 004a 0123     		movs	r3, #1
 2201 004c 7B61     		str	r3, [r7, #20]
 2202              	.L134:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2203              		.loc 1 1843 10
 2204 004e 7B69     		ldr	r3, [r7, #20]
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2205              		.loc 1 1844 2
 2206 0050 1846     		mov	r0, r3
 2207 0052 1C37     		adds	r7, r7, #28
 2208              	.LCFI63:
 2209              		.cfi_def_cfa_offset 4
 2210 0054 BD46     		mov	sp, r7
 2211              	.LCFI64:
 2212              		.cfi_def_cfa_register 13
 2213              		@ sp needed
 2214 0056 5DF8047B 		ldr	r7, [sp], #4
 2215              	.LCFI65:
 2216              		.cfi_restore 7
 2217              		.cfi_def_cfa_offset 0
 2218 005a 7047     		bx	lr
 2219              	.L137:
 2220              		.align	2
 2221              	.L136:
 2222 005c 00000000 		.word	xSuspendedTaskList
 2223 0060 00000000 		.word	xPendingReadyList
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 76


 2224              		.cfi_endproc
 2225              	.LFE16:
 2227              		.section	.text.vTaskResume,"ax",%progbits
 2228              		.align	1
 2229              		.global	vTaskResume
 2230              		.syntax unified
 2231              		.thumb
 2232              		.thumb_func
 2234              	vTaskResume:
 2235              	.LFB17:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2236              		.loc 1 1852 2
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 16
 2239              		@ frame_needed = 1, uses_anonymous_args = 0
 2240 0000 80B5     		push	{r7, lr}
 2241              	.LCFI66:
 2242              		.cfi_def_cfa_offset 8
 2243              		.cfi_offset 7, -8
 2244              		.cfi_offset 14, -4
 2245 0002 84B0     		sub	sp, sp, #16
 2246              	.LCFI67:
 2247              		.cfi_def_cfa_offset 24
 2248 0004 00AF     		add	r7, sp, #0
 2249              	.LCFI68:
 2250              		.cfi_def_cfa_register 7
 2251 0006 7860     		str	r0, [r7, #4]
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2252              		.loc 1 1853 16
 2253 0008 7B68     		ldr	r3, [r7, #4]
 2254 000a FB60     		str	r3, [r7, #12]
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2255              		.loc 1 1856 3
 2256 000c 7B68     		ldr	r3, [r7, #4]
 2257 000e 002B     		cmp	r3, #0
 2258 0010 0BD1     		bne	.L139
 2259              	.LBB159:
 2260              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2261              		.loc 2 195 2
 2262              		.syntax unified
 2263              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2264 0012 4FF05003 			mov r3, #80												
 2265 0016 83F31188 		msr basepri, r3											
 2266 001a BFF36F8F 		isb														
 2267 001e BFF34F8F 		dsb														
 2268              	
 2269              	@ 0 "" 2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 77


 2270              		.thumb
 2271              		.syntax unified
 2272 0022 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2273              		.loc 2 203 1
 2274 0024 00BF     		nop
 2275              	.L140:
 2276              	.LBE160:
 2277              	.LBE159:
 2278              		.loc 1 1856 3
 2279 0026 00BF     		nop
 2280 0028 FDE7     		b	.L140
 2281              	.L139:
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2282              		.loc 1 1860 15
 2283 002a 214B     		ldr	r3, .L145
 2284 002c 1B68     		ldr	r3, [r3]
 2285              		.loc 1 1860 5
 2286 002e FA68     		ldr	r2, [r7, #12]
 2287 0030 9A42     		cmp	r2, r3
 2288 0032 38D0     		beq	.L144
 2289              		.loc 1 1860 33 discriminator 1
 2290 0034 FB68     		ldr	r3, [r7, #12]
 2291 0036 002B     		cmp	r3, #0
 2292 0038 35D0     		beq	.L144
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2293              		.loc 1 1862 4
 2294 003a FFF7FEFF 		bl	vPortEnterCritical
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2295              		.loc 1 1864 9
 2296 003e F868     		ldr	r0, [r7, #12]
 2297 0040 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2298 0044 0346     		mov	r3, r0
 2299              		.loc 1 1864 7 discriminator 1
 2300 0046 002B     		cmp	r3, #0
 2301 0048 2BD0     		beq	.L142
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2302              		.loc 1 1870 15
 2303 004a FB68     		ldr	r3, [r7, #12]
 2304 004c 0433     		adds	r3, r3, #4
 2305 004e 1846     		mov	r0, r3
 2306 0050 FFF7FEFF 		bl	uxListRemove
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2307              		.loc 1 1871 6
 2308 0054 FB68     		ldr	r3, [r7, #12]
 2309 0056 DA6A     		ldr	r2, [r3, #44]
 2310 0058 164B     		ldr	r3, .L145+4
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 78


 2311 005a 1B68     		ldr	r3, [r3]
 2312 005c 9A42     		cmp	r2, r3
 2313 005e 03D9     		bls	.L143
 2314              		.loc 1 1871 6 is_stmt 0 discriminator 1
 2315 0060 FB68     		ldr	r3, [r7, #12]
 2316 0062 DB6A     		ldr	r3, [r3, #44]
 2317 0064 134A     		ldr	r2, .L145+4
 2318 0066 1360     		str	r3, [r2]
 2319              	.L143:
 2320              		.loc 1 1871 6 discriminator 3
 2321 0068 FB68     		ldr	r3, [r7, #12]
 2322 006a DA6A     		ldr	r2, [r3, #44]
 2323 006c 1346     		mov	r3, r2
 2324 006e 9B00     		lsls	r3, r3, #2
 2325 0070 1344     		add	r3, r3, r2
 2326 0072 9B00     		lsls	r3, r3, #2
 2327 0074 104A     		ldr	r2, .L145+8
 2328 0076 1A44     		add	r2, r2, r3
 2329 0078 FB68     		ldr	r3, [r7, #12]
 2330 007a 0433     		adds	r3, r3, #4
 2331 007c 1946     		mov	r1, r3
 2332 007e 1046     		mov	r0, r2
 2333 0080 FFF7FEFF 		bl	vListInsertEnd
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2334              		.loc 1 1874 15 is_stmt 1
 2335 0084 FB68     		ldr	r3, [r7, #12]
 2336 0086 DA6A     		ldr	r2, [r3, #44]
 2337              		.loc 1 1874 43
 2338 0088 094B     		ldr	r3, .L145
 2339 008a 1B68     		ldr	r3, [r3]
 2340 008c DB6A     		ldr	r3, [r3, #44]
 2341              		.loc 1 1874 8
 2342 008e 9A42     		cmp	r2, r3
 2343 0090 07D3     		bcc	.L142
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2344              		.loc 1 1879 7
 2345 0092 0A4B     		ldr	r3, .L145+12
 2346 0094 4FF08052 		mov	r2, #268435456
 2347 0098 1A60     		str	r2, [r3]
 2348              		.syntax unified
 2349              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2350 009a BFF34F8F 		dsb
 2351              	@ 0 "" 2
 2352              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2353 009e BFF36F8F 		isb
 2354              	@ 0 "" 2
 2355              		.thumb
 2356              		.syntax unified
 2357              	.L142:
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 79


1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2358              		.loc 1 1891 4
 2359 00a2 FFF7FEFF 		bl	vPortExitCritical
 2360              	.L144:
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2361              		.loc 1 1897 2
 2362 00a6 00BF     		nop
 2363 00a8 1037     		adds	r7, r7, #16
 2364              	.LCFI69:
 2365              		.cfi_def_cfa_offset 8
 2366 00aa BD46     		mov	sp, r7
 2367              	.LCFI70:
 2368              		.cfi_def_cfa_register 13
 2369              		@ sp needed
 2370 00ac 80BD     		pop	{r7, pc}
 2371              	.L146:
 2372 00ae 00BF     		.align	2
 2373              	.L145:
 2374 00b0 00000000 		.word	pxCurrentTCB
 2375 00b4 00000000 		.word	uxTopReadyPriority
 2376 00b8 00000000 		.word	pxReadyTasksLists
 2377 00bc 04ED00E0 		.word	-536810236
 2378              		.cfi_endproc
 2379              	.LFE17:
 2381              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2382              		.align	1
 2383              		.global	xTaskResumeFromISR
 2384              		.syntax unified
 2385              		.thumb
 2386              		.thumb_func
 2388              	xTaskResumeFromISR:
 2389              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2390              		.loc 1 1906 2
 2391              		.cfi_startproc
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 80


 2392              		@ args = 0, pretend = 0, frame = 40
 2393              		@ frame_needed = 1, uses_anonymous_args = 0
 2394 0000 80B5     		push	{r7, lr}
 2395              	.LCFI71:
 2396              		.cfi_def_cfa_offset 8
 2397              		.cfi_offset 7, -8
 2398              		.cfi_offset 14, -4
 2399 0002 8AB0     		sub	sp, sp, #40
 2400              	.LCFI72:
 2401              		.cfi_def_cfa_offset 48
 2402 0004 00AF     		add	r7, sp, #0
 2403              	.LCFI73:
 2404              		.cfi_def_cfa_register 7
 2405 0006 7860     		str	r0, [r7, #4]
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2406              		.loc 1 1907 13
 2407 0008 0023     		movs	r3, #0
 2408 000a 7B62     		str	r3, [r7, #36]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2409              		.loc 1 1908 16
 2410 000c 7B68     		ldr	r3, [r7, #4]
 2411 000e 3B62     		str	r3, [r7, #32]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2412              		.loc 1 1911 3
 2413 0010 7B68     		ldr	r3, [r7, #4]
 2414 0012 002B     		cmp	r3, #0
 2415 0014 0BD1     		bne	.L148
 2416              	.LBB161:
 2417              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2418              		.loc 2 195 2
 2419              		.syntax unified
 2420              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2421 0016 4FF05003 			mov r3, #80												
 2422 001a 83F31188 		msr basepri, r3											
 2423 001e BFF36F8F 		isb														
 2424 0022 BFF34F8F 		dsb														
 2425              	
 2426              	@ 0 "" 2
 2427              		.thumb
 2428              		.syntax unified
 2429 0026 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2430              		.loc 2 203 1
 2431 0028 00BF     		nop
 2432              	.L149:
 2433              	.LBE162:
 2434              	.LBE161:
 2435              		.loc 1 1911 3
 2436 002a 00BF     		nop
 2437 002c FDE7     		b	.L149
 2438              	.L148:
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 81


1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2439              		.loc 1 1929 3
 2440 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
 2441              	.LBB163:
 2442              	.LBB164:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2443              		.loc 2 211 2
 2444              		.syntax unified
 2445              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2446 0032 EFF31182 			mrs r2, basepri											
 2447 0036 4FF05003 		mov r3, #80												
 2448 003a 83F31188 		msr basepri, r3											
 2449 003e BFF36F8F 		isb														
 2450 0042 BFF34F8F 		dsb														
 2451              	
 2452              	@ 0 "" 2
 2453              		.thumb
 2454              		.syntax unified
 2455 0046 7A61     		str	r2, [r7, #20]
 2456 0048 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2457              		.loc 2 223 9
 2458 004a 7B69     		ldr	r3, [r7, #20]
 2459              	.LBE164:
 2460              	.LBE163:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2461              		.loc 1 1931 28
 2462 004c FB61     		str	r3, [r7, #28]
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2463              		.loc 1 1933 8
 2464 004e 386A     		ldr	r0, [r7, #32]
 2465 0050 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2466 0054 0346     		mov	r3, r0
 2467              		.loc 1 1933 6 discriminator 1
 2468 0056 002B     		cmp	r3, #0
 2469 0058 30D0     		beq	.L151
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 82


 2470              		.loc 1 1938 30
 2471 005a 1E4B     		ldr	r3, .L156
 2472 005c 1B68     		ldr	r3, [r3]
 2473              		.loc 1 1938 7
 2474 005e 002B     		cmp	r3, #0
 2475 0060 26D1     		bne	.L152
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2476              		.loc 1 1942 15
 2477 0062 3B6A     		ldr	r3, [r7, #32]
 2478 0064 DA6A     		ldr	r2, [r3, #44]
 2479              		.loc 1 1942 43
 2480 0066 1C4B     		ldr	r3, .L156+4
 2481 0068 1B68     		ldr	r3, [r3]
 2482 006a DB6A     		ldr	r3, [r3, #44]
 2483              		.loc 1 1942 8
 2484 006c 9A42     		cmp	r2, r3
 2485 006e 01D3     		bcc	.L153
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2486              		.loc 1 1944 22
 2487 0070 0123     		movs	r3, #1
 2488 0072 7B62     		str	r3, [r7, #36]
 2489              	.L153:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2490              		.loc 1 1951 15
 2491 0074 3B6A     		ldr	r3, [r7, #32]
 2492 0076 0433     		adds	r3, r3, #4
 2493 0078 1846     		mov	r0, r3
 2494 007a FFF7FEFF 		bl	uxListRemove
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2495              		.loc 1 1952 6
 2496 007e 3B6A     		ldr	r3, [r7, #32]
 2497 0080 DA6A     		ldr	r2, [r3, #44]
 2498 0082 164B     		ldr	r3, .L156+8
 2499 0084 1B68     		ldr	r3, [r3]
 2500 0086 9A42     		cmp	r2, r3
 2501 0088 03D9     		bls	.L154
 2502              		.loc 1 1952 6 is_stmt 0 discriminator 1
 2503 008a 3B6A     		ldr	r3, [r7, #32]
 2504 008c DB6A     		ldr	r3, [r3, #44]
 2505 008e 134A     		ldr	r2, .L156+8
 2506 0090 1360     		str	r3, [r2]
 2507              	.L154:
 2508              		.loc 1 1952 6 discriminator 3
 2509 0092 3B6A     		ldr	r3, [r7, #32]
 2510 0094 DA6A     		ldr	r2, [r3, #44]
 2511 0096 1346     		mov	r3, r2
 2512 0098 9B00     		lsls	r3, r3, #2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 83


 2513 009a 1344     		add	r3, r3, r2
 2514 009c 9B00     		lsls	r3, r3, #2
 2515 009e 104A     		ldr	r2, .L156+12
 2516 00a0 1A44     		add	r2, r2, r3
 2517 00a2 3B6A     		ldr	r3, [r7, #32]
 2518 00a4 0433     		adds	r3, r3, #4
 2519 00a6 1946     		mov	r1, r3
 2520 00a8 1046     		mov	r0, r2
 2521 00aa FFF7FEFF 		bl	vListInsertEnd
 2522 00ae 05E0     		b	.L151
 2523              	.L152:
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2524              		.loc 1 1959 6 is_stmt 1
 2525 00b0 3B6A     		ldr	r3, [r7, #32]
 2526 00b2 1833     		adds	r3, r3, #24
 2527 00b4 1946     		mov	r1, r3
 2528 00b6 0B48     		ldr	r0, .L156+16
 2529 00b8 FFF7FEFF 		bl	vListInsertEnd
 2530              	.L151:
 2531 00bc FB69     		ldr	r3, [r7, #28]
 2532 00be FB60     		str	r3, [r7, #12]
 2533              	.LBB165:
 2534              	.LBB166:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2535              		.loc 2 229 2
 2536 00c0 FB68     		ldr	r3, [r7, #12]
 2537              		.syntax unified
 2538              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2539 00c2 83F31188 			msr basepri, r3	
 2540              	@ 0 "" 2
 2541              		.loc 2 233 1
 2542              		.thumb
 2543              		.syntax unified
 2544 00c6 00BF     		nop
 2545              	.LBE166:
 2546              	.LBE165:
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2547              		.loc 1 1969 10
 2548 00c8 7B6A     		ldr	r3, [r7, #36]
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2549              		.loc 1 1970 2
 2550 00ca 1846     		mov	r0, r3
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 84


 2551 00cc 2837     		adds	r7, r7, #40
 2552              	.LCFI74:
 2553              		.cfi_def_cfa_offset 8
 2554 00ce BD46     		mov	sp, r7
 2555              	.LCFI75:
 2556              		.cfi_def_cfa_register 13
 2557              		@ sp needed
 2558 00d0 80BD     		pop	{r7, pc}
 2559              	.L157:
 2560 00d2 00BF     		.align	2
 2561              	.L156:
 2562 00d4 00000000 		.word	uxSchedulerSuspended
 2563 00d8 00000000 		.word	pxCurrentTCB
 2564 00dc 00000000 		.word	uxTopReadyPriority
 2565 00e0 00000000 		.word	pxReadyTasksLists
 2566 00e4 00000000 		.word	xPendingReadyList
 2567              		.cfi_endproc
 2568              	.LFE18:
 2570              		.section	.rodata
 2571              		.align	2
 2572              	.LC0:
 2573 0000 49444C45 		.ascii	"IDLE\000"
 2573      00
 2574              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2575              		.align	1
 2576              		.global	vTaskStartScheduler
 2577              		.syntax unified
 2578              		.thumb
 2579              		.thumb_func
 2581              	vTaskStartScheduler:
 2582              	.LFB19:
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2583              		.loc 1 1976 1
 2584              		.cfi_startproc
 2585              		@ args = 0, pretend = 0, frame = 24
 2586              		@ frame_needed = 1, uses_anonymous_args = 0
 2587 0000 80B5     		push	{r7, lr}
 2588              	.LCFI76:
 2589              		.cfi_def_cfa_offset 8
 2590              		.cfi_offset 7, -8
 2591              		.cfi_offset 14, -4
 2592 0002 8AB0     		sub	sp, sp, #40
 2593              	.LCFI77:
 2594              		.cfi_def_cfa_offset 48
 2595 0004 04AF     		add	r7, sp, #16
 2596              	.LCFI78:
 2597              		.cfi_def_cfa 7, 32
 2598              	.LBB167:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 85


1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2599              		.loc 1 1982 17
 2600 0006 0023     		movs	r3, #0
 2601 0008 BB60     		str	r3, [r7, #8]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2602              		.loc 1 1983 16
 2603 000a 0023     		movs	r3, #0
 2604 000c 7B60     		str	r3, [r7, #4]
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2605              		.loc 1 1988 3
 2606 000e 3A46     		mov	r2, r7
 2607 0010 391D     		adds	r1, r7, #4
 2608 0012 07F10803 		add	r3, r7, #8
 2609 0016 1846     		mov	r0, r3
 2610 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2611              		.loc 1 1989 21
 2612 001c 3968     		ldr	r1, [r7]
 2613 001e 7B68     		ldr	r3, [r7, #4]
 2614 0020 BA68     		ldr	r2, [r7, #8]
 2615 0022 0292     		str	r2, [sp, #8]
 2616 0024 0193     		str	r3, [sp, #4]
 2617 0026 0023     		movs	r3, #0
 2618 0028 0093     		str	r3, [sp]
 2619 002a 0023     		movs	r3, #0
 2620 002c 0A46     		mov	r2, r1
 2621 002e 2349     		ldr	r1, .L166
 2622 0030 2348     		ldr	r0, .L166+4
 2623 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2624 0036 0346     		mov	r3, r0
 2625              		.loc 1 1989 19 discriminator 1
 2626 0038 224A     		ldr	r2, .L166+8
 2627 003a 1360     		str	r3, [r2]
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2628              		.loc 1 1997 23
 2629 003c 214B     		ldr	r3, .L166+8
 2630 003e 1B68     		ldr	r3, [r3]
 2631              		.loc 1 1997 5
 2632 0040 002B     		cmp	r3, #0
 2633 0042 02D0     		beq	.L159
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2634              		.loc 1 1999 12
 2635 0044 0123     		movs	r3, #1
 2636 0046 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 86


 2637 0048 01E0     		b	.L160
 2638              	.L159:
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2639              		.loc 1 2003 12
 2640 004a 0023     		movs	r3, #0
 2641 004c 7B61     		str	r3, [r7, #20]
 2642              	.L160:
 2643              	.LBE167:
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2644              		.loc 1 2020 5
 2645 004e 7B69     		ldr	r3, [r7, #20]
 2646 0050 012B     		cmp	r3, #1
 2647 0052 02D1     		bne	.L161
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2648              		.loc 1 2022 14
 2649 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2650 0058 7861     		str	r0, [r7, #20]
 2651              	.L161:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2652              		.loc 1 2031 4
 2653 005a 7B69     		ldr	r3, [r7, #20]
 2654 005c 012B     		cmp	r3, #1
 2655 005e 18D1     		bne	.L162
 2656              	.LBB168:
 2657              	.LBB169:
 2658              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2659              		.loc 2 195 2
 2660              		.syntax unified
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 87


 2661              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2662 0060 4FF05003 			mov r3, #80												
 2663 0064 83F31188 		msr basepri, r3											
 2664 0068 BFF36F8F 		isb														
 2665 006c BFF34F8F 		dsb														
 2666              	
 2667              	@ 0 "" 2
 2668              		.thumb
 2669              		.syntax unified
 2670 0070 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2671              		.loc 2 203 1
 2672 0072 00BF     		nop
 2673              	.LBE170:
 2674              	.LBE169:
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2675              		.loc 1 2059 24
 2676 0074 144B     		ldr	r3, .L166+12
 2677 0076 4FF0FF32 		mov	r2, #-1
 2678 007a 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2679              		.loc 1 2060 21
 2680 007c 134B     		ldr	r3, .L166+16
 2681 007e 0122     		movs	r2, #1
 2682 0080 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2683              		.loc 1 2061 14
 2684 0082 134B     		ldr	r3, .L166+20
 2685 0084 0022     		movs	r2, #0
 2686 0086 1A60     		str	r2, [r3]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 88


2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 2687              		.loc 1 2069 3
 2688 0088 FFF7FEFF 		bl	CONFIGURE_TIMER_FOR_RUN_TIME_STATS
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2689              		.loc 1 2075 7
 2690 008c FFF7FEFF 		bl	xPortStartScheduler
 2691              	.LBE168:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2692              		.loc 1 2096 1
 2693 0090 0FE0     		b	.L165
 2694              	.L162:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2695              		.loc 1 2090 3
 2696 0092 7B69     		ldr	r3, [r7, #20]
 2697 0094 B3F1FF3F 		cmp	r3, #-1
 2698 0098 0BD1     		bne	.L165
 2699              	.LBB171:
 2700              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2701              		.loc 2 195 2
 2702              		.syntax unified
 2703              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2704 009a 4FF05003 			mov r3, #80												
 2705 009e 83F31188 		msr basepri, r3											
 2706 00a2 BFF36F8F 		isb														
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 89


 2707 00a6 BFF34F8F 		dsb														
 2708              	
 2709              	@ 0 "" 2
 2710              		.thumb
 2711              		.syntax unified
 2712 00aa FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2713              		.loc 2 203 1
 2714 00ac 00BF     		nop
 2715              	.L164:
 2716              	.LBE172:
 2717              	.LBE171:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2718              		.loc 1 2090 3
 2719 00ae 00BF     		nop
 2720 00b0 FDE7     		b	.L164
 2721              	.L165:
 2722              		.loc 1 2096 1
 2723 00b2 00BF     		nop
 2724 00b4 1837     		adds	r7, r7, #24
 2725              	.LCFI79:
 2726              		.cfi_def_cfa_offset 8
 2727 00b6 BD46     		mov	sp, r7
 2728              	.LCFI80:
 2729              		.cfi_def_cfa_register 13
 2730              		@ sp needed
 2731 00b8 80BD     		pop	{r7, pc}
 2732              	.L167:
 2733 00ba 00BF     		.align	2
 2734              	.L166:
 2735 00bc 00000000 		.word	.LC0
 2736 00c0 00000000 		.word	prvIdleTask
 2737 00c4 00000000 		.word	xIdleTaskHandle
 2738 00c8 00000000 		.word	xNextTaskUnblockTime
 2739 00cc 00000000 		.word	xSchedulerRunning
 2740 00d0 00000000 		.word	xTickCount
 2741              		.cfi_endproc
 2742              	.LFE19:
 2744              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2745              		.align	1
 2746              		.global	vTaskEndScheduler
 2747              		.syntax unified
 2748              		.thumb
 2749              		.thumb_func
 2751              	vTaskEndScheduler:
 2752              	.LFB20:
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2753              		.loc 1 2100 1
 2754              		.cfi_startproc
 2755              		@ args = 0, pretend = 0, frame = 8
 2756              		@ frame_needed = 1, uses_anonymous_args = 0
 2757 0000 80B5     		push	{r7, lr}
 2758              	.LCFI81:
 2759              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 90


 2760              		.cfi_offset 7, -8
 2761              		.cfi_offset 14, -4
 2762 0002 82B0     		sub	sp, sp, #8
 2763              	.LCFI82:
 2764              		.cfi_def_cfa_offset 16
 2765 0004 00AF     		add	r7, sp, #0
 2766              	.LCFI83:
 2767              		.cfi_def_cfa_register 7
 2768              	.LBB173:
 2769              	.LBB174:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2770              		.loc 2 195 2
 2771              		.syntax unified
 2772              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2773 0006 4FF05003 			mov r3, #80												
 2774 000a 83F31188 		msr basepri, r3											
 2775 000e BFF36F8F 		isb														
 2776 0012 BFF34F8F 		dsb														
 2777              	
 2778              	@ 0 "" 2
 2779              		.thumb
 2780              		.syntax unified
 2781 0016 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2782              		.loc 2 203 1
 2783 0018 00BF     		nop
 2784              	.LBE174:
 2785              	.LBE173:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2786              		.loc 1 2105 20
 2787 001a 044B     		ldr	r3, .L169
 2788 001c 0022     		movs	r2, #0
 2789 001e 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2790              		.loc 1 2106 2
 2791 0020 FFF7FEFF 		bl	vPortEndScheduler
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2792              		.loc 1 2107 1
 2793 0024 00BF     		nop
 2794 0026 0837     		adds	r7, r7, #8
 2795              	.LCFI84:
 2796              		.cfi_def_cfa_offset 8
 2797 0028 BD46     		mov	sp, r7
 2798              	.LCFI85:
 2799              		.cfi_def_cfa_register 13
 2800              		@ sp needed
 2801 002a 80BD     		pop	{r7, pc}
 2802              	.L170:
 2803              		.align	2
 2804              	.L169:
 2805 002c 00000000 		.word	xSchedulerRunning
 2806              		.cfi_endproc
 2807              	.LFE20:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 91


 2809              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2810              		.align	1
 2811              		.global	vTaskSuspendAll
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2816              	vTaskSuspendAll:
 2817              	.LFB21:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2818              		.loc 1 2111 1
 2819              		.cfi_startproc
 2820              		@ args = 0, pretend = 0, frame = 0
 2821              		@ frame_needed = 1, uses_anonymous_args = 0
 2822              		@ link register save eliminated.
 2823 0000 80B4     		push	{r7}
 2824              	.LCFI86:
 2825              		.cfi_def_cfa_offset 4
 2826              		.cfi_offset 7, -4
 2827 0002 00AF     		add	r7, sp, #0
 2828              	.LCFI87:
 2829              		.cfi_def_cfa_register 7
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2830              		.loc 1 2123 2
 2831 0004 044B     		ldr	r3, .L172
 2832 0006 1B68     		ldr	r3, [r3]
 2833 0008 0133     		adds	r3, r3, #1
 2834 000a 034A     		ldr	r2, .L172
 2835 000c 1360     		str	r3, [r2]
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2836              		.loc 1 2127 2
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2837              		.loc 1 2128 1
 2838 000e 00BF     		nop
 2839 0010 BD46     		mov	sp, r7
 2840              	.LCFI88:
 2841              		.cfi_def_cfa_register 13
 2842              		@ sp needed
 2843 0012 5DF8047B 		ldr	r7, [sp], #4
 2844              	.LCFI89:
 2845              		.cfi_restore 7
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 92


 2846              		.cfi_def_cfa_offset 0
 2847 0016 7047     		bx	lr
 2848              	.L173:
 2849              		.align	2
 2850              	.L172:
 2851 0018 00000000 		.word	uxSchedulerSuspended
 2852              		.cfi_endproc
 2853              	.LFE21:
 2855              		.section	.text.prvGetExpectedIdleTime,"ax",%progbits
 2856              		.align	1
 2857              		.syntax unified
 2858              		.thumb
 2859              		.thumb_func
 2861              	prvGetExpectedIdleTime:
 2862              	.LFB22:
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2863              		.loc 1 2134 2
 2864              		.cfi_startproc
 2865              		@ args = 0, pretend = 0, frame = 8
 2866              		@ frame_needed = 1, uses_anonymous_args = 0
 2867              		@ link register save eliminated.
 2868 0000 80B4     		push	{r7}
 2869              	.LCFI90:
 2870              		.cfi_def_cfa_offset 4
 2871              		.cfi_offset 7, -4
 2872 0002 83B0     		sub	sp, sp, #12
 2873              	.LCFI91:
 2874              		.cfi_def_cfa_offset 16
 2875 0004 00AF     		add	r7, sp, #0
 2876              	.LCFI92:
 2877              		.cfi_def_cfa_register 7
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 2878              		.loc 1 2136 14
 2879 0006 0023     		movs	r3, #0
 2880 0008 3B60     		str	r3, [r7]
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 2881              		.loc 1 2144 27
 2882 000a 144B     		ldr	r3, .L181
 2883 000c 1B68     		ldr	r3, [r3]
 2884              		.loc 1 2144 6
 2885 000e 002B     		cmp	r3, #0
 2886 0010 01D0     		beq	.L175
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 93


 2887              		.loc 1 2146 32
 2888 0012 0123     		movs	r3, #1
 2889 0014 3B60     		str	r3, [r7]
 2890              	.L175:
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 2891              		.loc 1 2165 19
 2892 0016 124B     		ldr	r3, .L181+4
 2893 0018 1B68     		ldr	r3, [r3]
 2894 001a DB6A     		ldr	r3, [r3, #44]
 2895              		.loc 1 2165 5
 2896 001c 002B     		cmp	r3, #0
 2897 001e 02D0     		beq	.L176
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
 2898              		.loc 1 2167 12
 2899 0020 0023     		movs	r3, #0
 2900 0022 7B60     		str	r3, [r7, #4]
 2901 0024 12E0     		b	.L177
 2902              	.L176:
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 2903              		.loc 1 2169 12
 2904 0026 0F4B     		ldr	r3, .L181+8
 2905 0028 1B68     		ldr	r3, [r3]
 2906              		.loc 1 2169 10
 2907 002a 012B     		cmp	r3, #1
 2908 002c 02D9     		bls	.L178
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
 2909              		.loc 1 2174 12
 2910 002e 0023     		movs	r3, #0
 2911 0030 7B60     		str	r3, [r7, #4]
 2912 0032 0BE0     		b	.L177
 2913              	.L178:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 94


 2914              		.loc 1 2176 10
 2915 0034 3B68     		ldr	r3, [r7]
 2916 0036 002B     		cmp	r3, #0
 2917 0038 02D0     		beq	.L179
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
 2918              		.loc 1 2181 12
 2919 003a 0023     		movs	r3, #0
 2920 003c 7B60     		str	r3, [r7, #4]
 2921 003e 05E0     		b	.L177
 2922              	.L179:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
 2923              		.loc 1 2185 35
 2924 0040 094B     		ldr	r3, .L181+12
 2925 0042 1A68     		ldr	r2, [r3]
 2926 0044 094B     		ldr	r3, .L181+16
 2927 0046 1B68     		ldr	r3, [r3]
 2928              		.loc 1 2185 12
 2929 0048 D31A     		subs	r3, r2, r3
 2930 004a 7B60     		str	r3, [r7, #4]
 2931              	.L177:
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2932              		.loc 1 2188 10
 2933 004c 7B68     		ldr	r3, [r7, #4]
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2934              		.loc 1 2189 2
 2935 004e 1846     		mov	r0, r3
 2936 0050 0C37     		adds	r7, r7, #12
 2937              	.LCFI93:
 2938              		.cfi_def_cfa_offset 4
 2939 0052 BD46     		mov	sp, r7
 2940              	.LCFI94:
 2941              		.cfi_def_cfa_register 13
 2942              		@ sp needed
 2943 0054 5DF8047B 		ldr	r7, [sp], #4
 2944              	.LCFI95:
 2945              		.cfi_restore 7
 2946              		.cfi_def_cfa_offset 0
 2947 0058 7047     		bx	lr
 2948              	.L182:
 2949 005a 00BF     		.align	2
 2950              	.L181:
 2951 005c 00000000 		.word	uxTopReadyPriority
 2952 0060 00000000 		.word	pxCurrentTCB
 2953 0064 00000000 		.word	pxReadyTasksLists
 2954 0068 00000000 		.word	xNextTaskUnblockTime
 2955 006c 00000000 		.word	xTickCount
 2956              		.cfi_endproc
 2957              	.LFE22:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 95


 2959              		.section	.text.xTaskResumeAll,"ax",%progbits
 2960              		.align	1
 2961              		.global	xTaskResumeAll
 2962              		.syntax unified
 2963              		.thumb
 2964              		.thumb_func
 2966              	xTaskResumeAll:
 2967              	.LFB23:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2968              		.loc 1 2195 1
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 16
 2971              		@ frame_needed = 1, uses_anonymous_args = 0
 2972 0000 80B5     		push	{r7, lr}
 2973              	.LCFI96:
 2974              		.cfi_def_cfa_offset 8
 2975              		.cfi_offset 7, -8
 2976              		.cfi_offset 14, -4
 2977 0002 84B0     		sub	sp, sp, #16
 2978              	.LCFI97:
 2979              		.cfi_def_cfa_offset 24
 2980 0004 00AF     		add	r7, sp, #0
 2981              	.LCFI98:
 2982              		.cfi_def_cfa_register 7
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2983              		.loc 1 2196 8
 2984 0006 0023     		movs	r3, #0
 2985 0008 FB60     		str	r3, [r7, #12]
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2986              		.loc 1 2197 12
 2987 000a 0023     		movs	r3, #0
 2988 000c BB60     		str	r3, [r7, #8]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2989              		.loc 1 2201 2
 2990 000e 424B     		ldr	r3, .L196
 2991 0010 1B68     		ldr	r3, [r3]
 2992 0012 002B     		cmp	r3, #0
 2993 0014 0BD1     		bne	.L184
 2994              	.LBB175:
 2995              	.LBB176:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2996              		.loc 2 195 2
 2997              		.syntax unified
 2998              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2999 0016 4FF05003 			mov r3, #80												
 3000 001a 83F31188 		msr basepri, r3											
 3001 001e BFF36F8F 		isb														
 3002 0022 BFF34F8F 		dsb														
 3003              	
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 96


 3004              	@ 0 "" 2
 3005              		.thumb
 3006              		.syntax unified
 3007 0026 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3008              		.loc 2 203 1
 3009 0028 00BF     		nop
 3010              	.L185:
 3011              	.LBE176:
 3012              	.LBE175:
 3013              		.loc 1 2201 2
 3014 002a 00BF     		nop
 3015 002c FDE7     		b	.L185
 3016              	.L184:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3017              		.loc 1 2208 2
 3018 002e FFF7FEFF 		bl	vPortEnterCritical
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 3019              		.loc 1 2210 3
 3020 0032 394B     		ldr	r3, .L196
 3021 0034 1B68     		ldr	r3, [r3]
 3022 0036 013B     		subs	r3, r3, #1
 3023 0038 374A     		ldr	r2, .L196
 3024 003a 1360     		str	r3, [r2]
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3025              		.loc 1 2212 28
 3026 003c 364B     		ldr	r3, .L196
 3027 003e 1B68     		ldr	r3, [r3]
 3028              		.loc 1 2212 5
 3029 0040 002B     		cmp	r3, #0
 3030 0042 62D1     		bne	.L186
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 3031              		.loc 1 2214 31
 3032 0044 354B     		ldr	r3, .L196+4
 3033 0046 1B68     		ldr	r3, [r3]
 3034              		.loc 1 2214 6
 3035 0048 002B     		cmp	r3, #0
 3036 004a 5ED0     		beq	.L186
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 3037              		.loc 1 2218 10
 3038 004c 2FE0     		b	.L187
 3039              	.L190:
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 3040              		.loc 1 2220 14
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 97


 3041 004e 344B     		ldr	r3, .L196+8
 3042 0050 DB68     		ldr	r3, [r3, #12]
 3043              		.loc 1 2220 12
 3044 0052 DB68     		ldr	r3, [r3, #12]
 3045 0054 FB60     		str	r3, [r7, #12]
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3046              		.loc 1 2221 15
 3047 0056 FB68     		ldr	r3, [r7, #12]
 3048 0058 1833     		adds	r3, r3, #24
 3049 005a 1846     		mov	r0, r3
 3050 005c FFF7FEFF 		bl	uxListRemove
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3051              		.loc 1 2222 15
 3052 0060 FB68     		ldr	r3, [r7, #12]
 3053 0062 0433     		adds	r3, r3, #4
 3054 0064 1846     		mov	r0, r3
 3055 0066 FFF7FEFF 		bl	uxListRemove
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3056              		.loc 1 2223 6
 3057 006a FB68     		ldr	r3, [r7, #12]
 3058 006c DA6A     		ldr	r2, [r3, #44]
 3059 006e 2D4B     		ldr	r3, .L196+12
 3060 0070 1B68     		ldr	r3, [r3]
 3061 0072 9A42     		cmp	r2, r3
 3062 0074 03D9     		bls	.L188
 3063              		.loc 1 2223 6 is_stmt 0 discriminator 1
 3064 0076 FB68     		ldr	r3, [r7, #12]
 3065 0078 DB6A     		ldr	r3, [r3, #44]
 3066 007a 2A4A     		ldr	r2, .L196+12
 3067 007c 1360     		str	r3, [r2]
 3068              	.L188:
 3069              		.loc 1 2223 6 discriminator 3
 3070 007e FB68     		ldr	r3, [r7, #12]
 3071 0080 DA6A     		ldr	r2, [r3, #44]
 3072 0082 1346     		mov	r3, r2
 3073 0084 9B00     		lsls	r3, r3, #2
 3074 0086 1344     		add	r3, r3, r2
 3075 0088 9B00     		lsls	r3, r3, #2
 3076 008a 274A     		ldr	r2, .L196+16
 3077 008c 1A44     		add	r2, r2, r3
 3078 008e FB68     		ldr	r3, [r7, #12]
 3079 0090 0433     		adds	r3, r3, #4
 3080 0092 1946     		mov	r1, r3
 3081 0094 1046     		mov	r0, r2
 3082 0096 FFF7FEFF 		bl	vListInsertEnd
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3083              		.loc 1 2227 15 is_stmt 1
 3084 009a FB68     		ldr	r3, [r7, #12]
 3085 009c DA6A     		ldr	r2, [r3, #44]
 3086              		.loc 1 2227 43
 3087 009e 234B     		ldr	r3, .L196+20
 3088 00a0 1B68     		ldr	r3, [r3]
 3089 00a2 DB6A     		ldr	r3, [r3, #44]
 3090              		.loc 1 2227 8
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 98


 3091 00a4 9A42     		cmp	r2, r3
 3092 00a6 02D3     		bcc	.L187
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 3093              		.loc 1 2229 21
 3094 00a8 214B     		ldr	r3, .L196+24
 3095 00aa 0122     		movs	r2, #1
 3096 00ac 1A60     		str	r2, [r3]
 3097              	.L187:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3098              		.loc 1 2218 12
 3099 00ae 1C4B     		ldr	r3, .L196+8
 3100 00b0 1B68     		ldr	r3, [r3]
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3101              		.loc 1 2218 52
 3102 00b2 002B     		cmp	r3, #0
 3103 00b4 CBD1     		bne	.L190
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 3104              		.loc 1 2237 7
 3105 00b6 FB68     		ldr	r3, [r7, #12]
 3106 00b8 002B     		cmp	r3, #0
 3107 00ba 01D0     		beq	.L191
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 3108              		.loc 1 2245 6
 3109 00bc FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3110              	.L191:
 3111              	.LBB177:
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 3112              		.loc 1 2253 17
 3113 00c0 1C4B     		ldr	r3, .L196+28
 3114 00c2 1B68     		ldr	r3, [r3]
 3115 00c4 7B60     		str	r3, [r7, #4]
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
 3116              		.loc 1 2255 8
 3117 00c6 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 99


 3118 00c8 002B     		cmp	r3, #0
 3119 00ca 10D0     		beq	.L192
 3120              	.L194:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 3121              		.loc 1 2259 12
 3122 00cc FFF7FEFF 		bl	xTaskIncrementTick
 3123 00d0 0346     		mov	r3, r0
 3124              		.loc 1 2259 10 discriminator 1
 3125 00d2 002B     		cmp	r3, #0
 3126 00d4 02D0     		beq	.L193
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 3127              		.loc 1 2261 23
 3128 00d6 164B     		ldr	r3, .L196+24
 3129 00d8 0122     		movs	r2, #1
 3130 00da 1A60     		str	r2, [r3]
 3131              	.L193:
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
 3132              		.loc 1 2267 8
 3133 00dc 7B68     		ldr	r3, [r7, #4]
 3134 00de 013B     		subs	r3, r3, #1
 3135 00e0 7B60     		str	r3, [r7, #4]
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
 3136              		.loc 1 2268 30
 3137 00e2 7B68     		ldr	r3, [r7, #4]
 3138 00e4 002B     		cmp	r3, #0
 3139 00e6 F1D1     		bne	.L194
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
 3140              		.loc 1 2270 20
 3141 00e8 124B     		ldr	r3, .L196+28
 3142 00ea 0022     		movs	r2, #0
 3143 00ec 1A60     		str	r2, [r3]
 3144              	.L192:
 3145              	.LBE177:
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 3146              		.loc 1 2278 23
 3147 00ee 104B     		ldr	r3, .L196+24
 3148 00f0 1B68     		ldr	r3, [r3]
 3149              		.loc 1 2278 7
 3150 00f2 002B     		cmp	r3, #0
 3151 00f4 09D0     		beq	.L186
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 100


2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 3152              		.loc 1 2282 23
 3153 00f6 0123     		movs	r3, #1
 3154 00f8 BB60     		str	r3, [r7, #8]
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 3155              		.loc 1 2285 6
 3156 00fa 0F4B     		ldr	r3, .L196+32
 3157 00fc 4FF08052 		mov	r2, #268435456
 3158 0100 1A60     		str	r2, [r3]
 3159              		.syntax unified
 3160              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3161 0102 BFF34F8F 		dsb
 3162              	@ 0 "" 2
 3163              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3164 0106 BFF36F8F 		isb
 3165              	@ 0 "" 2
 3166              		.thumb
 3167              		.syntax unified
 3168              	.L186:
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3169              		.loc 1 2298 2
 3170 010a FFF7FEFF 		bl	vPortExitCritical
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3171              		.loc 1 2300 9
 3172 010e BB68     		ldr	r3, [r7, #8]
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3173              		.loc 1 2301 1
 3174 0110 1846     		mov	r0, r3
 3175 0112 1037     		adds	r7, r7, #16
 3176              	.LCFI99:
 3177              		.cfi_def_cfa_offset 8
 3178 0114 BD46     		mov	sp, r7
 3179              	.LCFI100:
 3180              		.cfi_def_cfa_register 13
 3181              		@ sp needed
 3182 0116 80BD     		pop	{r7, pc}
 3183              	.L197:
 3184              		.align	2
 3185              	.L196:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 101


 3186 0118 00000000 		.word	uxSchedulerSuspended
 3187 011c 00000000 		.word	uxCurrentNumberOfTasks
 3188 0120 00000000 		.word	xPendingReadyList
 3189 0124 00000000 		.word	uxTopReadyPriority
 3190 0128 00000000 		.word	pxReadyTasksLists
 3191 012c 00000000 		.word	pxCurrentTCB
 3192 0130 00000000 		.word	xYieldPending
 3193 0134 00000000 		.word	xPendedTicks
 3194 0138 04ED00E0 		.word	-536810236
 3195              		.cfi_endproc
 3196              	.LFE23:
 3198              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3199              		.align	1
 3200              		.global	xTaskGetTickCount
 3201              		.syntax unified
 3202              		.thumb
 3203              		.thumb_func
 3205              	xTaskGetTickCount:
 3206              	.LFB24:
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3207              		.loc 1 2305 1
 3208              		.cfi_startproc
 3209              		@ args = 0, pretend = 0, frame = 8
 3210              		@ frame_needed = 1, uses_anonymous_args = 0
 3211              		@ link register save eliminated.
 3212 0000 80B4     		push	{r7}
 3213              	.LCFI101:
 3214              		.cfi_def_cfa_offset 4
 3215              		.cfi_offset 7, -4
 3216 0002 83B0     		sub	sp, sp, #12
 3217              	.LCFI102:
 3218              		.cfi_def_cfa_offset 16
 3219 0004 00AF     		add	r7, sp, #0
 3220              	.LCFI103:
 3221              		.cfi_def_cfa_register 7
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3222              		.loc 1 2311 10
 3223 0006 054B     		ldr	r3, .L200
 3224 0008 1B68     		ldr	r3, [r3]
 3225 000a 7B60     		str	r3, [r7, #4]
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3226              		.loc 1 2315 9
 3227 000c 7B68     		ldr	r3, [r7, #4]
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3228              		.loc 1 2316 1
 3229 000e 1846     		mov	r0, r3
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 102


 3230 0010 0C37     		adds	r7, r7, #12
 3231              	.LCFI104:
 3232              		.cfi_def_cfa_offset 4
 3233 0012 BD46     		mov	sp, r7
 3234              	.LCFI105:
 3235              		.cfi_def_cfa_register 13
 3236              		@ sp needed
 3237 0014 5DF8047B 		ldr	r7, [sp], #4
 3238              	.LCFI106:
 3239              		.cfi_restore 7
 3240              		.cfi_def_cfa_offset 0
 3241 0018 7047     		bx	lr
 3242              	.L201:
 3243 001a 00BF     		.align	2
 3244              	.L200:
 3245 001c 00000000 		.word	xTickCount
 3246              		.cfi_endproc
 3247              	.LFE24:
 3249              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3250              		.align	1
 3251              		.global	xTaskGetTickCountFromISR
 3252              		.syntax unified
 3253              		.thumb
 3254              		.thumb_func
 3256              	xTaskGetTickCountFromISR:
 3257              	.LFB25:
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3258              		.loc 1 2320 1
 3259              		.cfi_startproc
 3260              		@ args = 0, pretend = 0, frame = 8
 3261              		@ frame_needed = 1, uses_anonymous_args = 0
 3262 0000 80B5     		push	{r7, lr}
 3263              	.LCFI107:
 3264              		.cfi_def_cfa_offset 8
 3265              		.cfi_offset 7, -8
 3266              		.cfi_offset 14, -4
 3267 0002 82B0     		sub	sp, sp, #8
 3268              	.LCFI108:
 3269              		.cfi_def_cfa_offset 16
 3270 0004 00AF     		add	r7, sp, #0
 3271              	.LCFI109:
 3272              		.cfi_def_cfa_register 7
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 103


2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3273              		.loc 1 2338 2
 3274 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3275              		.loc 1 2340 25
 3276 000a 0023     		movs	r3, #0
 3277 000c 7B60     		str	r3, [r7, #4]
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3278              		.loc 1 2342 11
 3279 000e 044B     		ldr	r3, .L204
 3280 0010 1B68     		ldr	r3, [r3]
 3281 0012 3B60     		str	r3, [r7]
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3282              		.loc 1 2346 9
 3283 0014 3B68     		ldr	r3, [r7]
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3284              		.loc 1 2347 1
 3285 0016 1846     		mov	r0, r3
 3286 0018 0837     		adds	r7, r7, #8
 3287              	.LCFI110:
 3288              		.cfi_def_cfa_offset 8
 3289 001a BD46     		mov	sp, r7
 3290              	.LCFI111:
 3291              		.cfi_def_cfa_register 13
 3292              		@ sp needed
 3293 001c 80BD     		pop	{r7, pc}
 3294              	.L205:
 3295 001e 00BF     		.align	2
 3296              	.L204:
 3297 0020 00000000 		.word	xTickCount
 3298              		.cfi_endproc
 3299              	.LFE25:
 3301              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3302              		.align	1
 3303              		.global	uxTaskGetNumberOfTasks
 3304              		.syntax unified
 3305              		.thumb
 3306              		.thumb_func
 3308              	uxTaskGetNumberOfTasks:
 3309              	.LFB26:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3310              		.loc 1 2351 1
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 104


 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314              		@ link register save eliminated.
 3315 0000 80B4     		push	{r7}
 3316              	.LCFI112:
 3317              		.cfi_def_cfa_offset 4
 3318              		.cfi_offset 7, -4
 3319 0002 00AF     		add	r7, sp, #0
 3320              	.LCFI113:
 3321              		.cfi_def_cfa_register 7
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3322              		.loc 1 2354 9
 3323 0004 034B     		ldr	r3, .L208
 3324 0006 1B68     		ldr	r3, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3325              		.loc 1 2355 1
 3326 0008 1846     		mov	r0, r3
 3327 000a BD46     		mov	sp, r7
 3328              	.LCFI114:
 3329              		.cfi_def_cfa_register 13
 3330              		@ sp needed
 3331 000c 5DF8047B 		ldr	r7, [sp], #4
 3332              	.LCFI115:
 3333              		.cfi_restore 7
 3334              		.cfi_def_cfa_offset 0
 3335 0010 7047     		bx	lr
 3336              	.L209:
 3337 0012 00BF     		.align	2
 3338              	.L208:
 3339 0014 00000000 		.word	uxCurrentNumberOfTasks
 3340              		.cfi_endproc
 3341              	.LFE26:
 3343              		.section	.text.pcTaskGetName,"ax",%progbits
 3344              		.align	1
 3345              		.global	pcTaskGetName
 3346              		.syntax unified
 3347              		.thumb
 3348              		.thumb_func
 3350              	pcTaskGetName:
 3351              	.LFB27:
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3352              		.loc 1 2359 1
 3353              		.cfi_startproc
 3354              		@ args = 0, pretend = 0, frame = 16
 3355              		@ frame_needed = 1, uses_anonymous_args = 0
 3356              		@ link register save eliminated.
 3357 0000 80B4     		push	{r7}
 3358              	.LCFI116:
 3359              		.cfi_def_cfa_offset 4
 3360              		.cfi_offset 7, -4
 3361 0002 85B0     		sub	sp, sp, #20
 3362              	.LCFI117:
 3363              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 105


 3364 0004 00AF     		add	r7, sp, #0
 3365              	.LCFI118:
 3366              		.cfi_def_cfa_register 7
 3367 0006 7860     		str	r0, [r7, #4]
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3368              		.loc 1 2364 10
 3369 0008 7B68     		ldr	r3, [r7, #4]
 3370 000a 002B     		cmp	r3, #0
 3371 000c 02D1     		bne	.L211
 3372              		.loc 1 2364 10 is_stmt 0 discriminator 1
 3373 000e 0E4B     		ldr	r3, .L216
 3374 0010 1B68     		ldr	r3, [r3]
 3375 0012 00E0     		b	.L212
 3376              	.L211:
 3377              		.loc 1 2364 10 discriminator 2
 3378 0014 7B68     		ldr	r3, [r7, #4]
 3379              	.L212:
 3380              		.loc 1 2364 8 is_stmt 1 discriminator 4
 3381 0016 FB60     		str	r3, [r7, #12]
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3382              		.loc 1 2365 2
 3383 0018 FB68     		ldr	r3, [r7, #12]
 3384 001a 002B     		cmp	r3, #0
 3385 001c 0BD1     		bne	.L213
 3386              	.LBB178:
 3387              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3388              		.loc 2 195 2
 3389              		.syntax unified
 3390              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3391 001e 4FF05003 			mov r3, #80												
 3392 0022 83F31188 		msr basepri, r3											
 3393 0026 BFF36F8F 		isb														
 3394 002a BFF34F8F 		dsb														
 3395              	
 3396              	@ 0 "" 2
 3397              		.thumb
 3398              		.syntax unified
 3399 002e BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3400              		.loc 2 203 1
 3401 0030 00BF     		nop
 3402              	.L214:
 3403              	.LBE179:
 3404              	.LBE178:
 3405              		.loc 1 2365 2
 3406 0032 00BF     		nop
 3407 0034 FDE7     		b	.L214
 3408              	.L213:
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3409              		.loc 1 2366 9
 3410 0036 FB68     		ldr	r3, [r7, #12]
 3411 0038 3433     		adds	r3, r3, #52
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 106


2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3412              		.loc 1 2367 1
 3413 003a 1846     		mov	r0, r3
 3414 003c 1437     		adds	r7, r7, #20
 3415              	.LCFI119:
 3416              		.cfi_def_cfa_offset 4
 3417 003e BD46     		mov	sp, r7
 3418              	.LCFI120:
 3419              		.cfi_def_cfa_register 13
 3420              		@ sp needed
 3421 0040 5DF8047B 		ldr	r7, [sp], #4
 3422              	.LCFI121:
 3423              		.cfi_restore 7
 3424              		.cfi_def_cfa_offset 0
 3425 0044 7047     		bx	lr
 3426              	.L217:
 3427 0046 00BF     		.align	2
 3428              	.L216:
 3429 0048 00000000 		.word	pxCurrentTCB
 3430              		.cfi_endproc
 3431              	.LFE27:
 3433              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3434              		.align	1
 3435              		.global	uxTaskGetSystemState
 3436              		.syntax unified
 3437              		.thumb
 3438              		.thumb_func
 3440              	uxTaskGetSystemState:
 3441              	.LFB28:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 107


2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 108


2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3442              		.loc 1 2506 2
 3443              		.cfi_startproc
 3444              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 109


 3445              		@ frame_needed = 1, uses_anonymous_args = 0
 3446 0000 80B5     		push	{r7, lr}
 3447              	.LCFI122:
 3448              		.cfi_def_cfa_offset 8
 3449              		.cfi_offset 7, -8
 3450              		.cfi_offset 14, -4
 3451 0002 86B0     		sub	sp, sp, #24
 3452              	.LCFI123:
 3453              		.cfi_def_cfa_offset 32
 3454 0004 00AF     		add	r7, sp, #0
 3455              	.LCFI124:
 3456              		.cfi_def_cfa_register 7
 3457 0006 F860     		str	r0, [r7, #12]
 3458 0008 B960     		str	r1, [r7, #8]
 3459 000a 7A60     		str	r2, [r7, #4]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3460              		.loc 1 2507 14
 3461 000c 0023     		movs	r3, #0
 3462 000e 7B61     		str	r3, [r7, #20]
 3463              		.loc 1 2507 26
 3464 0010 3823     		movs	r3, #56
 3465 0012 3B61     		str	r3, [r7, #16]
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3466              		.loc 1 2509 3
 3467 0014 FFF7FEFF 		bl	vTaskSuspendAll
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3468              		.loc 1 2512 20
 3469 0018 3B4B     		ldr	r3, .L222
 3470 001a 1B68     		ldr	r3, [r3]
 3471              		.loc 1 2512 6
 3472 001c BA68     		ldr	r2, [r7, #8]
 3473 001e 9A42     		cmp	r2, r3
 3474 0020 6BD3     		bcc	.L219
 3475              	.L220:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3476              		.loc 1 2518 13
 3477 0022 3B69     		ldr	r3, [r7, #16]
 3478 0024 013B     		subs	r3, r3, #1
 3479 0026 3B61     		str	r3, [r7, #16]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3480              		.loc 1 2519 66
 3481 0028 7A69     		ldr	r2, [r7, #20]
 3482 002a 1346     		mov	r3, r2
 3483 002c DB00     		lsls	r3, r3, #3
 3484 002e 1344     		add	r3, r3, r2
 3485 0030 9B00     		lsls	r3, r3, #2
 3486 0032 1A46     		mov	r2, r3
 3487              		.loc 1 2519 46
 3488 0034 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 110


 3489 0036 9818     		adds	r0, r3, r2
 3490              		.loc 1 2519 16
 3491 0038 3A69     		ldr	r2, [r7, #16]
 3492 003a 1346     		mov	r3, r2
 3493 003c 9B00     		lsls	r3, r3, #2
 3494 003e 1344     		add	r3, r3, r2
 3495 0040 9B00     		lsls	r3, r3, #2
 3496 0042 324A     		ldr	r2, .L222+4
 3497 0044 1344     		add	r3, r3, r2
 3498 0046 0122     		movs	r2, #1
 3499 0048 1946     		mov	r1, r3
 3500 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3501 004e 0246     		mov	r2, r0
 3502              		.loc 1 2519 13 discriminator 1
 3503 0050 7B69     		ldr	r3, [r7, #20]
 3504 0052 1344     		add	r3, r3, r2
 3505 0054 7B61     		str	r3, [r7, #20]
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3506              		.loc 1 2521 22 discriminator 1
 3507 0056 3B69     		ldr	r3, [r7, #16]
 3508 0058 002B     		cmp	r3, #0
 3509 005a E2D1     		bne	.L220
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
 3510              		.loc 1 2525 65
 3511 005c 7A69     		ldr	r2, [r7, #20]
 3512 005e 1346     		mov	r3, r2
 3513 0060 DB00     		lsls	r3, r3, #3
 3514 0062 1344     		add	r3, r3, r2
 3515 0064 9B00     		lsls	r3, r3, #2
 3516 0066 1A46     		mov	r2, r3
 3517              		.loc 1 2525 45
 3518 0068 FB68     		ldr	r3, [r7, #12]
 3519 006a 1344     		add	r3, r3, r2
 3520              		.loc 1 2525 15
 3521 006c 284A     		ldr	r2, .L222+8
 3522 006e 1168     		ldr	r1, [r2]
 3523 0070 0222     		movs	r2, #2
 3524 0072 1846     		mov	r0, r3
 3525 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3526 0078 0246     		mov	r2, r0
 3527              		.loc 1 2525 12 discriminator 1
 3528 007a 7B69     		ldr	r3, [r7, #20]
 3529 007c 1344     		add	r3, r3, r2
 3530 007e 7B61     		str	r3, [r7, #20]
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3531              		.loc 1 2526 65
 3532 0080 7A69     		ldr	r2, [r7, #20]
 3533 0082 1346     		mov	r3, r2
 3534 0084 DB00     		lsls	r3, r3, #3
 3535 0086 1344     		add	r3, r3, r2
 3536 0088 9B00     		lsls	r3, r3, #2
 3537 008a 1A46     		mov	r2, r3
 3538              		.loc 1 2526 45
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 111


 3539 008c FB68     		ldr	r3, [r7, #12]
 3540 008e 1344     		add	r3, r3, r2
 3541              		.loc 1 2526 15
 3542 0090 204A     		ldr	r2, .L222+12
 3543 0092 1168     		ldr	r1, [r2]
 3544 0094 0222     		movs	r2, #2
 3545 0096 1846     		mov	r0, r3
 3546 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3547 009c 0246     		mov	r2, r0
 3548              		.loc 1 2526 12 discriminator 1
 3549 009e 7B69     		ldr	r3, [r7, #20]
 3550 00a0 1344     		add	r3, r3, r2
 3551 00a2 7B61     		str	r3, [r7, #20]
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3552              		.loc 1 2532 66
 3553 00a4 7A69     		ldr	r2, [r7, #20]
 3554 00a6 1346     		mov	r3, r2
 3555 00a8 DB00     		lsls	r3, r3, #3
 3556 00aa 1344     		add	r3, r3, r2
 3557 00ac 9B00     		lsls	r3, r3, #2
 3558 00ae 1A46     		mov	r2, r3
 3559              		.loc 1 2532 46
 3560 00b0 FB68     		ldr	r3, [r7, #12]
 3561 00b2 1344     		add	r3, r3, r2
 3562              		.loc 1 2532 16
 3563 00b4 0422     		movs	r2, #4
 3564 00b6 1849     		ldr	r1, .L222+16
 3565 00b8 1846     		mov	r0, r3
 3566 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3567 00be 0246     		mov	r2, r0
 3568              		.loc 1 2532 13 discriminator 1
 3569 00c0 7B69     		ldr	r3, [r7, #20]
 3570 00c2 1344     		add	r3, r3, r2
 3571 00c4 7B61     		str	r3, [r7, #20]
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3572              		.loc 1 2540 66
 3573 00c6 7A69     		ldr	r2, [r7, #20]
 3574 00c8 1346     		mov	r3, r2
 3575 00ca DB00     		lsls	r3, r3, #3
 3576 00cc 1344     		add	r3, r3, r2
 3577 00ce 9B00     		lsls	r3, r3, #2
 3578 00d0 1A46     		mov	r2, r3
 3579              		.loc 1 2540 46
 3580 00d2 FB68     		ldr	r3, [r7, #12]
 3581 00d4 1344     		add	r3, r3, r2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 112


 3582              		.loc 1 2540 16
 3583 00d6 0322     		movs	r2, #3
 3584 00d8 1049     		ldr	r1, .L222+20
 3585 00da 1846     		mov	r0, r3
 3586 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3587 00e0 0246     		mov	r2, r0
 3588              		.loc 1 2540 13 discriminator 1
 3589 00e2 7B69     		ldr	r3, [r7, #20]
 3590 00e4 1344     		add	r3, r3, r2
 3591 00e6 7B61     		str	r3, [r7, #20]
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3592              		.loc 1 2546 8
 3593 00e8 7B68     		ldr	r3, [r7, #4]
 3594 00ea 002B     		cmp	r3, #0
 3595 00ec 05D0     		beq	.L219
 3596              	.LBB180:
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 3597              		.loc 1 2551 27
 3598 00ee FFF7FEFF 		bl	GET_RUN_TIME_COUNTER_VALUE
 3599 00f2 0346     		mov	r3, r0
 3600              		.loc 1 2551 27 is_stmt 0 discriminator 1
 3601 00f4 1A46     		mov	r2, r3
 3602              		.loc 1 2551 25 is_stmt 1 discriminator 1
 3603 00f6 7B68     		ldr	r3, [r7, #4]
 3604 00f8 1A60     		str	r2, [r3]
 3605              	.L219:
 3606              	.LBE180:
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3607              		.loc 1 2569 12
 3608 00fa FFF7FEFF 		bl	xTaskResumeAll
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 113


2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3609              		.loc 1 2571 10
 3610 00fe 7B69     		ldr	r3, [r7, #20]
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3611              		.loc 1 2572 2
 3612 0100 1846     		mov	r0, r3
 3613 0102 1837     		adds	r7, r7, #24
 3614              	.LCFI125:
 3615              		.cfi_def_cfa_offset 8
 3616 0104 BD46     		mov	sp, r7
 3617              	.LCFI126:
 3618              		.cfi_def_cfa_register 13
 3619              		@ sp needed
 3620 0106 80BD     		pop	{r7, pc}
 3621              	.L223:
 3622              		.align	2
 3623              	.L222:
 3624 0108 00000000 		.word	uxCurrentNumberOfTasks
 3625 010c 00000000 		.word	pxReadyTasksLists
 3626 0110 00000000 		.word	pxDelayedTaskList
 3627 0114 00000000 		.word	pxOverflowDelayedTaskList
 3628 0118 00000000 		.word	xTasksWaitingTermination
 3629 011c 00000000 		.word	xSuspendedTaskList
 3630              		.cfi_endproc
 3631              	.LFE28:
 3633              		.section	.text.vTaskStepTick,"ax",%progbits
 3634              		.align	1
 3635              		.global	vTaskStepTick
 3636              		.syntax unified
 3637              		.thumb
 3638              		.thumb_func
 3640              	vTaskStepTick:
 3641              	.LFB29:
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 114


2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3642              		.loc 1 2597 2
 3643              		.cfi_startproc
 3644              		@ args = 0, pretend = 0, frame = 16
 3645              		@ frame_needed = 1, uses_anonymous_args = 0
 3646              		@ link register save eliminated.
 3647 0000 80B4     		push	{r7}
 3648              	.LCFI127:
 3649              		.cfi_def_cfa_offset 4
 3650              		.cfi_offset 7, -4
 3651 0002 85B0     		sub	sp, sp, #20
 3652              	.LCFI128:
 3653              		.cfi_def_cfa_offset 24
 3654 0004 00AF     		add	r7, sp, #0
 3655              	.LCFI129:
 3656              		.cfi_def_cfa_register 7
 3657 0006 7860     		str	r0, [r7, #4]
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 3658              		.loc 1 2601 3
 3659 0008 0F4B     		ldr	r3, .L227
 3660 000a 1A68     		ldr	r2, [r3]
 3661 000c 7B68     		ldr	r3, [r7, #4]
 3662 000e 1A44     		add	r2, r2, r3
 3663 0010 0E4B     		ldr	r3, .L227+4
 3664 0012 1B68     		ldr	r3, [r3]
 3665 0014 9A42     		cmp	r2, r3
 3666 0016 0BD9     		bls	.L225
 3667              	.LBB181:
 3668              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3669              		.loc 2 195 2
 3670              		.syntax unified
 3671              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3672 0018 4FF05003 			mov r3, #80												
 3673 001c 83F31188 		msr basepri, r3											
 3674 0020 BFF36F8F 		isb														
 3675 0024 BFF34F8F 		dsb														
 3676              	
 3677              	@ 0 "" 2
 3678              		.thumb
 3679              		.syntax unified
 3680 0028 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3681              		.loc 2 203 1
 3682 002a 00BF     		nop
 3683              	.L226:
 3684              	.LBE182:
 3685              	.LBE181:
 3686              		.loc 1 2601 3
 3687 002c 00BF     		nop
 3688 002e FDE7     		b	.L226
 3689              	.L225:
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
 3690              		.loc 1 2602 14
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 115


 3691 0030 054B     		ldr	r3, .L227
 3692 0032 1A68     		ldr	r2, [r3]
 3693 0034 7B68     		ldr	r3, [r7, #4]
 3694 0036 1344     		add	r3, r3, r2
 3695 0038 034A     		ldr	r2, .L227
 3696 003a 1360     		str	r3, [r2]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3697              		.loc 1 2604 2
 3698 003c 00BF     		nop
 3699 003e 1437     		adds	r7, r7, #20
 3700              	.LCFI130:
 3701              		.cfi_def_cfa_offset 4
 3702 0040 BD46     		mov	sp, r7
 3703              	.LCFI131:
 3704              		.cfi_def_cfa_register 13
 3705              		@ sp needed
 3706 0042 5DF8047B 		ldr	r7, [sp], #4
 3707              	.LCFI132:
 3708              		.cfi_restore 7
 3709              		.cfi_def_cfa_offset 0
 3710 0046 7047     		bx	lr
 3711              	.L228:
 3712              		.align	2
 3713              	.L227:
 3714 0048 00000000 		.word	xTickCount
 3715 004c 00000000 		.word	xNextTaskUnblockTime
 3716              		.cfi_endproc
 3717              	.LFE29:
 3719              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3720              		.align	1
 3721              		.global	xTaskCatchUpTicks
 3722              		.syntax unified
 3723              		.thumb
 3724              		.thumb_func
 3726              	xTaskCatchUpTicks:
 3727              	.LFB30:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3728              		.loc 1 2610 1
 3729              		.cfi_startproc
 3730              		@ args = 0, pretend = 0, frame = 16
 3731              		@ frame_needed = 1, uses_anonymous_args = 0
 3732 0000 80B5     		push	{r7, lr}
 3733              	.LCFI133:
 3734              		.cfi_def_cfa_offset 8
 3735              		.cfi_offset 7, -8
 3736              		.cfi_offset 14, -4
 3737 0002 84B0     		sub	sp, sp, #16
 3738              	.LCFI134:
 3739              		.cfi_def_cfa_offset 24
 3740 0004 00AF     		add	r7, sp, #0
 3741              	.LCFI135:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 116


 3742              		.cfi_def_cfa_register 7
 3743 0006 7860     		str	r0, [r7, #4]
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 3744              		.loc 1 2611 12
 3745 0008 0023     		movs	r3, #0
 3746 000a FB60     		str	r3, [r7, #12]
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
 3747              		.loc 1 2615 2
 3748 000c 0F4B     		ldr	r3, .L233
 3749 000e 1B68     		ldr	r3, [r3]
 3750 0010 002B     		cmp	r3, #0
 3751 0012 0BD0     		beq	.L230
 3752              	.LBB183:
 3753              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3754              		.loc 2 195 2
 3755              		.syntax unified
 3756              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3757 0014 4FF05003 			mov r3, #80												
 3758 0018 83F31188 		msr basepri, r3											
 3759 001c BFF36F8F 		isb														
 3760 0020 BFF34F8F 		dsb														
 3761              	
 3762              	@ 0 "" 2
 3763              		.thumb
 3764              		.syntax unified
 3765 0024 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3766              		.loc 2 203 1
 3767 0026 00BF     		nop
 3768              	.L231:
 3769              	.LBE184:
 3770              	.LBE183:
 3771              		.loc 1 2615 2
 3772 0028 00BF     		nop
 3773 002a FDE7     		b	.L231
 3774              	.L230:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
 3775              		.loc 1 2619 2
 3776 002c FFF7FEFF 		bl	vTaskSuspendAll
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3777              		.loc 1 2620 15
 3778 0030 074B     		ldr	r3, .L233+4
 3779 0032 1A68     		ldr	r2, [r3]
 3780 0034 7B68     		ldr	r3, [r7, #4]
 3781 0036 1344     		add	r3, r3, r2
 3782 0038 054A     		ldr	r2, .L233+4
 3783 003a 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3784              		.loc 1 2621 19
 3785 003c FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 117


 3786 0040 F860     		str	r0, [r7, #12]
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
 3787              		.loc 1 2623 9
 3788 0042 FB68     		ldr	r3, [r7, #12]
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3789              		.loc 1 2624 1
 3790 0044 1846     		mov	r0, r3
 3791 0046 1037     		adds	r7, r7, #16
 3792              	.LCFI136:
 3793              		.cfi_def_cfa_offset 8
 3794 0048 BD46     		mov	sp, r7
 3795              	.LCFI137:
 3796              		.cfi_def_cfa_register 13
 3797              		@ sp needed
 3798 004a 80BD     		pop	{r7, pc}
 3799              	.L234:
 3800              		.align	2
 3801              	.L233:
 3802 004c 00000000 		.word	uxSchedulerSuspended
 3803 0050 00000000 		.word	xPendedTicks
 3804              		.cfi_endproc
 3805              	.LFE30:
 3807              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3808              		.align	1
 3809              		.global	xTaskIncrementTick
 3810              		.syntax unified
 3811              		.thumb
 3812              		.thumb_func
 3814              	xTaskIncrementTick:
 3815              	.LFB31:
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 118


2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 119


2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3816              		.loc 1 2708 1
 3817              		.cfi_startproc
 3818              		@ args = 0, pretend = 0, frame = 24
 3819              		@ frame_needed = 1, uses_anonymous_args = 0
 3820 0000 80B5     		push	{r7, lr}
 3821              	.LCFI138:
 3822              		.cfi_def_cfa_offset 8
 3823              		.cfi_offset 7, -8
 3824              		.cfi_offset 14, -4
 3825 0002 86B0     		sub	sp, sp, #24
 3826              	.LCFI139:
 3827              		.cfi_def_cfa_offset 32
 3828 0004 00AF     		add	r7, sp, #0
 3829              	.LCFI140:
 3830              		.cfi_def_cfa_register 7
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3831              		.loc 1 2711 12
 3832 0006 0023     		movs	r3, #0
 3833 0008 7B61     		str	r3, [r7, #20]
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3834              		.loc 1 2717 27
 3835 000a 4F4B     		ldr	r3, .L250
 3836 000c 1B68     		ldr	r3, [r3]
 3837              		.loc 1 2717 4
 3838 000e 002B     		cmp	r3, #0
 3839 0010 40F09080 		bne	.L236
 3840              	.LBB185:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3841              		.loc 1 2721 49
 3842 0014 4D4B     		ldr	r3, .L250+4
 3843 0016 1B68     		ldr	r3, [r3]
 3844              		.loc 1 2721 20
 3845 0018 0133     		adds	r3, r3, #1
 3846 001a 3B61     		str	r3, [r7, #16]
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3847              		.loc 1 2725 14
 3848 001c 4B4A     		ldr	r2, .L250+4
 3849 001e 3B69     		ldr	r3, [r7, #16]
 3850 0020 1360     		str	r3, [r2]
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3851              		.loc 1 2727 5
 3852 0022 3B69     		ldr	r3, [r7, #16]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 120


 3853 0024 002B     		cmp	r3, #0
 3854 0026 21D1     		bne	.L237
 3855              	.LBB186:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3856              		.loc 1 2729 4
 3857 0028 494B     		ldr	r3, .L250+8
 3858 002a 1B68     		ldr	r3, [r3]
 3859 002c 1B68     		ldr	r3, [r3]
 3860 002e 002B     		cmp	r3, #0
 3861 0030 0BD0     		beq	.L238
 3862              	.LBB187:
 3863              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3864              		.loc 2 195 2
 3865              		.syntax unified
 3866              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3867 0032 4FF05003 			mov r3, #80												
 3868 0036 83F31188 		msr basepri, r3											
 3869 003a BFF36F8F 		isb														
 3870 003e BFF34F8F 		dsb														
 3871              	
 3872              	@ 0 "" 2
 3873              		.thumb
 3874              		.syntax unified
 3875 0042 3B60     		str	r3, [r7]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3876              		.loc 2 203 1
 3877 0044 00BF     		nop
 3878              	.L239:
 3879              	.LBE188:
 3880              	.LBE187:
 3881              		.loc 1 2729 4
 3882 0046 00BF     		nop
 3883 0048 FDE7     		b	.L239
 3884              	.L238:
 3885              		.loc 1 2729 4 is_stmt 0 discriminator 2
 3886 004a 414B     		ldr	r3, .L250+8
 3887 004c 1B68     		ldr	r3, [r3]
 3888 004e FB60     		str	r3, [r7, #12]
 3889 0050 404B     		ldr	r3, .L250+12
 3890 0052 1B68     		ldr	r3, [r3]
 3891 0054 3E4A     		ldr	r2, .L250+8
 3892 0056 1360     		str	r3, [r2]
 3893 0058 3E4A     		ldr	r2, .L250+12
 3894 005a FB68     		ldr	r3, [r7, #12]
 3895 005c 1360     		str	r3, [r2]
 3896 005e 3E4B     		ldr	r3, .L250+16
 3897 0060 1B68     		ldr	r3, [r3]
 3898 0062 0133     		adds	r3, r3, #1
 3899 0064 3C4A     		ldr	r2, .L250+16
 3900 0066 1360     		str	r3, [r2]
 3901 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3902              	.L237:
 3903              	.LBE186:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 121


2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3904              		.loc 1 2740 23 is_stmt 1
 3905 006c 3B4B     		ldr	r3, .L250+20
 3906 006e 1B68     		ldr	r3, [r3]
 3907              		.loc 1 2740 5
 3908 0070 3A69     		ldr	r2, [r7, #16]
 3909 0072 9A42     		cmp	r2, r3
 3910 0074 49D3     		bcc	.L240
 3911              	.L246:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3912              		.loc 1 2744 9
 3913 0076 364B     		ldr	r3, .L250+8
 3914 0078 1B68     		ldr	r3, [r3]
 3915 007a 1B68     		ldr	r3, [r3]
 3916              		.loc 1 2744 7
 3917 007c 002B     		cmp	r3, #0
 3918 007e 04D1     		bne	.L241
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3919              		.loc 1 2751 27
 3920 0080 364B     		ldr	r3, .L250+20
 3921 0082 4FF0FF32 		mov	r2, #-1
 3922 0086 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3923              		.loc 1 2752 6
 3924 0088 3FE0     		b	.L240
 3925              	.L241:
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3926              		.loc 1 2760 14
 3927 008a 314B     		ldr	r3, .L250+8
 3928 008c 1B68     		ldr	r3, [r3]
 3929 008e DB68     		ldr	r3, [r3, #12]
 3930              		.loc 1 2760 12
 3931 0090 DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 122


 3932 0092 BB60     		str	r3, [r7, #8]
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3933              		.loc 1 2761 17
 3934 0094 BB68     		ldr	r3, [r7, #8]
 3935 0096 5B68     		ldr	r3, [r3, #4]
 3936 0098 7B60     		str	r3, [r7, #4]
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 3937              		.loc 1 2763 8
 3938 009a 3A69     		ldr	r2, [r7, #16]
 3939 009c 7B68     		ldr	r3, [r7, #4]
 3940 009e 9A42     		cmp	r2, r3
 3941 00a0 03D2     		bcs	.L242
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3942              		.loc 1 2770 28
 3943 00a2 2E4A     		ldr	r2, .L250+20
 3944 00a4 7B68     		ldr	r3, [r7, #4]
 3945 00a6 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3946              		.loc 1 2771 7
 3947 00a8 2FE0     		b	.L240
 3948              	.L242:
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3949              		.loc 1 2779 15
 3950 00aa BB68     		ldr	r3, [r7, #8]
 3951 00ac 0433     		adds	r3, r3, #4
 3952 00ae 1846     		mov	r0, r3
 3953 00b0 FFF7FEFF 		bl	uxListRemove
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3954              		.loc 1 2783 10
 3955 00b4 BB68     		ldr	r3, [r7, #8]
 3956 00b6 9B6A     		ldr	r3, [r3, #40]
 3957              		.loc 1 2783 8
 3958 00b8 002B     		cmp	r3, #0
 3959 00ba 04D0     		beq	.L243
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3960              		.loc 1 2785 16
 3961 00bc BB68     		ldr	r3, [r7, #8]
 3962 00be 1833     		adds	r3, r3, #24
 3963 00c0 1846     		mov	r0, r3
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 123


 3964 00c2 FFF7FEFF 		bl	uxListRemove
 3965              	.L243:
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3966              		.loc 1 2794 6
 3967 00c6 BB68     		ldr	r3, [r7, #8]
 3968 00c8 DA6A     		ldr	r2, [r3, #44]
 3969 00ca 254B     		ldr	r3, .L250+24
 3970 00cc 1B68     		ldr	r3, [r3]
 3971 00ce 9A42     		cmp	r2, r3
 3972 00d0 03D9     		bls	.L244
 3973              		.loc 1 2794 6 is_stmt 0 discriminator 1
 3974 00d2 BB68     		ldr	r3, [r7, #8]
 3975 00d4 DB6A     		ldr	r3, [r3, #44]
 3976 00d6 224A     		ldr	r2, .L250+24
 3977 00d8 1360     		str	r3, [r2]
 3978              	.L244:
 3979              		.loc 1 2794 6 discriminator 3
 3980 00da BB68     		ldr	r3, [r7, #8]
 3981 00dc DA6A     		ldr	r2, [r3, #44]
 3982 00de 1346     		mov	r3, r2
 3983 00e0 9B00     		lsls	r3, r3, #2
 3984 00e2 1344     		add	r3, r3, r2
 3985 00e4 9B00     		lsls	r3, r3, #2
 3986 00e6 1F4A     		ldr	r2, .L250+28
 3987 00e8 1A44     		add	r2, r2, r3
 3988 00ea BB68     		ldr	r3, [r7, #8]
 3989 00ec 0433     		adds	r3, r3, #4
 3990 00ee 1946     		mov	r1, r3
 3991 00f0 1046     		mov	r0, r2
 3992 00f2 FFF7FEFF 		bl	vListInsertEnd
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3993              		.loc 1 2804 16 is_stmt 1
 3994 00f6 BB68     		ldr	r3, [r7, #8]
 3995 00f8 DA6A     		ldr	r2, [r3, #44]
 3996              		.loc 1 2804 44
 3997 00fa 1B4B     		ldr	r3, .L250+32
 3998 00fc 1B68     		ldr	r3, [r3]
 3999 00fe DB6A     		ldr	r3, [r3, #44]
 4000              		.loc 1 2804 9
 4001 0100 9A42     		cmp	r2, r3
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 124


 4002 0102 B8D3     		bcc	.L246
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 4003              		.loc 1 2806 24
 4004 0104 0123     		movs	r3, #1
 4005 0106 7B61     		str	r3, [r7, #20]
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4006              		.loc 1 2744 7
 4007 0108 B5E7     		b	.L246
 4008              	.L240:
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 4009              		.loc 1 2823 8
 4010 010a 174B     		ldr	r3, .L250+32
 4011 010c 1B68     		ldr	r3, [r3]
 4012 010e DA6A     		ldr	r2, [r3, #44]
 4013 0110 1449     		ldr	r1, .L250+28
 4014 0112 1346     		mov	r3, r2
 4015 0114 9B00     		lsls	r3, r3, #2
 4016 0116 1344     		add	r3, r3, r2
 4017 0118 9B00     		lsls	r3, r3, #2
 4018 011a 0B44     		add	r3, r3, r1
 4019 011c 1B68     		ldr	r3, [r3]
 4020              		.loc 1 2823 6
 4021 011e 012B     		cmp	r3, #1
 4022 0120 01D9     		bls	.L247
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 4023              		.loc 1 2825 21
 4024 0122 0123     		movs	r3, #1
 4025 0124 7B61     		str	r3, [r7, #20]
 4026              	.L247:
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 125


2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
 4027              		.loc 1 2851 22
 4028 0126 114B     		ldr	r3, .L250+36
 4029 0128 1B68     		ldr	r3, [r3]
 4030              		.loc 1 2851 6
 4031 012a 002B     		cmp	r3, #0
 4032 012c 07D0     		beq	.L248
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 4033              		.loc 1 2853 21
 4034 012e 0123     		movs	r3, #1
 4035 0130 7B61     		str	r3, [r7, #20]
 4036 0132 04E0     		b	.L248
 4037              	.L236:
 4038              	.LBE185:
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
 4039              		.loc 1 2864 3
 4040 0134 0E4B     		ldr	r3, .L250+40
 4041 0136 1B68     		ldr	r3, [r3]
 4042 0138 0133     		adds	r3, r3, #1
 4043 013a 0D4A     		ldr	r2, .L250+40
 4044 013c 1360     		str	r3, [r2]
 4045              	.L248:
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 126


2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 4046              		.loc 1 2875 9
 4047 013e 7B69     		ldr	r3, [r7, #20]
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4048              		.loc 1 2876 1
 4049 0140 1846     		mov	r0, r3
 4050 0142 1837     		adds	r7, r7, #24
 4051              	.LCFI141:
 4052              		.cfi_def_cfa_offset 8
 4053 0144 BD46     		mov	sp, r7
 4054              	.LCFI142:
 4055              		.cfi_def_cfa_register 13
 4056              		@ sp needed
 4057 0146 80BD     		pop	{r7, pc}
 4058              	.L251:
 4059              		.align	2
 4060              	.L250:
 4061 0148 00000000 		.word	uxSchedulerSuspended
 4062 014c 00000000 		.word	xTickCount
 4063 0150 00000000 		.word	pxDelayedTaskList
 4064 0154 00000000 		.word	pxOverflowDelayedTaskList
 4065 0158 00000000 		.word	xNumOfOverflows
 4066 015c 00000000 		.word	xNextTaskUnblockTime
 4067 0160 00000000 		.word	uxTopReadyPriority
 4068 0164 00000000 		.word	pxReadyTasksLists
 4069 0168 00000000 		.word	pxCurrentTCB
 4070 016c 00000000 		.word	xYieldPending
 4071 0170 00000000 		.word	xPendedTicks
 4072              		.cfi_endproc
 4073              	.LFE31:
 4075              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4076              		.align	1
 4077              		.global	vTaskSwitchContext
 4078              		.syntax unified
 4079              		.thumb
 4080              		.thumb_func
 4082              	vTaskSwitchContext:
 4083              	.LFB32:
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 127


2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 128


2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4084              		.loc 1 2990 1
 4085              		.cfi_startproc
 4086              		@ args = 0, pretend = 0, frame = 16
 4087              		@ frame_needed = 1, uses_anonymous_args = 0
 4088 0000 80B5     		push	{r7, lr}
 4089              	.LCFI143:
 4090              		.cfi_def_cfa_offset 8
 4091              		.cfi_offset 7, -8
 4092              		.cfi_offset 14, -4
 4093 0002 84B0     		sub	sp, sp, #16
 4094              	.LCFI144:
 4095              		.cfi_def_cfa_offset 24
 4096 0004 00AF     		add	r7, sp, #0
 4097              	.LCFI145:
 4098              		.cfi_def_cfa_register 7
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4099              		.loc 1 2991 27
 4100 0006 344B     		ldr	r3, .L262
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 129


 4101 0008 1B68     		ldr	r3, [r3]
 4102              		.loc 1 2991 4
 4103 000a 002B     		cmp	r3, #0
 4104 000c 03D0     		beq	.L253
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4105              		.loc 1 2995 17
 4106 000e 334B     		ldr	r3, .L262+4
 4107 0010 0122     		movs	r2, #1
 4108 0012 1A60     		str	r2, [r3]
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 130


3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4109              		.loc 1 3061 1
 4110 0014 5CE0     		b	.L261
 4111              	.L253:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4112              		.loc 1 2999 17
 4113 0016 314B     		ldr	r3, .L262+4
 4114 0018 0022     		movs	r2, #0
 4115 001a 1A60     		str	r2, [r3]
 4116              	.LBB189:
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 4117              		.loc 1 3007 22
 4118 001c FFF7FEFF 		bl	GET_RUN_TIME_COUNTER_VALUE
 4119 0020 0346     		mov	r3, r0
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 4120              		.loc 1 3007 22 is_stmt 0 discriminator 1
 4121 0022 1A46     		mov	r2, r3
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 4122              		.loc 1 3007 20 is_stmt 1 discriminator 1
 4123 0024 2E4B     		ldr	r3, .L262+8
 4124 0026 1A60     		str	r2, [r3]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4125              		.loc 1 3017 23
 4126 0028 2D4B     		ldr	r3, .L262+8
 4127 002a 1A68     		ldr	r2, [r3]
 4128 002c 2D4B     		ldr	r3, .L262+12
 4129 002e 1B68     		ldr	r3, [r3]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4130              		.loc 1 3017 6
 4131 0030 9A42     		cmp	r2, r3
 4132 0032 09D9     		bls	.L255
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4133              		.loc 1 3019 17
 4134 0034 2C4B     		ldr	r3, .L262+16
 4135 0036 1B68     		ldr	r3, [r3]
 4136 0038 996D     		ldr	r1, [r3, #88]
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 131


 4137              		.loc 1 3019 56
 4138 003a 294A     		ldr	r2, .L262+8
 4139 003c 1068     		ldr	r0, [r2]
 4140 003e 294A     		ldr	r2, .L262+12
 4141 0040 1268     		ldr	r2, [r2]
 4142 0042 821A     		subs	r2, r0, r2
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4143              		.loc 1 3019 36
 4144 0044 0A44     		add	r2, r2, r1
 4145 0046 9A65     		str	r2, [r3, #88]
 4146              	.L255:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4147              		.loc 1 3025 25
 4148 0048 254B     		ldr	r3, .L262+8
 4149 004a 1B68     		ldr	r3, [r3]
 4150 004c 254A     		ldr	r2, .L262+12
 4151 004e 1360     		str	r3, [r2]
 4152              	.LBE189:
 4153              	.LBB190:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4154              		.loc 1 3041 3
 4155 0050 264B     		ldr	r3, .L262+20
 4156 0052 1B68     		ldr	r3, [r3]
 4157 0054 FB60     		str	r3, [r7, #12]
 4158 0056 11E0     		b	.L256
 4159              	.L259:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4160              		.loc 1 3041 3 is_stmt 0 discriminator 5
 4161 0058 FB68     		ldr	r3, [r7, #12]
 4162 005a 002B     		cmp	r3, #0
 4163 005c 0BD1     		bne	.L257
 4164              	.LBB191:
 4165              	.LBB192:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4166              		.loc 2 195 2 is_stmt 1
 4167              		.syntax unified
 4168              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4169 005e 4FF05003 			mov r3, #80												
 4170 0062 83F31188 		msr basepri, r3											
 4171 0066 BFF36F8F 		isb														
 4172 006a BFF34F8F 		dsb														
 4173              	
 4174              	@ 0 "" 2
 4175              		.thumb
 4176              		.syntax unified
 4177 006e 7B60     		str	r3, [r7, #4]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4178              		.loc 2 203 1
 4179 0070 00BF     		nop
 4180              	.L258:
 4181              	.LBE192:
 4182              	.LBE191:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4183              		.loc 1 3041 3
 4184 0072 00BF     		nop
 4185 0074 FDE7     		b	.L258
 4186              	.L257:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 132


3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4187              		.loc 1 3041 3 is_stmt 0 discriminator 3
 4188 0076 FB68     		ldr	r3, [r7, #12]
 4189 0078 013B     		subs	r3, r3, #1
 4190 007a FB60     		str	r3, [r7, #12]
 4191              	.L256:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4192              		.loc 1 3041 3 discriminator 4
 4193 007c 1C49     		ldr	r1, .L262+24
 4194 007e FA68     		ldr	r2, [r7, #12]
 4195 0080 1346     		mov	r3, r2
 4196 0082 9B00     		lsls	r3, r3, #2
 4197 0084 1344     		add	r3, r3, r2
 4198 0086 9B00     		lsls	r3, r3, #2
 4199 0088 0B44     		add	r3, r3, r1
 4200 008a 1B68     		ldr	r3, [r3]
 4201 008c 002B     		cmp	r3, #0
 4202 008e E3D0     		beq	.L259
 4203              	.LBB193:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4204              		.loc 1 3041 3 discriminator 6
 4205 0090 FA68     		ldr	r2, [r7, #12]
 4206 0092 1346     		mov	r3, r2
 4207 0094 9B00     		lsls	r3, r3, #2
 4208 0096 1344     		add	r3, r3, r2
 4209 0098 9B00     		lsls	r3, r3, #2
 4210 009a 154A     		ldr	r2, .L262+24
 4211 009c 1344     		add	r3, r3, r2
 4212 009e BB60     		str	r3, [r7, #8]
 4213 00a0 BB68     		ldr	r3, [r7, #8]
 4214 00a2 5B68     		ldr	r3, [r3, #4]
 4215 00a4 5A68     		ldr	r2, [r3, #4]
 4216 00a6 BB68     		ldr	r3, [r7, #8]
 4217 00a8 5A60     		str	r2, [r3, #4]
 4218 00aa BB68     		ldr	r3, [r7, #8]
 4219 00ac 5A68     		ldr	r2, [r3, #4]
 4220 00ae BB68     		ldr	r3, [r7, #8]
 4221 00b0 0833     		adds	r3, r3, #8
 4222 00b2 9A42     		cmp	r2, r3
 4223 00b4 04D1     		bne	.L260
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4224              		.loc 1 3041 3 discriminator 7
 4225 00b6 BB68     		ldr	r3, [r7, #8]
 4226 00b8 5B68     		ldr	r3, [r3, #4]
 4227 00ba 5A68     		ldr	r2, [r3, #4]
 4228 00bc BB68     		ldr	r3, [r7, #8]
 4229 00be 5A60     		str	r2, [r3, #4]
 4230              	.L260:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4231              		.loc 1 3041 3 discriminator 9
 4232 00c0 BB68     		ldr	r3, [r7, #8]
 4233 00c2 5B68     		ldr	r3, [r3, #4]
 4234 00c4 DB68     		ldr	r3, [r3, #12]
 4235 00c6 084A     		ldr	r2, .L262+16
 4236 00c8 1360     		str	r3, [r2]
 4237              	.LBE193:
 4238 00ca 084A     		ldr	r2, .L262+20
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 133


 4239 00cc FB68     		ldr	r3, [r7, #12]
 4240 00ce 1360     		str	r3, [r2]
 4241              	.L261:
 4242              	.LBE190:
 4243              		.loc 1 3061 1 is_stmt 1
 4244 00d0 00BF     		nop
 4245 00d2 1037     		adds	r7, r7, #16
 4246              	.LCFI146:
 4247              		.cfi_def_cfa_offset 8
 4248 00d4 BD46     		mov	sp, r7
 4249              	.LCFI147:
 4250              		.cfi_def_cfa_register 13
 4251              		@ sp needed
 4252 00d6 80BD     		pop	{r7, pc}
 4253              	.L263:
 4254              		.align	2
 4255              	.L262:
 4256 00d8 00000000 		.word	uxSchedulerSuspended
 4257 00dc 00000000 		.word	xYieldPending
 4258 00e0 00000000 		.word	ulTotalRunTime
 4259 00e4 00000000 		.word	ulTaskSwitchedInTime
 4260 00e8 00000000 		.word	pxCurrentTCB
 4261 00ec 00000000 		.word	uxTopReadyPriority
 4262 00f0 00000000 		.word	pxReadyTasksLists
 4263              		.cfi_endproc
 4264              	.LFE32:
 4266              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4267              		.align	1
 4268              		.global	vTaskPlaceOnEventList
 4269              		.syntax unified
 4270              		.thumb
 4271              		.thumb_func
 4273              	vTaskPlaceOnEventList:
 4274              	.LFB33:
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4275              		.loc 1 3065 1
 4276              		.cfi_startproc
 4277              		@ args = 0, pretend = 0, frame = 16
 4278              		@ frame_needed = 1, uses_anonymous_args = 0
 4279 0000 80B5     		push	{r7, lr}
 4280              	.LCFI148:
 4281              		.cfi_def_cfa_offset 8
 4282              		.cfi_offset 7, -8
 4283              		.cfi_offset 14, -4
 4284 0002 84B0     		sub	sp, sp, #16
 4285              	.LCFI149:
 4286              		.cfi_def_cfa_offset 24
 4287 0004 00AF     		add	r7, sp, #0
 4288              	.LCFI150:
 4289              		.cfi_def_cfa_register 7
 4290 0006 7860     		str	r0, [r7, #4]
 4291 0008 3960     		str	r1, [r7]
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4292              		.loc 1 3066 2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 134


 4293 000a 7B68     		ldr	r3, [r7, #4]
 4294 000c 002B     		cmp	r3, #0
 4295 000e 0BD1     		bne	.L265
 4296              	.LBB194:
 4297              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4298              		.loc 2 195 2
 4299              		.syntax unified
 4300              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4301 0010 4FF05003 			mov r3, #80												
 4302 0014 83F31188 		msr basepri, r3											
 4303 0018 BFF36F8F 		isb														
 4304 001c BFF34F8F 		dsb														
 4305              	
 4306              	@ 0 "" 2
 4307              		.thumb
 4308              		.syntax unified
 4309 0020 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4310              		.loc 2 203 1
 4311 0022 00BF     		nop
 4312              	.L266:
 4313              	.LBE195:
 4314              	.LBE194:
 4315              		.loc 1 3066 2
 4316 0024 00BF     		nop
 4317 0026 FDE7     		b	.L266
 4318              	.L265:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4319              		.loc 1 3075 43
 4320 0028 074B     		ldr	r3, .L267
 4321 002a 1B68     		ldr	r3, [r3]
 4322              		.loc 1 3075 2
 4323 002c 1833     		adds	r3, r3, #24
 4324 002e 1946     		mov	r1, r3
 4325 0030 7868     		ldr	r0, [r7, #4]
 4326 0032 FFF7FEFF 		bl	vListInsert
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4327              		.loc 1 3077 2
 4328 0036 0121     		movs	r1, #1
 4329 0038 3868     		ldr	r0, [r7]
 4330 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4331              		.loc 1 3078 1
 4332 003e 00BF     		nop
 4333 0040 1037     		adds	r7, r7, #16
 4334              	.LCFI151:
 4335              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 135


 4336 0042 BD46     		mov	sp, r7
 4337              	.LCFI152:
 4338              		.cfi_def_cfa_register 13
 4339              		@ sp needed
 4340 0044 80BD     		pop	{r7, pc}
 4341              	.L268:
 4342 0046 00BF     		.align	2
 4343              	.L267:
 4344 0048 00000000 		.word	pxCurrentTCB
 4345              		.cfi_endproc
 4346              	.LFE33:
 4348              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4349              		.align	1
 4350              		.global	vTaskPlaceOnUnorderedEventList
 4351              		.syntax unified
 4352              		.thumb
 4353              		.thumb_func
 4355              	vTaskPlaceOnUnorderedEventList:
 4356              	.LFB34:
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4357              		.loc 1 3082 1
 4358              		.cfi_startproc
 4359              		@ args = 0, pretend = 0, frame = 24
 4360              		@ frame_needed = 1, uses_anonymous_args = 0
 4361 0000 80B5     		push	{r7, lr}
 4362              	.LCFI153:
 4363              		.cfi_def_cfa_offset 8
 4364              		.cfi_offset 7, -8
 4365              		.cfi_offset 14, -4
 4366 0002 86B0     		sub	sp, sp, #24
 4367              	.LCFI154:
 4368              		.cfi_def_cfa_offset 32
 4369 0004 00AF     		add	r7, sp, #0
 4370              	.LCFI155:
 4371              		.cfi_def_cfa_register 7
 4372 0006 F860     		str	r0, [r7, #12]
 4373 0008 B960     		str	r1, [r7, #8]
 4374 000a 7A60     		str	r2, [r7, #4]
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4375              		.loc 1 3083 2
 4376 000c FB68     		ldr	r3, [r7, #12]
 4377 000e 002B     		cmp	r3, #0
 4378 0010 0BD1     		bne	.L270
 4379              	.LBB196:
 4380              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4381              		.loc 2 195 2
 4382              		.syntax unified
 4383              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4384 0012 4FF05003 			mov r3, #80												
 4385 0016 83F31188 		msr basepri, r3											
 4386 001a BFF36F8F 		isb														
 4387 001e BFF34F8F 		dsb														
 4388              	
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 136


 4389              	@ 0 "" 2
 4390              		.thumb
 4391              		.syntax unified
 4392 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4393              		.loc 2 203 1
 4394 0024 00BF     		nop
 4395              	.L271:
 4396              	.LBE197:
 4397              	.LBE196:
 4398              		.loc 1 3083 2
 4399 0026 00BF     		nop
 4400 0028 FDE7     		b	.L271
 4401              	.L270:
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4402              		.loc 1 3087 2
 4403 002a 124B     		ldr	r3, .L274
 4404 002c 1B68     		ldr	r3, [r3]
 4405 002e 002B     		cmp	r3, #0
 4406 0030 0BD1     		bne	.L272
 4407              	.LBB198:
 4408              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4409              		.loc 2 195 2
 4410              		.syntax unified
 4411              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4412 0032 4FF05003 			mov r3, #80												
 4413 0036 83F31188 		msr basepri, r3											
 4414 003a BFF36F8F 		isb														
 4415 003e BFF34F8F 		dsb														
 4416              	
 4417              	@ 0 "" 2
 4418              		.thumb
 4419              		.syntax unified
 4420 0042 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4421              		.loc 2 203 1
 4422 0044 00BF     		nop
 4423              	.L273:
 4424              	.LBE199:
 4425              	.LBE198:
 4426              		.loc 1 3087 2
 4427 0046 00BF     		nop
 4428 0048 FDE7     		b	.L273
 4429              	.L272:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4430              		.loc 1 3092 2
 4431 004a 0B4B     		ldr	r3, .L274+4
 4432 004c 1B68     		ldr	r3, [r3]
 4433 004e BA68     		ldr	r2, [r7, #8]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 137


 4434 0050 42F00042 		orr	r2, r2, #-2147483648
 4435 0054 9A61     		str	r2, [r3, #24]
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4436              		.loc 1 3099 46
 4437 0056 084B     		ldr	r3, .L274+4
 4438 0058 1B68     		ldr	r3, [r3]
 4439              		.loc 1 3099 2
 4440 005a 1833     		adds	r3, r3, #24
 4441 005c 1946     		mov	r1, r3
 4442 005e F868     		ldr	r0, [r7, #12]
 4443 0060 FFF7FEFF 		bl	vListInsertEnd
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4444              		.loc 1 3101 2
 4445 0064 0121     		movs	r1, #1
 4446 0066 7868     		ldr	r0, [r7, #4]
 4447 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4448              		.loc 1 3102 1
 4449 006c 00BF     		nop
 4450 006e 1837     		adds	r7, r7, #24
 4451              	.LCFI156:
 4452              		.cfi_def_cfa_offset 8
 4453 0070 BD46     		mov	sp, r7
 4454              	.LCFI157:
 4455              		.cfi_def_cfa_register 13
 4456              		@ sp needed
 4457 0072 80BD     		pop	{r7, pc}
 4458              	.L275:
 4459              		.align	2
 4460              	.L274:
 4461 0074 00000000 		.word	uxSchedulerSuspended
 4462 0078 00000000 		.word	pxCurrentTCB
 4463              		.cfi_endproc
 4464              	.LFE34:
 4466              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4467              		.align	1
 4468              		.global	vTaskPlaceOnEventListRestricted
 4469              		.syntax unified
 4470              		.thumb
 4471              		.thumb_func
 4473              	vTaskPlaceOnEventListRestricted:
 4474              	.LFB35:
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4475              		.loc 1 3108 2
 4476              		.cfi_startproc
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 138


 4477              		@ args = 0, pretend = 0, frame = 24
 4478              		@ frame_needed = 1, uses_anonymous_args = 0
 4479 0000 80B5     		push	{r7, lr}
 4480              	.LCFI158:
 4481              		.cfi_def_cfa_offset 8
 4482              		.cfi_offset 7, -8
 4483              		.cfi_offset 14, -4
 4484 0002 86B0     		sub	sp, sp, #24
 4485              	.LCFI159:
 4486              		.cfi_def_cfa_offset 32
 4487 0004 00AF     		add	r7, sp, #0
 4488              	.LCFI160:
 4489              		.cfi_def_cfa_register 7
 4490 0006 F860     		str	r0, [r7, #12]
 4491 0008 B960     		str	r1, [r7, #8]
 4492 000a 7A60     		str	r2, [r7, #4]
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4493              		.loc 1 3109 3
 4494 000c FB68     		ldr	r3, [r7, #12]
 4495 000e 002B     		cmp	r3, #0
 4496 0010 0BD1     		bne	.L277
 4497              	.LBB200:
 4498              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4499              		.loc 2 195 2
 4500              		.syntax unified
 4501              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4502 0012 4FF05003 			mov r3, #80												
 4503 0016 83F31188 		msr basepri, r3											
 4504 001a BFF36F8F 		isb														
 4505 001e BFF34F8F 		dsb														
 4506              	
 4507              	@ 0 "" 2
 4508              		.thumb
 4509              		.syntax unified
 4510 0022 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4511              		.loc 2 203 1
 4512 0024 00BF     		nop
 4513              	.L278:
 4514              	.LBE201:
 4515              	.LBE200:
 4516              		.loc 1 3109 3
 4517 0026 00BF     		nop
 4518 0028 FDE7     		b	.L278
 4519              	.L277:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 139


3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4520              		.loc 1 3121 47
 4521 002a 0A4B     		ldr	r3, .L280
 4522 002c 1B68     		ldr	r3, [r3]
 4523              		.loc 1 3121 3
 4524 002e 1833     		adds	r3, r3, #24
 4525 0030 1946     		mov	r1, r3
 4526 0032 F868     		ldr	r0, [r7, #12]
 4527 0034 FFF7FEFF 		bl	vListInsertEnd
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4528              		.loc 1 3126 5
 4529 0038 7B68     		ldr	r3, [r7, #4]
 4530 003a 002B     		cmp	r3, #0
 4531 003c 02D0     		beq	.L279
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4532              		.loc 1 3128 17
 4533 003e 4FF0FF33 		mov	r3, #-1
 4534 0042 BB60     		str	r3, [r7, #8]
 4535              	.L279:
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4536              		.loc 1 3132 3
 4537 0044 7968     		ldr	r1, [r7, #4]
 4538 0046 B868     		ldr	r0, [r7, #8]
 4539 0048 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4540              		.loc 1 3133 2
 4541 004c 00BF     		nop
 4542 004e 1837     		adds	r7, r7, #24
 4543              	.LCFI161:
 4544              		.cfi_def_cfa_offset 8
 4545 0050 BD46     		mov	sp, r7
 4546              	.LCFI162:
 4547              		.cfi_def_cfa_register 13
 4548              		@ sp needed
 4549 0052 80BD     		pop	{r7, pc}
 4550              	.L281:
 4551              		.align	2
 4552              	.L280:
 4553 0054 00000000 		.word	pxCurrentTCB
 4554              		.cfi_endproc
 4555              	.LFE35:
 4557              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4558              		.align	1
 4559              		.global	xTaskRemoveFromEventList
 4560              		.syntax unified
 4561              		.thumb
 4562              		.thumb_func
 4564              	xTaskRemoveFromEventList:
 4565              	.LFB36:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 140


3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4566              		.loc 1 3139 1
 4567              		.cfi_startproc
 4568              		@ args = 0, pretend = 0, frame = 24
 4569              		@ frame_needed = 1, uses_anonymous_args = 0
 4570 0000 80B5     		push	{r7, lr}
 4571              	.LCFI163:
 4572              		.cfi_def_cfa_offset 8
 4573              		.cfi_offset 7, -8
 4574              		.cfi_offset 14, -4
 4575 0002 86B0     		sub	sp, sp, #24
 4576              	.LCFI164:
 4577              		.cfi_def_cfa_offset 32
 4578 0004 00AF     		add	r7, sp, #0
 4579              	.LCFI165:
 4580              		.cfi_def_cfa_register 7
 4581 0006 7860     		str	r0, [r7, #4]
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4582              		.loc 1 3156 19
 4583 0008 7B68     		ldr	r3, [r7, #4]
 4584 000a DB68     		ldr	r3, [r3, #12]
 4585              		.loc 1 3156 17
 4586 000c DB68     		ldr	r3, [r3, #12]
 4587 000e 3B61     		str	r3, [r7, #16]
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4588              		.loc 1 3157 2
 4589 0010 3B69     		ldr	r3, [r7, #16]
 4590 0012 002B     		cmp	r3, #0
 4591 0014 0BD1     		bne	.L283
 4592              	.LBB202:
 4593              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4594              		.loc 2 195 2
 4595              		.syntax unified
 4596              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4597 0016 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 141


 4598 001a 83F31188 		msr basepri, r3											
 4599 001e BFF36F8F 		isb														
 4600 0022 BFF34F8F 		dsb														
 4601              	
 4602              	@ 0 "" 2
 4603              		.thumb
 4604              		.syntax unified
 4605 0026 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4606              		.loc 2 203 1
 4607 0028 00BF     		nop
 4608              	.L284:
 4609              	.LBE203:
 4610              	.LBE202:
 4611              		.loc 1 3157 2
 4612 002a 00BF     		nop
 4613 002c FDE7     		b	.L284
 4614              	.L283:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4615              		.loc 1 3158 11
 4616 002e 3B69     		ldr	r3, [r7, #16]
 4617 0030 1833     		adds	r3, r3, #24
 4618 0032 1846     		mov	r0, r3
 4619 0034 FFF7FEFF 		bl	uxListRemove
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4620              		.loc 1 3160 27
 4621 0038 1E4B     		ldr	r3, .L291
 4622 003a 1B68     		ldr	r3, [r3]
 4623              		.loc 1 3160 4
 4624 003c 002B     		cmp	r3, #0
 4625 003e 1FD1     		bne	.L285
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4626              		.loc 1 3162 12
 4627 0040 3B69     		ldr	r3, [r7, #16]
 4628 0042 0433     		adds	r3, r3, #4
 4629 0044 1846     		mov	r0, r3
 4630 0046 FFF7FEFF 		bl	uxListRemove
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4631              		.loc 1 3163 3
 4632 004a 3B69     		ldr	r3, [r7, #16]
 4633 004c DA6A     		ldr	r2, [r3, #44]
 4634 004e 1A4B     		ldr	r3, .L291+4
 4635 0050 1B68     		ldr	r3, [r3]
 4636 0052 9A42     		cmp	r2, r3
 4637 0054 03D9     		bls	.L286
 4638              		.loc 1 3163 3 is_stmt 0 discriminator 1
 4639 0056 3B69     		ldr	r3, [r7, #16]
 4640 0058 DB6A     		ldr	r3, [r3, #44]
 4641 005a 174A     		ldr	r2, .L291+4
 4642 005c 1360     		str	r3, [r2]
 4643              	.L286:
 4644              		.loc 1 3163 3 discriminator 3
 4645 005e 3B69     		ldr	r3, [r7, #16]
 4646 0060 DA6A     		ldr	r2, [r3, #44]
 4647 0062 1346     		mov	r3, r2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 142


 4648 0064 9B00     		lsls	r3, r3, #2
 4649 0066 1344     		add	r3, r3, r2
 4650 0068 9B00     		lsls	r3, r3, #2
 4651 006a 144A     		ldr	r2, .L291+8
 4652 006c 1A44     		add	r2, r2, r3
 4653 006e 3B69     		ldr	r3, [r7, #16]
 4654 0070 0433     		adds	r3, r3, #4
 4655 0072 1946     		mov	r1, r3
 4656 0074 1046     		mov	r0, r2
 4657 0076 FFF7FEFF 		bl	vListInsertEnd
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
 4658              		.loc 1 3175 4 is_stmt 1
 4659 007a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 4660 007e 05E0     		b	.L287
 4661              	.L285:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4662              		.loc 1 3183 3
 4663 0080 3B69     		ldr	r3, [r7, #16]
 4664 0082 1833     		adds	r3, r3, #24
 4665 0084 1946     		mov	r1, r3
 4666 0086 0E48     		ldr	r0, .L291+12
 4667 0088 FFF7FEFF 		bl	vListInsertEnd
 4668              	.L287:
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4669              		.loc 1 3186 20
 4670 008c 3B69     		ldr	r3, [r7, #16]
 4671 008e DA6A     		ldr	r2, [r3, #44]
 4672              		.loc 1 3186 47
 4673 0090 0C4B     		ldr	r3, .L291+16
 4674 0092 1B68     		ldr	r3, [r3]
 4675 0094 DB6A     		ldr	r3, [r3, #44]
 4676              		.loc 1 3186 4
 4677 0096 9A42     		cmp	r2, r3
 4678 0098 05D9     		bls	.L288
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 143


3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4679              		.loc 1 3191 11
 4680 009a 0123     		movs	r3, #1
 4681 009c 7B61     		str	r3, [r7, #20]
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4682              		.loc 1 3195 17
 4683 009e 0A4B     		ldr	r3, .L291+20
 4684 00a0 0122     		movs	r2, #1
 4685 00a2 1A60     		str	r2, [r3]
 4686 00a4 01E0     		b	.L289
 4687              	.L288:
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4688              		.loc 1 3199 11
 4689 00a6 0023     		movs	r3, #0
 4690 00a8 7B61     		str	r3, [r7, #20]
 4691              	.L289:
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4692              		.loc 1 3202 9
 4693 00aa 7B69     		ldr	r3, [r7, #20]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4694              		.loc 1 3203 1
 4695 00ac 1846     		mov	r0, r3
 4696 00ae 1837     		adds	r7, r7, #24
 4697              	.LCFI166:
 4698              		.cfi_def_cfa_offset 8
 4699 00b0 BD46     		mov	sp, r7
 4700              	.LCFI167:
 4701              		.cfi_def_cfa_register 13
 4702              		@ sp needed
 4703 00b2 80BD     		pop	{r7, pc}
 4704              	.L292:
 4705              		.align	2
 4706              	.L291:
 4707 00b4 00000000 		.word	uxSchedulerSuspended
 4708 00b8 00000000 		.word	uxTopReadyPriority
 4709 00bc 00000000 		.word	pxReadyTasksLists
 4710 00c0 00000000 		.word	xPendingReadyList
 4711 00c4 00000000 		.word	pxCurrentTCB
 4712 00c8 00000000 		.word	xYieldPending
 4713              		.cfi_endproc
 4714              	.LFE36:
 4716              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4717              		.align	1
 4718              		.global	vTaskRemoveFromUnorderedEventList
 4719              		.syntax unified
 4720              		.thumb
 4721              		.thumb_func
 4723              	vTaskRemoveFromUnorderedEventList:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 144


 4724              	.LFB37:
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4725              		.loc 1 3207 1
 4726              		.cfi_startproc
 4727              		@ args = 0, pretend = 0, frame = 24
 4728              		@ frame_needed = 1, uses_anonymous_args = 0
 4729 0000 80B5     		push	{r7, lr}
 4730              	.LCFI168:
 4731              		.cfi_def_cfa_offset 8
 4732              		.cfi_offset 7, -8
 4733              		.cfi_offset 14, -4
 4734 0002 86B0     		sub	sp, sp, #24
 4735              	.LCFI169:
 4736              		.cfi_def_cfa_offset 32
 4737 0004 00AF     		add	r7, sp, #0
 4738              	.LCFI170:
 4739              		.cfi_def_cfa_register 7
 4740 0006 7860     		str	r0, [r7, #4]
 4741 0008 3960     		str	r1, [r7]
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 4742              		.loc 1 3212 2
 4743 000a 2B4B     		ldr	r3, .L301
 4744 000c 1B68     		ldr	r3, [r3]
 4745 000e 002B     		cmp	r3, #0
 4746 0010 0BD1     		bne	.L294
 4747              	.LBB204:
 4748              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4749              		.loc 2 195 2
 4750              		.syntax unified
 4751              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4752 0012 4FF05003 			mov r3, #80												
 4753 0016 83F31188 		msr basepri, r3											
 4754 001a BFF36F8F 		isb														
 4755 001e BFF34F8F 		dsb														
 4756              	
 4757              	@ 0 "" 2
 4758              		.thumb
 4759              		.syntax unified
 4760 0022 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4761              		.loc 2 203 1
 4762 0024 00BF     		nop
 4763              	.L295:
 4764              	.LBE205:
 4765              	.LBE204:
 4766              		.loc 1 3212 2
 4767 0026 00BF     		nop
 4768 0028 FDE7     		b	.L295
 4769              	.L294:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 145


3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 4770              		.loc 1 3215 2
 4771 002a 3B68     		ldr	r3, [r7]
 4772 002c 43F00042 		orr	r2, r3, #-2147483648
 4773 0030 7B68     		ldr	r3, [r7, #4]
 4774 0032 1A60     		str	r2, [r3]
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 4775              		.loc 1 3219 17
 4776 0034 7B68     		ldr	r3, [r7, #4]
 4777 0036 DB68     		ldr	r3, [r3, #12]
 4778 0038 7B61     		str	r3, [r7, #20]
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4779              		.loc 1 3220 2
 4780 003a 7B69     		ldr	r3, [r7, #20]
 4781 003c 002B     		cmp	r3, #0
 4782 003e 0BD1     		bne	.L296
 4783              	.LBB206:
 4784              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4785              		.loc 2 195 2
 4786              		.syntax unified
 4787              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4788 0040 4FF05003 			mov r3, #80												
 4789 0044 83F31188 		msr basepri, r3											
 4790 0048 BFF36F8F 		isb														
 4791 004c BFF34F8F 		dsb														
 4792              	
 4793              	@ 0 "" 2
 4794              		.thumb
 4795              		.syntax unified
 4796 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4797              		.loc 2 203 1
 4798 0052 00BF     		nop
 4799              	.L297:
 4800              	.LBE207:
 4801              	.LBE206:
 4802              		.loc 1 3220 2
 4803 0054 00BF     		nop
 4804 0056 FDE7     		b	.L297
 4805              	.L296:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4806              		.loc 1 3221 11
 4807 0058 7868     		ldr	r0, [r7, #4]
 4808 005a FFF7FEFF 		bl	uxListRemove
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 146


3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
 4809              		.loc 1 3233 3
 4810 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4811              		.loc 1 3240 11
 4812 0062 7B69     		ldr	r3, [r7, #20]
 4813 0064 0433     		adds	r3, r3, #4
 4814 0066 1846     		mov	r0, r3
 4815 0068 FFF7FEFF 		bl	uxListRemove
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4816              		.loc 1 3241 2
 4817 006c 7B69     		ldr	r3, [r7, #20]
 4818 006e DA6A     		ldr	r2, [r3, #44]
 4819 0070 124B     		ldr	r3, .L301+4
 4820 0072 1B68     		ldr	r3, [r3]
 4821 0074 9A42     		cmp	r2, r3
 4822 0076 03D9     		bls	.L298
 4823              		.loc 1 3241 2 is_stmt 0 discriminator 1
 4824 0078 7B69     		ldr	r3, [r7, #20]
 4825 007a DB6A     		ldr	r3, [r3, #44]
 4826 007c 0F4A     		ldr	r2, .L301+4
 4827 007e 1360     		str	r3, [r2]
 4828              	.L298:
 4829              		.loc 1 3241 2 discriminator 3
 4830 0080 7B69     		ldr	r3, [r7, #20]
 4831 0082 DA6A     		ldr	r2, [r3, #44]
 4832 0084 1346     		mov	r3, r2
 4833 0086 9B00     		lsls	r3, r3, #2
 4834 0088 1344     		add	r3, r3, r2
 4835 008a 9B00     		lsls	r3, r3, #2
 4836 008c 0C4A     		ldr	r2, .L301+8
 4837 008e 1A44     		add	r2, r2, r3
 4838 0090 7B69     		ldr	r3, [r7, #20]
 4839 0092 0433     		adds	r3, r3, #4
 4840 0094 1946     		mov	r1, r3
 4841 0096 1046     		mov	r0, r2
 4842 0098 FFF7FEFF 		bl	vListInsertEnd
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4843              		.loc 1 3243 20 is_stmt 1
 4844 009c 7B69     		ldr	r3, [r7, #20]
 4845 009e DA6A     		ldr	r2, [r3, #44]
 4846              		.loc 1 3243 47
 4847 00a0 084B     		ldr	r3, .L301+12
 4848 00a2 1B68     		ldr	r3, [r3]
 4849 00a4 DB6A     		ldr	r3, [r3, #44]
 4850              		.loc 1 3243 4
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 147


 4851 00a6 9A42     		cmp	r2, r3
 4852 00a8 02D9     		bls	.L300
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4853              		.loc 1 3249 17
 4854 00aa 074B     		ldr	r3, .L301+16
 4855 00ac 0122     		movs	r2, #1
 4856 00ae 1A60     		str	r2, [r3]
 4857              	.L300:
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4858              		.loc 1 3251 1
 4859 00b0 00BF     		nop
 4860 00b2 1837     		adds	r7, r7, #24
 4861              	.LCFI171:
 4862              		.cfi_def_cfa_offset 8
 4863 00b4 BD46     		mov	sp, r7
 4864              	.LCFI172:
 4865              		.cfi_def_cfa_register 13
 4866              		@ sp needed
 4867 00b6 80BD     		pop	{r7, pc}
 4868              	.L302:
 4869              		.align	2
 4870              	.L301:
 4871 00b8 00000000 		.word	uxSchedulerSuspended
 4872 00bc 00000000 		.word	uxTopReadyPriority
 4873 00c0 00000000 		.word	pxReadyTasksLists
 4874 00c4 00000000 		.word	pxCurrentTCB
 4875 00c8 00000000 		.word	xYieldPending
 4876              		.cfi_endproc
 4877              	.LFE37:
 4879              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4880              		.align	1
 4881              		.global	vTaskSetTimeOutState
 4882              		.syntax unified
 4883              		.thumb
 4884              		.thumb_func
 4886              	vTaskSetTimeOutState:
 4887              	.LFB38:
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4888              		.loc 1 3255 1
 4889              		.cfi_startproc
 4890              		@ args = 0, pretend = 0, frame = 16
 4891              		@ frame_needed = 1, uses_anonymous_args = 0
 4892 0000 80B5     		push	{r7, lr}
 4893              	.LCFI173:
 4894              		.cfi_def_cfa_offset 8
 4895              		.cfi_offset 7, -8
 4896              		.cfi_offset 14, -4
 4897 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 148


 4898              	.LCFI174:
 4899              		.cfi_def_cfa_offset 24
 4900 0004 00AF     		add	r7, sp, #0
 4901              	.LCFI175:
 4902              		.cfi_def_cfa_register 7
 4903 0006 7860     		str	r0, [r7, #4]
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4904              		.loc 1 3256 2
 4905 0008 7B68     		ldr	r3, [r7, #4]
 4906 000a 002B     		cmp	r3, #0
 4907 000c 0BD1     		bne	.L304
 4908              	.LBB208:
 4909              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4910              		.loc 2 195 2
 4911              		.syntax unified
 4912              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4913 000e 4FF05003 			mov r3, #80												
 4914 0012 83F31188 		msr basepri, r3											
 4915 0016 BFF36F8F 		isb														
 4916 001a BFF34F8F 		dsb														
 4917              	
 4918              	@ 0 "" 2
 4919              		.thumb
 4920              		.syntax unified
 4921 001e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4922              		.loc 2 203 1
 4923 0020 00BF     		nop
 4924              	.L305:
 4925              	.LBE209:
 4926              	.LBE208:
 4927              		.loc 1 3256 2
 4928 0022 00BF     		nop
 4929 0024 FDE7     		b	.L305
 4930              	.L304:
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4931              		.loc 1 3257 2
 4932 0026 FFF7FEFF 		bl	vPortEnterCritical
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 4933              		.loc 1 3259 29
 4934 002a 074B     		ldr	r3, .L306
 4935 002c 1A68     		ldr	r2, [r3]
 4936 002e 7B68     		ldr	r3, [r7, #4]
 4937 0030 1A60     		str	r2, [r3]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4938              		.loc 1 3260 30
 4939 0032 064B     		ldr	r3, .L306+4
 4940 0034 1A68     		ldr	r2, [r3]
 4941 0036 7B68     		ldr	r3, [r7, #4]
 4942 0038 5A60     		str	r2, [r3, #4]
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 4943              		.loc 1 3262 2
 4944 003a FFF7FEFF 		bl	vPortExitCritical
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 149


 4945              		.loc 1 3263 1
 4946 003e 00BF     		nop
 4947 0040 1037     		adds	r7, r7, #16
 4948              	.LCFI176:
 4949              		.cfi_def_cfa_offset 8
 4950 0042 BD46     		mov	sp, r7
 4951              	.LCFI177:
 4952              		.cfi_def_cfa_register 13
 4953              		@ sp needed
 4954 0044 80BD     		pop	{r7, pc}
 4955              	.L307:
 4956 0046 00BF     		.align	2
 4957              	.L306:
 4958 0048 00000000 		.word	xNumOfOverflows
 4959 004c 00000000 		.word	xTickCount
 4960              		.cfi_endproc
 4961              	.LFE38:
 4963              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4964              		.align	1
 4965              		.global	vTaskInternalSetTimeOutState
 4966              		.syntax unified
 4967              		.thumb
 4968              		.thumb_func
 4970              	vTaskInternalSetTimeOutState:
 4971              	.LFB39:
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4972              		.loc 1 3267 1
 4973              		.cfi_startproc
 4974              		@ args = 0, pretend = 0, frame = 8
 4975              		@ frame_needed = 1, uses_anonymous_args = 0
 4976              		@ link register save eliminated.
 4977 0000 80B4     		push	{r7}
 4978              	.LCFI178:
 4979              		.cfi_def_cfa_offset 4
 4980              		.cfi_offset 7, -4
 4981 0002 83B0     		sub	sp, sp, #12
 4982              	.LCFI179:
 4983              		.cfi_def_cfa_offset 16
 4984 0004 00AF     		add	r7, sp, #0
 4985              	.LCFI180:
 4986              		.cfi_def_cfa_register 7
 4987 0006 7860     		str	r0, [r7, #4]
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4988              		.loc 1 3269 28
 4989 0008 064B     		ldr	r3, .L309
 4990 000a 1A68     		ldr	r2, [r3]
 4991 000c 7B68     		ldr	r3, [r7, #4]
 4992 000e 1A60     		str	r2, [r3]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4993              		.loc 1 3270 29
 4994 0010 054B     		ldr	r3, .L309+4
 4995 0012 1A68     		ldr	r2, [r3]
 4996 0014 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 150


 4997 0016 5A60     		str	r2, [r3, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4998              		.loc 1 3271 1
 4999 0018 00BF     		nop
 5000 001a 0C37     		adds	r7, r7, #12
 5001              	.LCFI181:
 5002              		.cfi_def_cfa_offset 4
 5003 001c BD46     		mov	sp, r7
 5004              	.LCFI182:
 5005              		.cfi_def_cfa_register 13
 5006              		@ sp needed
 5007 001e 5DF8047B 		ldr	r7, [sp], #4
 5008              	.LCFI183:
 5009              		.cfi_restore 7
 5010              		.cfi_def_cfa_offset 0
 5011 0022 7047     		bx	lr
 5012              	.L310:
 5013              		.align	2
 5014              	.L309:
 5015 0024 00000000 		.word	xNumOfOverflows
 5016 0028 00000000 		.word	xTickCount
 5017              		.cfi_endproc
 5018              	.LFE39:
 5020              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5021              		.align	1
 5022              		.global	xTaskCheckForTimeOut
 5023              		.syntax unified
 5024              		.thumb
 5025              		.thumb_func
 5027              	xTaskCheckForTimeOut:
 5028              	.LFB40:
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5029              		.loc 1 3275 1
 5030              		.cfi_startproc
 5031              		@ args = 0, pretend = 0, frame = 32
 5032              		@ frame_needed = 1, uses_anonymous_args = 0
 5033 0000 80B5     		push	{r7, lr}
 5034              	.LCFI184:
 5035              		.cfi_def_cfa_offset 8
 5036              		.cfi_offset 7, -8
 5037              		.cfi_offset 14, -4
 5038 0002 88B0     		sub	sp, sp, #32
 5039              	.LCFI185:
 5040              		.cfi_def_cfa_offset 40
 5041 0004 00AF     		add	r7, sp, #0
 5042              	.LCFI186:
 5043              		.cfi_def_cfa_register 7
 5044 0006 7860     		str	r0, [r7, #4]
 5045 0008 3960     		str	r1, [r7]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 5046              		.loc 1 3278 2
 5047 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 151


 5048 000c 002B     		cmp	r3, #0
 5049 000e 0BD1     		bne	.L312
 5050              	.LBB210:
 5051              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5052              		.loc 2 195 2
 5053              		.syntax unified
 5054              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5055 0010 4FF05003 			mov r3, #80												
 5056 0014 83F31188 		msr basepri, r3											
 5057 0018 BFF36F8F 		isb														
 5058 001c BFF34F8F 		dsb														
 5059              	
 5060              	@ 0 "" 2
 5061              		.thumb
 5062              		.syntax unified
 5063 0020 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5064              		.loc 2 203 1
 5065 0022 00BF     		nop
 5066              	.L313:
 5067              	.LBE211:
 5068              	.LBE210:
 5069              		.loc 1 3278 2
 5070 0024 00BF     		nop
 5071 0026 FDE7     		b	.L313
 5072              	.L312:
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5073              		.loc 1 3279 2
 5074 0028 3B68     		ldr	r3, [r7]
 5075 002a 002B     		cmp	r3, #0
 5076 002c 0BD1     		bne	.L314
 5077              	.LBB212:
 5078              	.LBB213:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5079              		.loc 2 195 2
 5080              		.syntax unified
 5081              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5082 002e 4FF05003 			mov r3, #80												
 5083 0032 83F31188 		msr basepri, r3											
 5084 0036 BFF36F8F 		isb														
 5085 003a BFF34F8F 		dsb														
 5086              	
 5087              	@ 0 "" 2
 5088              		.thumb
 5089              		.syntax unified
 5090 003e FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5091              		.loc 2 203 1
 5092 0040 00BF     		nop
 5093              	.L315:
 5094              	.LBE213:
 5095              	.LBE212:
 5096              		.loc 1 3279 2
 5097 0042 00BF     		nop
 5098 0044 FDE7     		b	.L315
 5099              	.L314:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 152


3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5100              		.loc 1 3281 2
 5101 0046 FFF7FEFF 		bl	vPortEnterCritical
 5102              	.LBB214:
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 5103              		.loc 1 3284 20
 5104 004a 1D4B     		ldr	r3, .L321
 5105 004c 1B68     		ldr	r3, [r3]
 5106 004e BB61     		str	r3, [r7, #24]
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5107              		.loc 1 3285 62
 5108 0050 7B68     		ldr	r3, [r7, #4]
 5109 0052 5B68     		ldr	r3, [r3, #4]
 5110              		.loc 1 3285 20
 5111 0054 BA69     		ldr	r2, [r7, #24]
 5112 0056 D31A     		subs	r3, r2, r3
 5113 0058 7B61     		str	r3, [r7, #20]
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 5114              		.loc 1 3299 8
 5115 005a 3B68     		ldr	r3, [r7]
 5116 005c 1B68     		ldr	r3, [r3]
 5117              		.loc 1 3299 6
 5118 005e B3F1FF3F 		cmp	r3, #-1
 5119 0062 02D1     		bne	.L316
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5120              		.loc 1 3304 13
 5121 0064 0023     		movs	r3, #0
 5122 0066 FB61     		str	r3, [r7, #28]
 5123 0068 23E0     		b	.L317
 5124              	.L316:
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 5125              		.loc 1 3309 37
 5126 006a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 153


 5127 006c 1A68     		ldr	r2, [r3]
 5128              		.loc 1 3309 25
 5129 006e 154B     		ldr	r3, .L321+4
 5130 0070 1B68     		ldr	r3, [r3]
 5131              		.loc 1 3309 5
 5132 0072 9A42     		cmp	r2, r3
 5133 0074 07D0     		beq	.L318
 5134              		.loc 1 3309 89 discriminator 1
 5135 0076 7B68     		ldr	r3, [r7, #4]
 5136 0078 5B68     		ldr	r3, [r3, #4]
 5137              		.loc 1 3309 56 discriminator 1
 5138 007a BA69     		ldr	r2, [r7, #24]
 5139 007c 9A42     		cmp	r2, r3
 5140 007e 02D3     		bcc	.L318
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5141              		.loc 1 3316 12
 5142 0080 0123     		movs	r3, #1
 5143 0082 FB61     		str	r3, [r7, #28]
 5144 0084 15E0     		b	.L317
 5145              	.L318:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 5146              		.loc 1 3318 27
 5147 0086 3B68     		ldr	r3, [r7]
 5148 0088 1B68     		ldr	r3, [r3]
 5149              		.loc 1 3318 10
 5150 008a 7A69     		ldr	r2, [r7, #20]
 5151 008c 9A42     		cmp	r2, r3
 5152 008e 0BD2     		bcs	.L319
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 5153              		.loc 1 3321 4
 5154 0090 3B68     		ldr	r3, [r7]
 5155 0092 1A68     		ldr	r2, [r3]
 5156              		.loc 1 3321 19
 5157 0094 7B69     		ldr	r3, [r7, #20]
 5158 0096 D21A     		subs	r2, r2, r3
 5159 0098 3B68     		ldr	r3, [r7]
 5160 009a 1A60     		str	r2, [r3]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 5161              		.loc 1 3322 4
 5162 009c 7868     		ldr	r0, [r7, #4]
 5163 009e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 5164              		.loc 1 3323 12
 5165 00a2 0023     		movs	r3, #0
 5166 00a4 FB61     		str	r3, [r7, #28]
 5167 00a6 04E0     		b	.L317
 5168              	.L319:
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 154


3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 5169              		.loc 1 3327 19
 5170 00a8 3B68     		ldr	r3, [r7]
 5171 00aa 0022     		movs	r2, #0
 5172 00ac 1A60     		str	r2, [r3]
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5173              		.loc 1 3328 12
 5174 00ae 0123     		movs	r3, #1
 5175 00b0 FB61     		str	r3, [r7, #28]
 5176              	.L317:
 5177              	.LBE214:
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 5178              		.loc 1 3331 2
 5179 00b2 FFF7FEFF 		bl	vPortExitCritical
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 5180              		.loc 1 3333 9
 5181 00b6 FB69     		ldr	r3, [r7, #28]
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5182              		.loc 1 3334 1
 5183 00b8 1846     		mov	r0, r3
 5184 00ba 2037     		adds	r7, r7, #32
 5185              	.LCFI187:
 5186              		.cfi_def_cfa_offset 8
 5187 00bc BD46     		mov	sp, r7
 5188              	.LCFI188:
 5189              		.cfi_def_cfa_register 13
 5190              		@ sp needed
 5191 00be 80BD     		pop	{r7, pc}
 5192              	.L322:
 5193              		.align	2
 5194              	.L321:
 5195 00c0 00000000 		.word	xTickCount
 5196 00c4 00000000 		.word	xNumOfOverflows
 5197              		.cfi_endproc
 5198              	.LFE40:
 5200              		.section	.text.vTaskMissedYield,"ax",%progbits
 5201              		.align	1
 5202              		.global	vTaskMissedYield
 5203              		.syntax unified
 5204              		.thumb
 5205              		.thumb_func
 5207              	vTaskMissedYield:
 5208              	.LFB41:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5209              		.loc 1 3338 1
 5210              		.cfi_startproc
 5211              		@ args = 0, pretend = 0, frame = 0
 5212              		@ frame_needed = 1, uses_anonymous_args = 0
 5213              		@ link register save eliminated.
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 155


 5214 0000 80B4     		push	{r7}
 5215              	.LCFI189:
 5216              		.cfi_def_cfa_offset 4
 5217              		.cfi_offset 7, -4
 5218 0002 00AF     		add	r7, sp, #0
 5219              	.LCFI190:
 5220              		.cfi_def_cfa_register 7
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 5221              		.loc 1 3339 16
 5222 0004 034B     		ldr	r3, .L324
 5223 0006 0122     		movs	r2, #1
 5224 0008 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5225              		.loc 1 3340 1
 5226 000a 00BF     		nop
 5227 000c BD46     		mov	sp, r7
 5228              	.LCFI191:
 5229              		.cfi_def_cfa_register 13
 5230              		@ sp needed
 5231 000e 5DF8047B 		ldr	r7, [sp], #4
 5232              	.LCFI192:
 5233              		.cfi_restore 7
 5234              		.cfi_def_cfa_offset 0
 5235 0012 7047     		bx	lr
 5236              	.L325:
 5237              		.align	2
 5238              	.L324:
 5239 0014 00000000 		.word	xYieldPending
 5240              		.cfi_endproc
 5241              	.LFE41:
 5243              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5244              		.align	1
 5245              		.global	uxTaskGetTaskNumber
 5246              		.syntax unified
 5247              		.thumb
 5248              		.thumb_func
 5250              	uxTaskGetTaskNumber:
 5251              	.LFB42:
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5252              		.loc 1 3346 2
 5253              		.cfi_startproc
 5254              		@ args = 0, pretend = 0, frame = 16
 5255              		@ frame_needed = 1, uses_anonymous_args = 0
 5256              		@ link register save eliminated.
 5257 0000 80B4     		push	{r7}
 5258              	.LCFI193:
 5259              		.cfi_def_cfa_offset 4
 5260              		.cfi_offset 7, -4
 5261 0002 85B0     		sub	sp, sp, #20
 5262              	.LCFI194:
 5263              		.cfi_def_cfa_offset 24
 5264 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 156


 5265              	.LCFI195:
 5266              		.cfi_def_cfa_register 7
 5267 0006 7860     		str	r0, [r7, #4]
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5268              		.loc 1 3350 5
 5269 0008 7B68     		ldr	r3, [r7, #4]
 5270 000a 002B     		cmp	r3, #0
 5271 000c 05D0     		beq	.L327
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5272              		.loc 1 3352 10
 5273 000e 7B68     		ldr	r3, [r7, #4]
 5274 0010 BB60     		str	r3, [r7, #8]
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5275              		.loc 1 3353 13
 5276 0012 BB68     		ldr	r3, [r7, #8]
 5277 0014 DB6C     		ldr	r3, [r3, #76]
 5278 0016 FB60     		str	r3, [r7, #12]
 5279 0018 01E0     		b	.L328
 5280              	.L327:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5281              		.loc 1 3357 13
 5282 001a 0023     		movs	r3, #0
 5283 001c FB60     		str	r3, [r7, #12]
 5284              	.L328:
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5285              		.loc 1 3360 10
 5286 001e FB68     		ldr	r3, [r7, #12]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5287              		.loc 1 3361 2
 5288 0020 1846     		mov	r0, r3
 5289 0022 1437     		adds	r7, r7, #20
 5290              	.LCFI196:
 5291              		.cfi_def_cfa_offset 4
 5292 0024 BD46     		mov	sp, r7
 5293              	.LCFI197:
 5294              		.cfi_def_cfa_register 13
 5295              		@ sp needed
 5296 0026 5DF8047B 		ldr	r7, [sp], #4
 5297              	.LCFI198:
 5298              		.cfi_restore 7
 5299              		.cfi_def_cfa_offset 0
 5300 002a 7047     		bx	lr
 5301              		.cfi_endproc
 5302              	.LFE42:
 5304              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5305              		.align	1
 5306              		.global	vTaskSetTaskNumber
 5307              		.syntax unified
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 157


 5308              		.thumb
 5309              		.thumb_func
 5311              	vTaskSetTaskNumber:
 5312              	.LFB43:
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5313              		.loc 1 3369 2
 5314              		.cfi_startproc
 5315              		@ args = 0, pretend = 0, frame = 16
 5316              		@ frame_needed = 1, uses_anonymous_args = 0
 5317              		@ link register save eliminated.
 5318 0000 80B4     		push	{r7}
 5319              	.LCFI199:
 5320              		.cfi_def_cfa_offset 4
 5321              		.cfi_offset 7, -4
 5322 0002 85B0     		sub	sp, sp, #20
 5323              	.LCFI200:
 5324              		.cfi_def_cfa_offset 24
 5325 0004 00AF     		add	r7, sp, #0
 5326              	.LCFI201:
 5327              		.cfi_def_cfa_register 7
 5328 0006 7860     		str	r0, [r7, #4]
 5329 0008 3960     		str	r1, [r7]
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5330              		.loc 1 3372 5
 5331 000a 7B68     		ldr	r3, [r7, #4]
 5332 000c 002B     		cmp	r3, #0
 5333 000e 04D0     		beq	.L332
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5334              		.loc 1 3374 10
 5335 0010 7B68     		ldr	r3, [r7, #4]
 5336 0012 FB60     		str	r3, [r7, #12]
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5337              		.loc 1 3375 24
 5338 0014 FB68     		ldr	r3, [r7, #12]
 5339 0016 3A68     		ldr	r2, [r7]
 5340 0018 DA64     		str	r2, [r3, #76]
 5341              	.L332:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5342              		.loc 1 3377 2
 5343 001a 00BF     		nop
 5344 001c 1437     		adds	r7, r7, #20
 5345              	.LCFI202:
 5346              		.cfi_def_cfa_offset 4
 5347 001e BD46     		mov	sp, r7
 5348              	.LCFI203:
 5349              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 158


 5350              		@ sp needed
 5351 0020 5DF8047B 		ldr	r7, [sp], #4
 5352              	.LCFI204:
 5353              		.cfi_restore 7
 5354              		.cfi_def_cfa_offset 0
 5355 0024 7047     		bx	lr
 5356              		.cfi_endproc
 5357              	.LFE43:
 5359              		.section	.text.prvIdleTask,"ax",%progbits
 5360              		.align	1
 5361              		.syntax unified
 5362              		.thumb
 5363              		.thumb_func
 5365              	prvIdleTask:
 5366              	.LFB44:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5367              		.loc 1 3393 1
 5368              		.cfi_startproc
 5369              		@ args = 0, pretend = 0, frame = 16
 5370              		@ frame_needed = 1, uses_anonymous_args = 0
 5371 0000 80B5     		push	{r7, lr}
 5372              	.LCFI205:
 5373              		.cfi_def_cfa_offset 8
 5374              		.cfi_offset 7, -8
 5375              		.cfi_offset 14, -4
 5376 0002 84B0     		sub	sp, sp, #16
 5377              	.LCFI206:
 5378              		.cfi_def_cfa_offset 24
 5379 0004 00AF     		add	r7, sp, #0
 5380              	.LCFI207:
 5381              		.cfi_def_cfa_register 7
 5382 0006 7860     		str	r0, [r7, #4]
 5383              	.L339:
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 159


3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5384              		.loc 1 3409 3
 5385 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5386              		.loc 1 3432 8
 5387 000c 184B     		ldr	r3, .L340
 5388 000e 1B68     		ldr	r3, [r3]
 5389              		.loc 1 3432 6
 5390 0010 012B     		cmp	r3, #1
 5391 0012 07D9     		bls	.L334
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5392              		.loc 1 3434 5
 5393 0014 174B     		ldr	r3, .L340+4
 5394 0016 4FF08052 		mov	r2, #268435456
 5395 001a 1A60     		str	r2, [r3]
 5396              		.syntax unified
 5397              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5398 001c BFF34F8F 		dsb
 5399              	@ 0 "" 2
 5400              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5401 0020 BFF36F8F 		isb
 5402              	@ 0 "" 2
 5403              		.thumb
 5404              		.syntax unified
 5405              	.L334:
 5406              	.LBB215:
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 160


3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
 5407              		.loc 1 3469 24
 5408 0024 FFF7FEFF 		bl	prvGetExpectedIdleTime
 5409 0028 F860     		str	r0, [r7, #12]
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 5410              		.loc 1 3471 6
 5411 002a FB68     		ldr	r3, [r7, #12]
 5412 002c 012B     		cmp	r3, #1
 5413 002e EBD9     		bls	.L339
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
 5414              		.loc 1 3473 5
 5415 0030 FFF7FEFF 		bl	vTaskSuspendAll
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
 5416              		.loc 1 3478 6
 5417 0034 104B     		ldr	r3, .L340+8
 5418 0036 1A68     		ldr	r2, [r3]
 5419 0038 104B     		ldr	r3, .L340+12
 5420 003a 1B68     		ldr	r3, [r3]
 5421 003c 9A42     		cmp	r2, r3
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 161


 5422 003e 0BD2     		bcs	.L336
 5423              	.LBB216:
 5424              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5425              		.loc 2 195 2
 5426              		.syntax unified
 5427              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5428 0040 4FF05003 			mov r3, #80												
 5429 0044 83F31188 		msr basepri, r3											
 5430 0048 BFF36F8F 		isb														
 5431 004c BFF34F8F 		dsb														
 5432              	
 5433              	@ 0 "" 2
 5434              		.thumb
 5435              		.syntax unified
 5436 0050 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5437              		.loc 2 203 1
 5438 0052 00BF     		nop
 5439              	.L337:
 5440              	.LBE217:
 5441              	.LBE216:
 5442              		.loc 1 3478 6
 5443 0054 00BF     		nop
 5444 0056 FDE7     		b	.L337
 5445              	.L336:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
 5446              		.loc 1 3479 26
 5447 0058 FFF7FEFF 		bl	prvGetExpectedIdleTime
 5448 005c F860     		str	r0, [r7, #12]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 5449              		.loc 1 3486 8
 5450 005e FB68     		ldr	r3, [r7, #12]
 5451 0060 012B     		cmp	r3, #1
 5452 0062 02D9     		bls	.L338
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 5453              		.loc 1 3489 7
 5454 0064 F868     		ldr	r0, [r7, #12]
 5455 0066 FFF7FEFF 		bl	vPortSuppressTicksAndSleep
 5456              	.L338:
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
 5457              		.loc 1 3497 14
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 162


 5458 006a FFF7FEFF 		bl	xTaskResumeAll
 5459              	.LBE215:
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5460              		.loc 1 3409 3
 5461 006e CBE7     		b	.L339
 5462              	.L341:
 5463              		.align	2
 5464              	.L340:
 5465 0070 00000000 		.word	pxReadyTasksLists
 5466 0074 04ED00E0 		.word	-536810236
 5467 0078 00000000 		.word	xNextTaskUnblockTime
 5468 007c 00000000 		.word	xTickCount
 5469              		.cfi_endproc
 5470              	.LFE44:
 5472              		.section	.text.eTaskConfirmSleepModeStatus,"ax",%progbits
 5473              		.align	1
 5474              		.global	eTaskConfirmSleepModeStatus
 5475              		.syntax unified
 5476              		.thumb
 5477              		.thumb_func
 5479              	eTaskConfirmSleepModeStatus:
 5480              	.LFB45:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5481              		.loc 1 3512 2
 5482              		.cfi_startproc
 5483              		@ args = 0, pretend = 0, frame = 8
 5484              		@ frame_needed = 1, uses_anonymous_args = 0
 5485              		@ link register save eliminated.
 5486 0000 80B4     		push	{r7}
 5487              	.LCFI208:
 5488              		.cfi_def_cfa_offset 4
 5489              		.cfi_offset 7, -4
 5490 0002 83B0     		sub	sp, sp, #12
 5491              	.LCFI209:
 5492              		.cfi_def_cfa_offset 16
 5493 0004 00AF     		add	r7, sp, #0
 5494              	.LCFI210:
 5495              		.cfi_def_cfa_register 7
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
 5496              		.loc 1 3514 20
 5497 0006 0123     		movs	r3, #1
 5498 0008 3B60     		str	r3, [r7]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 163


3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
 5499              		.loc 1 3515 19
 5500 000a 0123     		movs	r3, #1
 5501 000c FB71     		strb	r3, [r7, #7]
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 5502              		.loc 1 3519 7
 5503 000e 0F4B     		ldr	r3, .L347
 5504 0010 1B68     		ldr	r3, [r3]
 5505              		.loc 1 3519 5
 5506 0012 002B     		cmp	r3, #0
 5507 0014 02D0     		beq	.L343
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
 5508              		.loc 1 3522 12
 5509 0016 0023     		movs	r3, #0
 5510 0018 FB71     		strb	r3, [r7, #7]
 5511 001a 10E0     		b	.L344
 5512              	.L343:
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
 5513              		.loc 1 3524 26
 5514 001c 0C4B     		ldr	r3, .L347+4
 5515 001e 1B68     		ldr	r3, [r3]
 5516              		.loc 1 3524 10
 5517 0020 002B     		cmp	r3, #0
 5518 0022 02D0     		beq	.L345
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
 5519              		.loc 1 3527 12
 5520 0024 0023     		movs	r3, #0
 5521 0026 FB71     		strb	r3, [r7, #7]
 5522 0028 09E0     		b	.L344
 5523              	.L345:
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
 5524              		.loc 1 3535 8
 5525 002a 0A4B     		ldr	r3, .L347+8
 5526 002c 1A68     		ldr	r2, [r3]
 5527              		.loc 1 3535 83
 5528 002e 0A4B     		ldr	r3, .L347+12
 5529 0030 1968     		ldr	r1, [r3]
 5530 0032 3B68     		ldr	r3, [r7]
 5531 0034 CB1A     		subs	r3, r1, r3
 5532              		.loc 1 3535 6
 5533 0036 9A42     		cmp	r2, r3
 5534 0038 01D1     		bne	.L344
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 164


3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
 5535              		.loc 1 3537 13
 5536 003a 0223     		movs	r3, #2
 5537 003c FB71     		strb	r3, [r7, #7]
 5538              	.L344:
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 5539              		.loc 1 3545 10
 5540 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5541              		.loc 1 3546 2
 5542 0040 1846     		mov	r0, r3
 5543 0042 0C37     		adds	r7, r7, #12
 5544              	.LCFI211:
 5545              		.cfi_def_cfa_offset 4
 5546 0044 BD46     		mov	sp, r7
 5547              	.LCFI212:
 5548              		.cfi_def_cfa_register 13
 5549              		@ sp needed
 5550 0046 5DF8047B 		ldr	r7, [sp], #4
 5551              	.LCFI213:
 5552              		.cfi_restore 7
 5553              		.cfi_def_cfa_offset 0
 5554 004a 7047     		bx	lr
 5555              	.L348:
 5556              		.align	2
 5557              	.L347:
 5558 004c 00000000 		.word	xPendingReadyList
 5559 0050 00000000 		.word	xYieldPending
 5560 0054 00000000 		.word	xSuspendedTaskList
 5561 0058 00000000 		.word	uxCurrentNumberOfTasks
 5562              		.cfi_endproc
 5563              	.LFE45:
 5565              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5566              		.align	1
 5567              		.syntax unified
 5568              		.thumb
 5569              		.thumb_func
 5571              	prvInitialiseTaskLists:
 5572              	.LFB46:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 165


3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5573              		.loc 1 3608 1
 5574              		.cfi_startproc
 5575              		@ args = 0, pretend = 0, frame = 8
 5576              		@ frame_needed = 1, uses_anonymous_args = 0
 5577 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 166


 5578              	.LCFI214:
 5579              		.cfi_def_cfa_offset 8
 5580              		.cfi_offset 7, -8
 5581              		.cfi_offset 14, -4
 5582 0002 82B0     		sub	sp, sp, #8
 5583              	.LCFI215:
 5584              		.cfi_def_cfa_offset 16
 5585 0004 00AF     		add	r7, sp, #0
 5586              	.LCFI216:
 5587              		.cfi_def_cfa_register 7
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5588              		.loc 1 3611 18
 5589 0006 0023     		movs	r3, #0
 5590 0008 7B60     		str	r3, [r7, #4]
 5591              		.loc 1 3611 2
 5592 000a 0CE0     		b	.L350
 5593              	.L351:
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5594              		.loc 1 3613 3
 5595 000c 7A68     		ldr	r2, [r7, #4]
 5596 000e 1346     		mov	r3, r2
 5597 0010 9B00     		lsls	r3, r3, #2
 5598 0012 1344     		add	r3, r3, r2
 5599 0014 9B00     		lsls	r3, r3, #2
 5600 0016 124A     		ldr	r2, .L352
 5601 0018 1344     		add	r3, r3, r2
 5602 001a 1846     		mov	r0, r3
 5603 001c FFF7FEFF 		bl	vListInitialise
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5604              		.loc 1 3611 101 discriminator 3
 5605 0020 7B68     		ldr	r3, [r7, #4]
 5606 0022 0133     		adds	r3, r3, #1
 5607 0024 7B60     		str	r3, [r7, #4]
 5608              	.L350:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5609              		.loc 1 3611 51 discriminator 1
 5610 0026 7B68     		ldr	r3, [r7, #4]
 5611 0028 372B     		cmp	r3, #55
 5612 002a EFD9     		bls	.L351
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5613              		.loc 1 3616 2
 5614 002c 0D48     		ldr	r0, .L352+4
 5615 002e FFF7FEFF 		bl	vListInitialise
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5616              		.loc 1 3617 2
 5617 0032 0D48     		ldr	r0, .L352+8
 5618 0034 FFF7FEFF 		bl	vListInitialise
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5619              		.loc 1 3618 2
 5620 0038 0C48     		ldr	r0, .L352+12
 5621 003a FFF7FEFF 		bl	vListInitialise
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 167


3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5622              		.loc 1 3622 3
 5623 003e 0C48     		ldr	r0, .L352+16
 5624 0040 FFF7FEFF 		bl	vListInitialise
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5625              		.loc 1 3628 3
 5626 0044 0B48     		ldr	r0, .L352+20
 5627 0046 FFF7FEFF 		bl	vListInitialise
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5628              		.loc 1 3634 20
 5629 004a 0B4B     		ldr	r3, .L352+24
 5630 004c 054A     		ldr	r2, .L352+4
 5631 004e 1A60     		str	r2, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5632              		.loc 1 3635 28
 5633 0050 0A4B     		ldr	r3, .L352+28
 5634 0052 054A     		ldr	r2, .L352+8
 5635 0054 1A60     		str	r2, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5636              		.loc 1 3636 1
 5637 0056 00BF     		nop
 5638 0058 0837     		adds	r7, r7, #8
 5639              	.LCFI217:
 5640              		.cfi_def_cfa_offset 8
 5641 005a BD46     		mov	sp, r7
 5642              	.LCFI218:
 5643              		.cfi_def_cfa_register 13
 5644              		@ sp needed
 5645 005c 80BD     		pop	{r7, pc}
 5646              	.L353:
 5647 005e 00BF     		.align	2
 5648              	.L352:
 5649 0060 00000000 		.word	pxReadyTasksLists
 5650 0064 00000000 		.word	xDelayedTaskList1
 5651 0068 00000000 		.word	xDelayedTaskList2
 5652 006c 00000000 		.word	xPendingReadyList
 5653 0070 00000000 		.word	xTasksWaitingTermination
 5654 0074 00000000 		.word	xSuspendedTaskList
 5655 0078 00000000 		.word	pxDelayedTaskList
 5656 007c 00000000 		.word	pxOverflowDelayedTaskList
 5657              		.cfi_endproc
 5658              	.LFE46:
 5660              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5661              		.align	1
 5662              		.syntax unified
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 168


 5663              		.thumb
 5664              		.thumb_func
 5666              	prvCheckTasksWaitingTermination:
 5667              	.LFB47:
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5668              		.loc 1 3640 1
 5669              		.cfi_startproc
 5670              		@ args = 0, pretend = 0, frame = 8
 5671              		@ frame_needed = 1, uses_anonymous_args = 0
 5672 0000 80B5     		push	{r7, lr}
 5673              	.LCFI219:
 5674              		.cfi_def_cfa_offset 8
 5675              		.cfi_offset 7, -8
 5676              		.cfi_offset 14, -4
 5677 0002 82B0     		sub	sp, sp, #8
 5678              	.LCFI220:
 5679              		.cfi_def_cfa_offset 16
 5680 0004 00AF     		add	r7, sp, #0
 5681              	.LCFI221:
 5682              		.cfi_def_cfa_register 7
 5683              	.LBB218:
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5684              		.loc 1 3650 8
 5685 0006 19E0     		b	.L355
 5686              	.L356:
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5687              		.loc 1 3652 4
 5688 0008 FFF7FEFF 		bl	vPortEnterCritical
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5689              		.loc 1 3654 13
 5690 000c 104B     		ldr	r3, .L357
 5691 000e DB68     		ldr	r3, [r3, #12]
 5692              		.loc 1 3654 11
 5693 0010 DB68     		ldr	r3, [r3, #12]
 5694 0012 7B60     		str	r3, [r7, #4]
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5695              		.loc 1 3655 14
 5696 0014 7B68     		ldr	r3, [r7, #4]
 5697 0016 0433     		adds	r3, r3, #4
 5698 0018 1846     		mov	r0, r3
 5699 001a FFF7FEFF 		bl	uxListRemove
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5700              		.loc 1 3656 5
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 169


 5701 001e 0D4B     		ldr	r3, .L357+4
 5702 0020 1B68     		ldr	r3, [r3]
 5703 0022 013B     		subs	r3, r3, #1
 5704 0024 0B4A     		ldr	r2, .L357+4
 5705 0026 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5706              		.loc 1 3657 5
 5707 0028 0B4B     		ldr	r3, .L357+8
 5708 002a 1B68     		ldr	r3, [r3]
 5709 002c 013B     		subs	r3, r3, #1
 5710 002e 0A4A     		ldr	r2, .L357+8
 5711 0030 1360     		str	r3, [r2]
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5712              		.loc 1 3659 4
 5713 0032 FFF7FEFF 		bl	vPortExitCritical
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5714              		.loc 1 3661 4
 5715 0036 7868     		ldr	r0, [r7, #4]
 5716 0038 FFF7FEFF 		bl	prvDeleteTCB
 5717              	.L355:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5718              		.loc 1 3650 39
 5719 003c 064B     		ldr	r3, .L357+8
 5720 003e 1B68     		ldr	r3, [r3]
 5721 0040 002B     		cmp	r3, #0
 5722 0042 E1D1     		bne	.L356
 5723              	.LBE218:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5724              		.loc 1 3665 1
 5725 0044 00BF     		nop
 5726 0046 00BF     		nop
 5727 0048 0837     		adds	r7, r7, #8
 5728              	.LCFI222:
 5729              		.cfi_def_cfa_offset 8
 5730 004a BD46     		mov	sp, r7
 5731              	.LCFI223:
 5732              		.cfi_def_cfa_register 13
 5733              		@ sp needed
 5734 004c 80BD     		pop	{r7, pc}
 5735              	.L358:
 5736 004e 00BF     		.align	2
 5737              	.L357:
 5738 0050 00000000 		.word	xTasksWaitingTermination
 5739 0054 00000000 		.word	uxCurrentNumberOfTasks
 5740 0058 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5741              		.cfi_endproc
 5742              	.LFE47:
 5744              		.section	.text.vTaskGetInfo,"ax",%progbits
 5745              		.align	1
 5746              		.global	vTaskGetInfo
 5747              		.syntax unified
 5748              		.thumb
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 170


 5749              		.thumb_func
 5751              	vTaskGetInfo:
 5752              	.LFB48:
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5753              		.loc 1 3671 2
 5754              		.cfi_startproc
 5755              		@ args = 0, pretend = 0, frame = 24
 5756              		@ frame_needed = 1, uses_anonymous_args = 0
 5757 0000 80B5     		push	{r7, lr}
 5758              	.LCFI224:
 5759              		.cfi_def_cfa_offset 8
 5760              		.cfi_offset 7, -8
 5761              		.cfi_offset 14, -4
 5762 0002 86B0     		sub	sp, sp, #24
 5763              	.LCFI225:
 5764              		.cfi_def_cfa_offset 32
 5765 0004 00AF     		add	r7, sp, #0
 5766              	.LCFI226:
 5767              		.cfi_def_cfa_register 7
 5768 0006 F860     		str	r0, [r7, #12]
 5769 0008 B960     		str	r1, [r7, #8]
 5770 000a 7A60     		str	r2, [r7, #4]
 5771 000c FB70     		strb	r3, [r7, #3]
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5772              		.loc 1 3675 11
 5773 000e FB68     		ldr	r3, [r7, #12]
 5774 0010 002B     		cmp	r3, #0
 5775 0012 02D1     		bne	.L360
 5776              		.loc 1 3675 11 is_stmt 0 discriminator 1
 5777 0014 2C4B     		ldr	r3, .L369
 5778 0016 1B68     		ldr	r3, [r3]
 5779 0018 00E0     		b	.L361
 5780              	.L360:
 5781              		.loc 1 3675 11 discriminator 2
 5782 001a FB68     		ldr	r3, [r7, #12]
 5783              	.L361:
 5784              		.loc 1 3675 9 is_stmt 1 discriminator 4
 5785 001c 7B61     		str	r3, [r7, #20]
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5786              		.loc 1 3677 25
 5787 001e BB68     		ldr	r3, [r7, #8]
 5788 0020 7A69     		ldr	r2, [r7, #20]
 5789 0022 1A60     		str	r2, [r3]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5790              		.loc 1 3678 47
 5791 0024 7B69     		ldr	r3, [r7, #20]
 5792 0026 03F13402 		add	r2, r3, #52
 5793              		.loc 1 3678 28
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 171


 5794 002a BB68     		ldr	r3, [r7, #8]
 5795 002c 5A60     		str	r2, [r3, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5796              		.loc 1 3679 42
 5797 002e 7B69     		ldr	r3, [r7, #20]
 5798 0030 DA6A     		ldr	r2, [r3, #44]
 5799              		.loc 1 3679 35
 5800 0032 BB68     		ldr	r3, [r7, #8]
 5801 0034 1A61     		str	r2, [r3, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5802              		.loc 1 3680 36
 5803 0036 7B69     		ldr	r3, [r7, #20]
 5804 0038 1A6B     		ldr	r2, [r3, #48]
 5805              		.loc 1 3680 29
 5806 003a BB68     		ldr	r3, [r7, #8]
 5807 003c DA61     		str	r2, [r3, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5808              		.loc 1 3681 36
 5809 003e 7B69     		ldr	r3, [r7, #20]
 5810 0040 9A6C     		ldr	r2, [r3, #72]
 5811              		.loc 1 3681 29
 5812 0042 BB68     		ldr	r3, [r7, #8]
 5813 0044 9A60     		str	r2, [r3, #8]
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5814              		.loc 1 3685 40
 5815 0046 7B69     		ldr	r3, [r7, #20]
 5816 0048 1A6D     		ldr	r2, [r3, #80]
 5817              		.loc 1 3685 33
 5818 004a BB68     		ldr	r3, [r7, #8]
 5819 004c 5A61     		str	r2, [r3, #20]
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 5820              		.loc 1 3695 42
 5821 004e 7B69     		ldr	r3, [r7, #20]
 5822 0050 9A6D     		ldr	r2, [r3, #88]
 5823              		.loc 1 3695 35
 5824 0052 BB68     		ldr	r3, [r7, #8]
 5825 0054 9A61     		str	r2, [r3, #24]
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 172


3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5826              		.loc 1 3706 5
 5827 0056 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5828 0058 052B     		cmp	r3, #5
 5829 005a 1AD0     		beq	.L362
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5830              		.loc 1 3708 14
 5831 005c 1A4B     		ldr	r3, .L369
 5832 005e 1B68     		ldr	r3, [r3]
 5833              		.loc 1 3708 6
 5834 0060 7A69     		ldr	r2, [r7, #20]
 5835 0062 9A42     		cmp	r2, r3
 5836 0064 03D1     		bne	.L363
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5837              		.loc 1 3710 33
 5838 0066 BB68     		ldr	r3, [r7, #8]
 5839 0068 0022     		movs	r2, #0
 5840 006a 1A73     		strb	r2, [r3, #12]
 5841 006c 18E0     		b	.L364
 5842              	.L363:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5843              		.loc 1 3714 33
 5844 006e BB68     		ldr	r3, [r7, #8]
 5845 0070 FA78     		ldrb	r2, [r7, #3]
 5846 0072 1A73     		strb	r2, [r3, #12]
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5847              		.loc 1 3721 8
 5848 0074 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5849 0076 032B     		cmp	r3, #3
 5850 0078 12D1     		bne	.L364
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5851              		.loc 1 3723 7
 5852 007a FFF7FEFF 		bl	vTaskSuspendAll
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5853              		.loc 1 3725 12
 5854 007e 7B69     		ldr	r3, [r7, #20]
 5855 0080 9B6A     		ldr	r3, [r3, #40]
 5856              		.loc 1 3725 10
 5857 0082 002B     		cmp	r3, #0
 5858 0084 02D0     		beq	.L365
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 173


 5859              		.loc 1 3727 37
 5860 0086 BB68     		ldr	r3, [r7, #8]
 5861 0088 0222     		movs	r2, #2
 5862 008a 1A73     		strb	r2, [r3, #12]
 5863              	.L365:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5864              		.loc 1 3730 16
 5865 008c FFF7FEFF 		bl	xTaskResumeAll
 5866 0090 06E0     		b	.L364
 5867              	.L362:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5868              		.loc 1 3738 34
 5869 0092 7869     		ldr	r0, [r7, #20]
 5870 0094 FFF7FEFF 		bl	eTaskGetState
 5871 0098 0346     		mov	r3, r0
 5872 009a 1A46     		mov	r2, r3
 5873              		.loc 1 3738 32 discriminator 1
 5874 009c BB68     		ldr	r3, [r7, #8]
 5875 009e 1A73     		strb	r2, [r3, #12]
 5876              	.L364:
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5877              		.loc 1 3743 5
 5878 00a0 7B68     		ldr	r3, [r7, #4]
 5879 00a2 002B     		cmp	r3, #0
 5880 00a4 09D0     		beq	.L366
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 5881              		.loc 1 3751 89
 5882 00a6 7B69     		ldr	r3, [r7, #20]
 5883 00a8 1B6B     		ldr	r3, [r3, #48]
 5884              		.loc 1 3751 42
 5885 00aa 1846     		mov	r0, r3
 5886 00ac FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5887 00b0 0346     		mov	r3, r0
 5888 00b2 1A46     		mov	r2, r3
 5889              		.loc 1 3751 40 discriminator 1
 5890 00b4 BB68     		ldr	r3, [r7, #8]
 5891 00b6 1A84     		strh	r2, [r3, #32]	@ movhi
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 174


3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5892              		.loc 1 3759 2
 5893 00b8 02E0     		b	.L368
 5894              	.L366:
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5895              		.loc 1 3757 39
 5896 00ba BB68     		ldr	r3, [r7, #8]
 5897 00bc 0022     		movs	r2, #0
 5898 00be 1A84     		strh	r2, [r3, #32]	@ movhi
 5899              	.L368:
 5900              		.loc 1 3759 2
 5901 00c0 00BF     		nop
 5902 00c2 1837     		adds	r7, r7, #24
 5903              	.LCFI227:
 5904              		.cfi_def_cfa_offset 8
 5905 00c4 BD46     		mov	sp, r7
 5906              	.LCFI228:
 5907              		.cfi_def_cfa_register 13
 5908              		@ sp needed
 5909 00c6 80BD     		pop	{r7, pc}
 5910              	.L370:
 5911              		.align	2
 5912              	.L369:
 5913 00c8 00000000 		.word	pxCurrentTCB
 5914              		.cfi_endproc
 5915              	.LFE48:
 5917              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5918              		.align	1
 5919              		.syntax unified
 5920              		.thumb
 5921              		.thumb_func
 5923              	prvListTasksWithinSingleList:
 5924              	.LFB49:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5925              		.loc 1 3767 2
 5926              		.cfi_startproc
 5927              		@ args = 0, pretend = 0, frame = 40
 5928              		@ frame_needed = 1, uses_anonymous_args = 0
 5929 0000 80B5     		push	{r7, lr}
 5930              	.LCFI229:
 5931              		.cfi_def_cfa_offset 8
 5932              		.cfi_offset 7, -8
 5933              		.cfi_offset 14, -4
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 175


 5934 0002 8AB0     		sub	sp, sp, #40
 5935              	.LCFI230:
 5936              		.cfi_def_cfa_offset 48
 5937 0004 00AF     		add	r7, sp, #0
 5938              	.LCFI231:
 5939              		.cfi_def_cfa_register 7
 5940 0006 F860     		str	r0, [r7, #12]
 5941 0008 B960     		str	r1, [r7, #8]
 5942 000a 1346     		mov	r3, r2
 5943 000c FB71     		strb	r3, [r7, #7]
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 5944              		.loc 1 3769 14
 5945 000e 0023     		movs	r3, #0
 5946 0010 7B62     		str	r3, [r7, #36]
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 5947              		.loc 1 3771 7
 5948 0012 BB68     		ldr	r3, [r7, #8]
 5949 0014 1B68     		ldr	r3, [r3]
 5950              		.loc 1 3771 5
 5951 0016 002B     		cmp	r3, #0
 5952 0018 3FD0     		beq	.L372
 5953              	.LBB219:
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5954              		.loc 1 3773 4
 5955 001a BB68     		ldr	r3, [r7, #8]
 5956 001c 3B62     		str	r3, [r7, #32]
 5957 001e 3B6A     		ldr	r3, [r7, #32]
 5958 0020 5B68     		ldr	r3, [r3, #4]
 5959 0022 5A68     		ldr	r2, [r3, #4]
 5960 0024 3B6A     		ldr	r3, [r7, #32]
 5961 0026 5A60     		str	r2, [r3, #4]
 5962 0028 3B6A     		ldr	r3, [r7, #32]
 5963 002a 5A68     		ldr	r2, [r3, #4]
 5964 002c 3B6A     		ldr	r3, [r7, #32]
 5965 002e 0833     		adds	r3, r3, #8
 5966 0030 9A42     		cmp	r2, r3
 5967 0032 04D1     		bne	.L373
 5968              		.loc 1 3773 4 is_stmt 0 discriminator 1
 5969 0034 3B6A     		ldr	r3, [r7, #32]
 5970 0036 5B68     		ldr	r3, [r3, #4]
 5971 0038 5A68     		ldr	r2, [r3, #4]
 5972 003a 3B6A     		ldr	r3, [r7, #32]
 5973 003c 5A60     		str	r2, [r3, #4]
 5974              	.L373:
 5975              		.loc 1 3773 4 discriminator 3
 5976 003e 3B6A     		ldr	r3, [r7, #32]
 5977 0040 5B68     		ldr	r3, [r3, #4]
 5978 0042 DB68     		ldr	r3, [r3, #12]
 5979 0044 FB61     		str	r3, [r7, #28]
 5980              	.L375:
 5981              	.LBE219:
 5982              	.LBB220:
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 176


3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 5983              		.loc 1 3781 5 is_stmt 1
 5984 0046 BB68     		ldr	r3, [r7, #8]
 5985 0048 BB61     		str	r3, [r7, #24]
 5986 004a BB69     		ldr	r3, [r7, #24]
 5987 004c 5B68     		ldr	r3, [r3, #4]
 5988 004e 5A68     		ldr	r2, [r3, #4]
 5989 0050 BB69     		ldr	r3, [r7, #24]
 5990 0052 5A60     		str	r2, [r3, #4]
 5991 0054 BB69     		ldr	r3, [r7, #24]
 5992 0056 5A68     		ldr	r2, [r3, #4]
 5993 0058 BB69     		ldr	r3, [r7, #24]
 5994 005a 0833     		adds	r3, r3, #8
 5995 005c 9A42     		cmp	r2, r3
 5996 005e 04D1     		bne	.L374
 5997              		.loc 1 3781 5 is_stmt 0 discriminator 1
 5998 0060 BB69     		ldr	r3, [r7, #24]
 5999 0062 5B68     		ldr	r3, [r3, #4]
 6000 0064 5A68     		ldr	r2, [r3, #4]
 6001 0066 BB69     		ldr	r3, [r7, #24]
 6002 0068 5A60     		str	r2, [r3, #4]
 6003              	.L374:
 6004              		.loc 1 3781 5 discriminator 3
 6005 006a BB69     		ldr	r3, [r7, #24]
 6006 006c 5B68     		ldr	r3, [r3, #4]
 6007 006e DB68     		ldr	r3, [r3, #12]
 6008 0070 7B61     		str	r3, [r7, #20]
 6009              	.LBE220:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 6010              		.loc 1 3782 67 is_stmt 1
 6011 0072 7A6A     		ldr	r2, [r7, #36]
 6012 0074 1346     		mov	r3, r2
 6013 0076 DB00     		lsls	r3, r3, #3
 6014 0078 1344     		add	r3, r3, r2
 6015 007a 9B00     		lsls	r3, r3, #2
 6016 007c 1A46     		mov	r2, r3
 6017              		.loc 1 3782 5
 6018 007e FB68     		ldr	r3, [r7, #12]
 6019 0080 9918     		adds	r1, r3, r2
 6020 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6021 0084 0122     		movs	r2, #1
 6022 0086 7869     		ldr	r0, [r7, #20]
 6023 0088 FFF7FEFF 		bl	vTaskGetInfo
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 6024              		.loc 1 3783 11
 6025 008c 7B6A     		ldr	r3, [r7, #36]
 6026 008e 0133     		adds	r3, r3, #1
 6027 0090 7B62     		str	r3, [r7, #36]
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 6028              		.loc 1 3784 23
 6029 0092 7A69     		ldr	r2, [r7, #20]
 6030 0094 FB69     		ldr	r3, [r7, #28]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 177


 6031 0096 9A42     		cmp	r2, r3
 6032 0098 D5D1     		bne	.L375
 6033              	.L372:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 6034              		.loc 1 3791 10
 6035 009a 7B6A     		ldr	r3, [r7, #36]
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6036              		.loc 1 3792 2
 6037 009c 1846     		mov	r0, r3
 6038 009e 2837     		adds	r7, r7, #40
 6039              	.LCFI232:
 6040              		.cfi_def_cfa_offset 8
 6041 00a0 BD46     		mov	sp, r7
 6042              	.LCFI233:
 6043              		.cfi_def_cfa_register 13
 6044              		@ sp needed
 6045 00a2 80BD     		pop	{r7, pc}
 6046              		.cfi_endproc
 6047              	.LFE49:
 6049              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 6050              		.align	1
 6051              		.syntax unified
 6052              		.thumb
 6053              		.thumb_func
 6055              	prvTaskCheckFreeStackSpace:
 6056              	.LFB50:
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6057              		.loc 1 3800 2
 6058              		.cfi_startproc
 6059              		@ args = 0, pretend = 0, frame = 16
 6060              		@ frame_needed = 1, uses_anonymous_args = 0
 6061              		@ link register save eliminated.
 6062 0000 80B4     		push	{r7}
 6063              	.LCFI234:
 6064              		.cfi_def_cfa_offset 4
 6065              		.cfi_offset 7, -4
 6066 0002 85B0     		sub	sp, sp, #20
 6067              	.LCFI235:
 6068              		.cfi_def_cfa_offset 24
 6069 0004 00AF     		add	r7, sp, #0
 6070              	.LCFI236:
 6071              		.cfi_def_cfa_register 7
 6072 0006 7860     		str	r0, [r7, #4]
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 178


 6073              		.loc 1 3801 11
 6074 0008 0023     		movs	r3, #0
 6075 000a FB60     		str	r3, [r7, #12]
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 6076              		.loc 1 3803 8
 6077 000c 05E0     		b	.L378
 6078              	.L379:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 6079              		.loc 1 3805 17
 6080 000e 7B68     		ldr	r3, [r7, #4]
 6081 0010 0133     		adds	r3, r3, #1
 6082 0012 7B60     		str	r3, [r7, #4]
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 6083              		.loc 1 3806 11
 6084 0014 FB68     		ldr	r3, [r7, #12]
 6085 0016 0133     		adds	r3, r3, #1
 6086 0018 FB60     		str	r3, [r7, #12]
 6087              	.L378:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6088              		.loc 1 3803 10
 6089 001a 7B68     		ldr	r3, [r7, #4]
 6090 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6091              		.loc 1 3803 24
 6092 001e A52B     		cmp	r3, #165
 6093 0020 F5D0     		beq	.L379
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 6094              		.loc 1 3809 11
 6095 0022 FB68     		ldr	r3, [r7, #12]
 6096 0024 9B08     		lsrs	r3, r3, #2
 6097 0026 FB60     		str	r3, [r7, #12]
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 6098              		.loc 1 3811 10
 6099 0028 FB68     		ldr	r3, [r7, #12]
 6100 002a 9BB2     		uxth	r3, r3
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6101              		.loc 1 3812 2
 6102 002c 1846     		mov	r0, r3
 6103 002e 1437     		adds	r7, r7, #20
 6104              	.LCFI237:
 6105              		.cfi_def_cfa_offset 4
 6106 0030 BD46     		mov	sp, r7
 6107              	.LCFI238:
 6108              		.cfi_def_cfa_register 13
 6109              		@ sp needed
 6110 0032 5DF8047B 		ldr	r7, [sp], #4
 6111              	.LCFI239:
 6112              		.cfi_restore 7
 6113              		.cfi_def_cfa_offset 0
 6114 0036 7047     		bx	lr
 6115              		.cfi_endproc
 6116              	.LFE50:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 179


 6118              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 6119              		.align	1
 6120              		.global	uxTaskGetStackHighWaterMark
 6121              		.syntax unified
 6122              		.thumb
 6123              		.thumb_func
 6125              	uxTaskGetStackHighWaterMark:
 6126              	.LFB51:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6127              		.loc 1 3860 2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 180


 6128              		.cfi_startproc
 6129              		@ args = 0, pretend = 0, frame = 24
 6130              		@ frame_needed = 1, uses_anonymous_args = 0
 6131 0000 80B5     		push	{r7, lr}
 6132              	.LCFI240:
 6133              		.cfi_def_cfa_offset 8
 6134              		.cfi_offset 7, -8
 6135              		.cfi_offset 14, -4
 6136 0002 86B0     		sub	sp, sp, #24
 6137              	.LCFI241:
 6138              		.cfi_def_cfa_offset 32
 6139 0004 00AF     		add	r7, sp, #0
 6140              	.LCFI242:
 6141              		.cfi_def_cfa_register 7
 6142 0006 7860     		str	r0, [r7, #4]
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6143              		.loc 1 3865 11
 6144 0008 7B68     		ldr	r3, [r7, #4]
 6145 000a 002B     		cmp	r3, #0
 6146 000c 02D1     		bne	.L382
 6147              		.loc 1 3865 11 is_stmt 0 discriminator 1
 6148 000e 094B     		ldr	r3, .L385
 6149 0010 1B68     		ldr	r3, [r3]
 6150 0012 00E0     		b	.L383
 6151              	.L382:
 6152              		.loc 1 3865 11 discriminator 2
 6153 0014 7B68     		ldr	r3, [r7, #4]
 6154              	.L383:
 6155              		.loc 1 3865 9 is_stmt 1 discriminator 4
 6156 0016 7B61     		str	r3, [r7, #20]
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 6157              		.loc 1 3869 18
 6158 0018 7B69     		ldr	r3, [r7, #20]
 6159 001a 1B6B     		ldr	r3, [r3, #48]
 6160 001c 3B61     		str	r3, [r7, #16]
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 6161              		.loc 1 3877 30
 6162 001e 3869     		ldr	r0, [r7, #16]
 6163 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 6164 0024 0346     		mov	r3, r0
 6165              		.loc 1 3877 12 discriminator 1
 6166 0026 FB60     		str	r3, [r7, #12]
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 181


3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 6167              		.loc 1 3879 10
 6168 0028 FB68     		ldr	r3, [r7, #12]
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6169              		.loc 1 3880 2
 6170 002a 1846     		mov	r0, r3
 6171 002c 1837     		adds	r7, r7, #24
 6172              	.LCFI243:
 6173              		.cfi_def_cfa_offset 8
 6174 002e BD46     		mov	sp, r7
 6175              	.LCFI244:
 6176              		.cfi_def_cfa_register 13
 6177              		@ sp needed
 6178 0030 80BD     		pop	{r7, pc}
 6179              	.L386:
 6180 0032 00BF     		.align	2
 6181              	.L385:
 6182 0034 00000000 		.word	pxCurrentTCB
 6183              		.cfi_endproc
 6184              	.LFE51:
 6186              		.section	.text.prvDeleteTCB,"ax",%progbits
 6187              		.align	1
 6188              		.syntax unified
 6189              		.thumb
 6190              		.thumb_func
 6192              	prvDeleteTCB:
 6193              	.LFB52:
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6194              		.loc 1 3888 2
 6195              		.cfi_startproc
 6196              		@ args = 0, pretend = 0, frame = 16
 6197              		@ frame_needed = 1, uses_anonymous_args = 0
 6198 0000 80B5     		push	{r7, lr}
 6199              	.LCFI245:
 6200              		.cfi_def_cfa_offset 8
 6201              		.cfi_offset 7, -8
 6202              		.cfi_offset 14, -4
 6203 0002 84B0     		sub	sp, sp, #16
 6204              	.LCFI246:
 6205              		.cfi_def_cfa_offset 24
 6206 0004 00AF     		add	r7, sp, #0
 6207              	.LCFI247:
 6208              		.cfi_def_cfa_register 7
 6209 0006 7860     		str	r0, [r7, #4]
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 182


3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 6210              		.loc 1 3916 13
 6211 0008 7B68     		ldr	r3, [r7, #4]
 6212 000a 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 6213              		.loc 1 3916 6
 6214 000e 002B     		cmp	r3, #0
 6215 0010 08D1     		bne	.L388
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 6216              		.loc 1 3920 21
 6217 0012 7B68     		ldr	r3, [r7, #4]
 6218 0014 1B6B     		ldr	r3, [r3, #48]
 6219              		.loc 1 3920 5
 6220 0016 1846     		mov	r0, r3
 6221 0018 FFF7FEFF 		bl	vPortFree
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 6222              		.loc 1 3921 5
 6223 001c 7868     		ldr	r0, [r7, #4]
 6224 001e FFF7FEFF 		bl	vPortFree
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 183


3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6225              		.loc 1 3938 2
 6226 0022 19E0     		b	.L392
 6227              	.L388:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6228              		.loc 1 3923 18
 6229 0024 7B68     		ldr	r3, [r7, #4]
 6230 0026 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6231              		.loc 1 3923 11
 6232 002a 012B     		cmp	r3, #1
 6233 002c 03D1     		bne	.L390
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6234              		.loc 1 3927 5
 6235 002e 7868     		ldr	r0, [r7, #4]
 6236 0030 FFF7FEFF 		bl	vPortFree
 6237              		.loc 1 3938 2
 6238 0034 10E0     		b	.L392
 6239              	.L390:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6240              		.loc 1 3933 5
 6241 0036 7B68     		ldr	r3, [r7, #4]
 6242 0038 93F86130 		ldrb	r3, [r3, #97]	@ zero_extendqisi2
 6243 003c 022B     		cmp	r3, #2
 6244 003e 0BD0     		beq	.L392
 6245              	.LBB221:
 6246              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6247              		.loc 2 195 2
 6248              		.syntax unified
 6249              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6250 0040 4FF05003 			mov r3, #80												
 6251 0044 83F31188 		msr basepri, r3											
 6252 0048 BFF36F8F 		isb														
 6253 004c BFF34F8F 		dsb														
 6254              	
 6255              	@ 0 "" 2
 6256              		.thumb
 6257              		.syntax unified
 6258 0050 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6259              		.loc 2 203 1
 6260 0052 00BF     		nop
 6261              	.L391:
 6262              	.LBE222:
 6263              	.LBE221:
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6264              		.loc 1 3933 5
 6265 0054 00BF     		nop
 6266 0056 FDE7     		b	.L391
 6267              	.L392:
 6268              		.loc 1 3938 2
 6269 0058 00BF     		nop
 6270 005a 1037     		adds	r7, r7, #16
 6271              	.LCFI248:
 6272              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 184


 6273 005c BD46     		mov	sp, r7
 6274              	.LCFI249:
 6275              		.cfi_def_cfa_register 13
 6276              		@ sp needed
 6277 005e 80BD     		pop	{r7, pc}
 6278              		.cfi_endproc
 6279              	.LFE52:
 6281              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 6282              		.align	1
 6283              		.syntax unified
 6284              		.thumb
 6285              		.thumb_func
 6287              	prvResetNextTaskUnblockTime:
 6288              	.LFB53:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6289              		.loc 1 3944 1
 6290              		.cfi_startproc
 6291              		@ args = 0, pretend = 0, frame = 8
 6292              		@ frame_needed = 1, uses_anonymous_args = 0
 6293              		@ link register save eliminated.
 6294 0000 80B4     		push	{r7}
 6295              	.LCFI250:
 6296              		.cfi_def_cfa_offset 4
 6297              		.cfi_offset 7, -4
 6298 0002 83B0     		sub	sp, sp, #12
 6299              	.LCFI251:
 6300              		.cfi_def_cfa_offset 16
 6301 0004 00AF     		add	r7, sp, #0
 6302              	.LCFI252:
 6303              		.cfi_def_cfa_register 7
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6304              		.loc 1 3947 6
 6305 0006 0C4B     		ldr	r3, .L397
 6306 0008 1B68     		ldr	r3, [r3]
 6307 000a 1B68     		ldr	r3, [r3]
 6308              		.loc 1 3947 4
 6309 000c 002B     		cmp	r3, #0
 6310 000e 04D1     		bne	.L394
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 6311              		.loc 1 3953 24
 6312 0010 0A4B     		ldr	r3, .L397+4
 6313 0012 4FF0FF32 		mov	r2, #-1
 6314 0016 1A60     		str	r2, [r3]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 185


3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6315              		.loc 1 3964 1
 6316 0018 08E0     		b	.L396
 6317              	.L394:
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6318              		.loc 1 3961 15
 6319 001a 074B     		ldr	r3, .L397
 6320 001c 1B68     		ldr	r3, [r3]
 6321 001e DB68     		ldr	r3, [r3, #12]
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6322              		.loc 1 3961 13
 6323 0020 DB68     		ldr	r3, [r3, #12]
 6324 0022 7B60     		str	r3, [r7, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6325              		.loc 1 3962 26
 6326 0024 7B68     		ldr	r3, [r7, #4]
 6327 0026 5B68     		ldr	r3, [r3, #4]
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6328              		.loc 1 3962 24
 6329 0028 044A     		ldr	r2, .L397+4
 6330 002a 1360     		str	r3, [r2]
 6331              	.L396:
 6332              		.loc 1 3964 1
 6333 002c 00BF     		nop
 6334 002e 0C37     		adds	r7, r7, #12
 6335              	.LCFI253:
 6336              		.cfi_def_cfa_offset 4
 6337 0030 BD46     		mov	sp, r7
 6338              	.LCFI254:
 6339              		.cfi_def_cfa_register 13
 6340              		@ sp needed
 6341 0032 5DF8047B 		ldr	r7, [sp], #4
 6342              	.LCFI255:
 6343              		.cfi_restore 7
 6344              		.cfi_def_cfa_offset 0
 6345 0036 7047     		bx	lr
 6346              	.L398:
 6347              		.align	2
 6348              	.L397:
 6349 0038 00000000 		.word	pxDelayedTaskList
 6350 003c 00000000 		.word	xNextTaskUnblockTime
 6351              		.cfi_endproc
 6352              	.LFE53:
 6354              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6355              		.align	1
 6356              		.global	xTaskGetCurrentTaskHandle
 6357              		.syntax unified
 6358              		.thumb
 6359              		.thumb_func
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 186


 6361              	xTaskGetCurrentTaskHandle:
 6362              	.LFB54:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6363              		.loc 1 3970 2
 6364              		.cfi_startproc
 6365              		@ args = 0, pretend = 0, frame = 8
 6366              		@ frame_needed = 1, uses_anonymous_args = 0
 6367              		@ link register save eliminated.
 6368 0000 80B4     		push	{r7}
 6369              	.LCFI256:
 6370              		.cfi_def_cfa_offset 4
 6371              		.cfi_offset 7, -4
 6372 0002 83B0     		sub	sp, sp, #12
 6373              	.LCFI257:
 6374              		.cfi_def_cfa_offset 16
 6375 0004 00AF     		add	r7, sp, #0
 6376              	.LCFI258:
 6377              		.cfi_def_cfa_register 7
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 6378              		.loc 1 3976 11
 6379 0006 054B     		ldr	r3, .L401
 6380 0008 1B68     		ldr	r3, [r3]
 6381 000a 7B60     		str	r3, [r7, #4]
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6382              		.loc 1 3978 10
 6383 000c 7B68     		ldr	r3, [r7, #4]
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6384              		.loc 1 3979 2
 6385 000e 1846     		mov	r0, r3
 6386 0010 0C37     		adds	r7, r7, #12
 6387              	.LCFI259:
 6388              		.cfi_def_cfa_offset 4
 6389 0012 BD46     		mov	sp, r7
 6390              	.LCFI260:
 6391              		.cfi_def_cfa_register 13
 6392              		@ sp needed
 6393 0014 5DF8047B 		ldr	r7, [sp], #4
 6394              	.LCFI261:
 6395              		.cfi_restore 7
 6396              		.cfi_def_cfa_offset 0
 6397 0018 7047     		bx	lr
 6398              	.L402:
 6399 001a 00BF     		.align	2
 6400              	.L401:
 6401 001c 00000000 		.word	pxCurrentTCB
 6402              		.cfi_endproc
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 187


 6403              	.LFE54:
 6405              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6406              		.align	1
 6407              		.global	xTaskGetSchedulerState
 6408              		.syntax unified
 6409              		.thumb
 6410              		.thumb_func
 6412              	xTaskGetSchedulerState:
 6413              	.LFB55:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6414              		.loc 1 3987 2
 6415              		.cfi_startproc
 6416              		@ args = 0, pretend = 0, frame = 8
 6417              		@ frame_needed = 1, uses_anonymous_args = 0
 6418              		@ link register save eliminated.
 6419 0000 80B4     		push	{r7}
 6420              	.LCFI262:
 6421              		.cfi_def_cfa_offset 4
 6422              		.cfi_offset 7, -4
 6423 0002 83B0     		sub	sp, sp, #12
 6424              	.LCFI263:
 6425              		.cfi_def_cfa_offset 16
 6426 0004 00AF     		add	r7, sp, #0
 6427              	.LCFI264:
 6428              		.cfi_def_cfa_register 7
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6429              		.loc 1 3990 25
 6430 0006 0B4B     		ldr	r3, .L408
 6431 0008 1B68     		ldr	r3, [r3]
 6432              		.loc 1 3990 5
 6433 000a 002B     		cmp	r3, #0
 6434 000c 02D1     		bne	.L404
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6435              		.loc 1 3992 12
 6436 000e 0123     		movs	r3, #1
 6437 0010 7B60     		str	r3, [r7, #4]
 6438 0012 08E0     		b	.L405
 6439              	.L404:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6440              		.loc 1 3996 29
 6441 0014 084B     		ldr	r3, .L408+4
 6442 0016 1B68     		ldr	r3, [r3]
 6443              		.loc 1 3996 6
 6444 0018 002B     		cmp	r3, #0
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 188


 6445 001a 02D1     		bne	.L406
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6446              		.loc 1 3998 13
 6447 001c 0223     		movs	r3, #2
 6448 001e 7B60     		str	r3, [r7, #4]
 6449 0020 01E0     		b	.L405
 6450              	.L406:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6451              		.loc 1 4002 13
 6452 0022 0023     		movs	r3, #0
 6453 0024 7B60     		str	r3, [r7, #4]
 6454              	.L405:
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6455              		.loc 1 4006 10
 6456 0026 7B68     		ldr	r3, [r7, #4]
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6457              		.loc 1 4007 2
 6458 0028 1846     		mov	r0, r3
 6459 002a 0C37     		adds	r7, r7, #12
 6460              	.LCFI265:
 6461              		.cfi_def_cfa_offset 4
 6462 002c BD46     		mov	sp, r7
 6463              	.LCFI266:
 6464              		.cfi_def_cfa_register 13
 6465              		@ sp needed
 6466 002e 5DF8047B 		ldr	r7, [sp], #4
 6467              	.LCFI267:
 6468              		.cfi_restore 7
 6469              		.cfi_def_cfa_offset 0
 6470 0032 7047     		bx	lr
 6471              	.L409:
 6472              		.align	2
 6473              	.L408:
 6474 0034 00000000 		.word	xSchedulerRunning
 6475 0038 00000000 		.word	uxSchedulerSuspended
 6476              		.cfi_endproc
 6477              	.LFE55:
 6479              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6480              		.align	1
 6481              		.global	xTaskPriorityInherit
 6482              		.syntax unified
 6483              		.thumb
 6484              		.thumb_func
 6486              	xTaskPriorityInherit:
 6487              	.LFB56:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 189


4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6488              		.loc 1 4015 2
 6489              		.cfi_startproc
 6490              		@ args = 0, pretend = 0, frame = 16
 6491              		@ frame_needed = 1, uses_anonymous_args = 0
 6492 0000 80B5     		push	{r7, lr}
 6493              	.LCFI268:
 6494              		.cfi_def_cfa_offset 8
 6495              		.cfi_offset 7, -8
 6496              		.cfi_offset 14, -4
 6497 0002 84B0     		sub	sp, sp, #16
 6498              	.LCFI269:
 6499              		.cfi_def_cfa_offset 24
 6500 0004 00AF     		add	r7, sp, #0
 6501              	.LCFI270:
 6502              		.cfi_def_cfa_register 7
 6503 0006 7860     		str	r0, [r7, #4]
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6504              		.loc 1 4016 16
 6505 0008 7B68     		ldr	r3, [r7, #4]
 6506 000a BB60     		str	r3, [r7, #8]
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6507              		.loc 1 4017 13
 6508 000c 0023     		movs	r3, #0
 6509 000e FB60     		str	r3, [r7, #12]
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6510              		.loc 1 4022 5
 6511 0010 7B68     		ldr	r3, [r7, #4]
 6512 0012 002B     		cmp	r3, #0
 6513 0014 51D0     		beq	.L411
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6514              		.loc 1 4027 24
 6515 0016 BB68     		ldr	r3, [r7, #8]
 6516 0018 DA6A     		ldr	r2, [r3, #44]
 6517              		.loc 1 4027 51
 6518 001a 2A4B     		ldr	r3, .L418
 6519 001c 1B68     		ldr	r3, [r3]
 6520 001e DB6A     		ldr	r3, [r3, #44]
 6521              		.loc 1 4027 6
 6522 0020 9A42     		cmp	r2, r3
 6523 0022 41D2     		bcs	.L412
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6524              		.loc 1 4032 11
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 190


 6525 0024 BB68     		ldr	r3, [r7, #8]
 6526 0026 9B69     		ldr	r3, [r3, #24]
 6527              		.loc 1 4032 7
 6528 0028 002B     		cmp	r3, #0
 6529 002a 06DB     		blt	.L413
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6530              		.loc 1 4034 6
 6531 002c 254B     		ldr	r3, .L418
 6532 002e 1B68     		ldr	r3, [r3]
 6533 0030 DB6A     		ldr	r3, [r3, #44]
 6534 0032 C3F13802 		rsb	r2, r3, #56
 6535 0036 BB68     		ldr	r3, [r7, #8]
 6536 0038 9A61     		str	r2, [r3, #24]
 6537              	.L413:
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6538              		.loc 1 4043 9
 6539 003a BB68     		ldr	r3, [r7, #8]
 6540 003c 5969     		ldr	r1, [r3, #20]
 6541 003e BB68     		ldr	r3, [r7, #8]
 6542 0040 DA6A     		ldr	r2, [r3, #44]
 6543 0042 1346     		mov	r3, r2
 6544 0044 9B00     		lsls	r3, r3, #2
 6545 0046 1344     		add	r3, r3, r2
 6546 0048 9B00     		lsls	r3, r3, #2
 6547 004a 1F4A     		ldr	r2, .L418+4
 6548 004c 1344     		add	r3, r3, r2
 6549              		.loc 1 4043 7
 6550 004e 9942     		cmp	r1, r3
 6551 0050 22D1     		bne	.L414
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6552              		.loc 1 4045 10
 6553 0052 BB68     		ldr	r3, [r7, #8]
 6554 0054 0433     		adds	r3, r3, #4
 6555 0056 1846     		mov	r0, r3
 6556 0058 FFF7FEFF 		bl	uxListRemove
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 191


4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6557              		.loc 1 4058 49
 6558 005c 194B     		ldr	r3, .L418
 6559 005e 1B68     		ldr	r3, [r3]
 6560 0060 DA6A     		ldr	r2, [r3, #44]
 6561              		.loc 1 4058 35
 6562 0062 BB68     		ldr	r3, [r7, #8]
 6563 0064 DA62     		str	r2, [r3, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6564              		.loc 1 4059 6
 6565 0066 BB68     		ldr	r3, [r7, #8]
 6566 0068 DA6A     		ldr	r2, [r3, #44]
 6567 006a 184B     		ldr	r3, .L418+8
 6568 006c 1B68     		ldr	r3, [r3]
 6569 006e 9A42     		cmp	r2, r3
 6570 0070 03D9     		bls	.L415
 6571              		.loc 1 4059 6 is_stmt 0 discriminator 1
 6572 0072 BB68     		ldr	r3, [r7, #8]
 6573 0074 DB6A     		ldr	r3, [r3, #44]
 6574 0076 154A     		ldr	r2, .L418+8
 6575 0078 1360     		str	r3, [r2]
 6576              	.L415:
 6577              		.loc 1 4059 6 discriminator 3
 6578 007a BB68     		ldr	r3, [r7, #8]
 6579 007c DA6A     		ldr	r2, [r3, #44]
 6580 007e 1346     		mov	r3, r2
 6581 0080 9B00     		lsls	r3, r3, #2
 6582 0082 1344     		add	r3, r3, r2
 6583 0084 9B00     		lsls	r3, r3, #2
 6584 0086 104A     		ldr	r2, .L418+4
 6585 0088 1A44     		add	r2, r2, r3
 6586 008a BB68     		ldr	r3, [r7, #8]
 6587 008c 0433     		adds	r3, r3, #4
 6588 008e 1946     		mov	r1, r3
 6589 0090 1046     		mov	r0, r2
 6590 0092 FFF7FEFF 		bl	vListInsertEnd
 6591 0096 04E0     		b	.L416
 6592              	.L414:
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6593              		.loc 1 4064 49 is_stmt 1
 6594 0098 0A4B     		ldr	r3, .L418
 6595 009a 1B68     		ldr	r3, [r3]
 6596 009c DA6A     		ldr	r2, [r3, #44]
 6597              		.loc 1 4064 35
 6598 009e BB68     		ldr	r3, [r7, #8]
 6599 00a0 DA62     		str	r2, [r3, #44]
 6600              	.L416:
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 192


 6601              		.loc 1 4070 13
 6602 00a2 0123     		movs	r3, #1
 6603 00a4 FB60     		str	r3, [r7, #12]
 6604 00a6 08E0     		b	.L411
 6605              	.L412:
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6606              		.loc 1 4074 25
 6607 00a8 BB68     		ldr	r3, [r7, #8]
 6608 00aa 1A6D     		ldr	r2, [r3, #80]
 6609              		.loc 1 4074 56
 6610 00ac 054B     		ldr	r3, .L418
 6611 00ae 1B68     		ldr	r3, [r3]
 6612 00b0 DB6A     		ldr	r3, [r3, #44]
 6613              		.loc 1 4074 7
 6614 00b2 9A42     		cmp	r2, r3
 6615 00b4 01D2     		bcs	.L411
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6616              		.loc 1 4083 14
 6617 00b6 0123     		movs	r3, #1
 6618 00b8 FB60     		str	r3, [r7, #12]
 6619              	.L411:
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6620              		.loc 1 4096 10
 6621 00ba FB68     		ldr	r3, [r7, #12]
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6622              		.loc 1 4097 2
 6623 00bc 1846     		mov	r0, r3
 6624 00be 1037     		adds	r7, r7, #16
 6625              	.LCFI271:
 6626              		.cfi_def_cfa_offset 8
 6627 00c0 BD46     		mov	sp, r7
 6628              	.LCFI272:
 6629              		.cfi_def_cfa_register 13
 6630              		@ sp needed
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 193


 6631 00c2 80BD     		pop	{r7, pc}
 6632              	.L419:
 6633              		.align	2
 6634              	.L418:
 6635 00c4 00000000 		.word	pxCurrentTCB
 6636 00c8 00000000 		.word	pxReadyTasksLists
 6637 00cc 00000000 		.word	uxTopReadyPriority
 6638              		.cfi_endproc
 6639              	.LFE56:
 6641              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6642              		.align	1
 6643              		.global	xTaskPriorityDisinherit
 6644              		.syntax unified
 6645              		.thumb
 6646              		.thumb_func
 6648              	xTaskPriorityDisinherit:
 6649              	.LFB57:
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6650              		.loc 1 4105 2
 6651              		.cfi_startproc
 6652              		@ args = 0, pretend = 0, frame = 24
 6653              		@ frame_needed = 1, uses_anonymous_args = 0
 6654 0000 80B5     		push	{r7, lr}
 6655              	.LCFI273:
 6656              		.cfi_def_cfa_offset 8
 6657              		.cfi_offset 7, -8
 6658              		.cfi_offset 14, -4
 6659 0002 86B0     		sub	sp, sp, #24
 6660              	.LCFI274:
 6661              		.cfi_def_cfa_offset 32
 6662 0004 00AF     		add	r7, sp, #0
 6663              	.LCFI275:
 6664              		.cfi_def_cfa_register 7
 6665 0006 7860     		str	r0, [r7, #4]
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6666              		.loc 1 4106 16
 6667 0008 7B68     		ldr	r3, [r7, #4]
 6668 000a 3B61     		str	r3, [r7, #16]
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6669              		.loc 1 4107 13
 6670 000c 0023     		movs	r3, #0
 6671 000e 7B61     		str	r3, [r7, #20]
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6672              		.loc 1 4109 5
 6673 0010 7B68     		ldr	r3, [r7, #4]
 6674 0012 002B     		cmp	r3, #0
 6675 0014 58D0     		beq	.L421
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 194


4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6676              		.loc 1 4115 4
 6677 0016 2F4B     		ldr	r3, .L428
 6678 0018 1B68     		ldr	r3, [r3]
 6679 001a 3A69     		ldr	r2, [r7, #16]
 6680 001c 9A42     		cmp	r2, r3
 6681 001e 0BD0     		beq	.L422
 6682              	.LBB223:
 6683              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6684              		.loc 2 195 2
 6685              		.syntax unified
 6686              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6687 0020 4FF05003 			mov r3, #80												
 6688 0024 83F31188 		msr basepri, r3											
 6689 0028 BFF36F8F 		isb														
 6690 002c BFF34F8F 		dsb														
 6691              	
 6692              	@ 0 "" 2
 6693              		.thumb
 6694              		.syntax unified
 6695 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6696              		.loc 2 203 1
 6697 0032 00BF     		nop
 6698              	.L423:
 6699              	.LBE224:
 6700              	.LBE223:
 6701              		.loc 1 4115 4
 6702 0034 00BF     		nop
 6703 0036 FDE7     		b	.L423
 6704              	.L422:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6705              		.loc 1 4116 4
 6706 0038 3B69     		ldr	r3, [r7, #16]
 6707 003a 5B6D     		ldr	r3, [r3, #84]
 6708 003c 002B     		cmp	r3, #0
 6709 003e 0BD1     		bne	.L424
 6710              	.LBB225:
 6711              	.LBB226:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6712              		.loc 2 195 2
 6713              		.syntax unified
 6714              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6715 0040 4FF05003 			mov r3, #80												
 6716 0044 83F31188 		msr basepri, r3											
 6717 0048 BFF36F8F 		isb														
 6718 004c BFF34F8F 		dsb														
 6719              	
 6720              	@ 0 "" 2
 6721              		.thumb
 6722              		.syntax unified
 6723 0050 BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 195


 6724              		.loc 2 203 1
 6725 0052 00BF     		nop
 6726              	.L425:
 6727              	.LBE226:
 6728              	.LBE225:
 6729              		.loc 1 4116 4
 6730 0054 00BF     		nop
 6731 0056 FDE7     		b	.L425
 6732              	.L424:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6733              		.loc 1 4117 11
 6734 0058 3B69     		ldr	r3, [r7, #16]
 6735 005a 5B6D     		ldr	r3, [r3, #84]
 6736              		.loc 1 4117 28
 6737 005c 5A1E     		subs	r2, r3, #1
 6738 005e 3B69     		ldr	r3, [r7, #16]
 6739 0060 5A65     		str	r2, [r3, #84]
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6740              		.loc 1 4121 13
 6741 0062 3B69     		ldr	r3, [r7, #16]
 6742 0064 DA6A     		ldr	r2, [r3, #44]
 6743              		.loc 1 4121 34
 6744 0066 3B69     		ldr	r3, [r7, #16]
 6745 0068 1B6D     		ldr	r3, [r3, #80]
 6746              		.loc 1 4121 6
 6747 006a 9A42     		cmp	r2, r3
 6748 006c 2CD0     		beq	.L421
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6749              		.loc 1 4124 14
 6750 006e 3B69     		ldr	r3, [r7, #16]
 6751 0070 5B6D     		ldr	r3, [r3, #84]
 6752              		.loc 1 4124 7
 6753 0072 002B     		cmp	r3, #0
 6754 0074 28D1     		bne	.L421
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6755              		.loc 1 4131 10
 6756 0076 3B69     		ldr	r3, [r7, #16]
 6757 0078 0433     		adds	r3, r3, #4
 6758 007a 1846     		mov	r0, r3
 6759 007c FFF7FEFF 		bl	uxListRemove
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 196


4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6760              		.loc 1 4143 31
 6761 0080 3B69     		ldr	r3, [r7, #16]
 6762 0082 1A6D     		ldr	r2, [r3, #80]
 6763              		.loc 1 4143 24
 6764 0084 3B69     		ldr	r3, [r7, #16]
 6765 0086 DA62     		str	r2, [r3, #44]
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6766              		.loc 1 4148 6
 6767 0088 3B69     		ldr	r3, [r7, #16]
 6768 008a DB6A     		ldr	r3, [r3, #44]
 6769 008c C3F13802 		rsb	r2, r3, #56
 6770 0090 3B69     		ldr	r3, [r7, #16]
 6771 0092 9A61     		str	r2, [r3, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6772              		.loc 1 4149 6
 6773 0094 3B69     		ldr	r3, [r7, #16]
 6774 0096 DA6A     		ldr	r2, [r3, #44]
 6775 0098 0F4B     		ldr	r3, .L428+4
 6776 009a 1B68     		ldr	r3, [r3]
 6777 009c 9A42     		cmp	r2, r3
 6778 009e 03D9     		bls	.L426
 6779              		.loc 1 4149 6 is_stmt 0 discriminator 1
 6780 00a0 3B69     		ldr	r3, [r7, #16]
 6781 00a2 DB6A     		ldr	r3, [r3, #44]
 6782 00a4 0C4A     		ldr	r2, .L428+4
 6783 00a6 1360     		str	r3, [r2]
 6784              	.L426:
 6785              		.loc 1 4149 6 discriminator 3
 6786 00a8 3B69     		ldr	r3, [r7, #16]
 6787 00aa DA6A     		ldr	r2, [r3, #44]
 6788 00ac 1346     		mov	r3, r2
 6789 00ae 9B00     		lsls	r3, r3, #2
 6790 00b0 1344     		add	r3, r3, r2
 6791 00b2 9B00     		lsls	r3, r3, #2
 6792 00b4 094A     		ldr	r2, .L428+8
 6793 00b6 1A44     		add	r2, r2, r3
 6794 00b8 3B69     		ldr	r3, [r7, #16]
 6795 00ba 0433     		adds	r3, r3, #4
 6796 00bc 1946     		mov	r1, r3
 6797 00be 1046     		mov	r0, r2
 6798 00c0 FFF7FEFF 		bl	vListInsertEnd
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 197


4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6799              		.loc 1 4159 14 is_stmt 1
 6800 00c4 0123     		movs	r3, #1
 6801 00c6 7B61     		str	r3, [r7, #20]
 6802              	.L421:
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6803              		.loc 1 4176 10
 6804 00c8 7B69     		ldr	r3, [r7, #20]
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6805              		.loc 1 4177 2
 6806 00ca 1846     		mov	r0, r3
 6807 00cc 1837     		adds	r7, r7, #24
 6808              	.LCFI276:
 6809              		.cfi_def_cfa_offset 8
 6810 00ce BD46     		mov	sp, r7
 6811              	.LCFI277:
 6812              		.cfi_def_cfa_register 13
 6813              		@ sp needed
 6814 00d0 80BD     		pop	{r7, pc}
 6815              	.L429:
 6816 00d2 00BF     		.align	2
 6817              	.L428:
 6818 00d4 00000000 		.word	pxCurrentTCB
 6819 00d8 00000000 		.word	uxTopReadyPriority
 6820 00dc 00000000 		.word	pxReadyTasksLists
 6821              		.cfi_endproc
 6822              	.LFE57:
 6824              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6825              		.align	1
 6826              		.global	vTaskPriorityDisinheritAfterTimeout
 6827              		.syntax unified
 6828              		.thumb
 6829              		.thumb_func
 6831              	vTaskPriorityDisinheritAfterTimeout:
 6832              	.LFB58:
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 198


4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6833              		.loc 1 4185 2
 6834              		.cfi_startproc
 6835              		@ args = 0, pretend = 0, frame = 32
 6836              		@ frame_needed = 1, uses_anonymous_args = 0
 6837 0000 80B5     		push	{r7, lr}
 6838              	.LCFI278:
 6839              		.cfi_def_cfa_offset 8
 6840              		.cfi_offset 7, -8
 6841              		.cfi_offset 14, -4
 6842 0002 88B0     		sub	sp, sp, #32
 6843              	.LCFI279:
 6844              		.cfi_def_cfa_offset 40
 6845 0004 00AF     		add	r7, sp, #0
 6846              	.LCFI280:
 6847              		.cfi_def_cfa_register 7
 6848 0006 7860     		str	r0, [r7, #4]
 6849 0008 3960     		str	r1, [r7]
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6850              		.loc 1 4186 16
 6851 000a 7B68     		ldr	r3, [r7, #4]
 6852 000c BB61     		str	r3, [r7, #24]
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6853              		.loc 1 4188 20
 6854 000e 0123     		movs	r3, #1
 6855 0010 7B61     		str	r3, [r7, #20]
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6856              		.loc 1 4190 5
 6857 0012 7B68     		ldr	r3, [r7, #4]
 6858 0014 002B     		cmp	r3, #0
 6859 0016 6CD0     		beq	.L440
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6860              		.loc 1 4194 4
 6861 0018 BB69     		ldr	r3, [r7, #24]
 6862 001a 5B6D     		ldr	r3, [r3, #84]
 6863 001c 002B     		cmp	r3, #0
 6864 001e 0BD1     		bne	.L432
 6865              	.LBB227:
 6866              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6867              		.loc 2 195 2
 6868              		.syntax unified
 6869              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6870 0020 4FF05003 			mov r3, #80												
 6871 0024 83F31188 		msr basepri, r3											
 6872 0028 BFF36F8F 		isb														
 6873 002c BFF34F8F 		dsb														
 6874              	
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 199


 6875              	@ 0 "" 2
 6876              		.thumb
 6877              		.syntax unified
 6878 0030 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6879              		.loc 2 203 1
 6880 0032 00BF     		nop
 6881              	.L433:
 6882              	.LBE228:
 6883              	.LBE227:
 6884              		.loc 1 4194 4
 6885 0034 00BF     		nop
 6886 0036 FDE7     		b	.L433
 6887              	.L432:
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 6888              		.loc 1 4200 13
 6889 0038 BB69     		ldr	r3, [r7, #24]
 6890 003a 1B6D     		ldr	r3, [r3, #80]
 6891              		.loc 1 4200 6
 6892 003c 3A68     		ldr	r2, [r7]
 6893 003e 9A42     		cmp	r2, r3
 6894 0040 02D9     		bls	.L434
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 6895              		.loc 1 4202 21
 6896 0042 3B68     		ldr	r3, [r7]
 6897 0044 FB61     		str	r3, [r7, #28]
 6898 0046 02E0     		b	.L435
 6899              	.L434:
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 6900              		.loc 1 4206 21
 6901 0048 BB69     		ldr	r3, [r7, #24]
 6902 004a 1B6D     		ldr	r3, [r3, #80]
 6903 004c FB61     		str	r3, [r7, #28]
 6904              	.L435:
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 6905              		.loc 1 4210 13
 6906 004e BB69     		ldr	r3, [r7, #24]
 6907 0050 DB6A     		ldr	r3, [r3, #44]
 6908              		.loc 1 4210 6
 6909 0052 FA69     		ldr	r2, [r7, #28]
 6910 0054 9A42     		cmp	r2, r3
 6911 0056 4CD0     		beq	.L440
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 200


4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 6912              		.loc 1 4216 14
 6913 0058 BB69     		ldr	r3, [r7, #24]
 6914 005a 5B6D     		ldr	r3, [r3, #84]
 6915              		.loc 1 4216 7
 6916 005c 7A69     		ldr	r2, [r7, #20]
 6917 005e 9A42     		cmp	r2, r3
 6918 0060 47D1     		bne	.L440
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 6919              		.loc 1 4221 6
 6920 0062 264B     		ldr	r3, .L441
 6921 0064 1B68     		ldr	r3, [r3]
 6922 0066 BA69     		ldr	r2, [r7, #24]
 6923 0068 9A42     		cmp	r2, r3
 6924 006a 0BD1     		bne	.L436
 6925              	.LBB229:
 6926              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6927              		.loc 2 195 2
 6928              		.syntax unified
 6929              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6930 006c 4FF05003 			mov r3, #80												
 6931 0070 83F31188 		msr basepri, r3											
 6932 0074 BFF36F8F 		isb														
 6933 0078 BFF34F8F 		dsb														
 6934              	
 6935              	@ 0 "" 2
 6936              		.thumb
 6937              		.syntax unified
 6938 007c BB60     		str	r3, [r7, #8]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6939              		.loc 2 203 1
 6940 007e 00BF     		nop
 6941              	.L437:
 6942              	.LBE230:
 6943              	.LBE229:
 6944              		.loc 1 4221 6
 6945 0080 00BF     		nop
 6946 0082 FDE7     		b	.L437
 6947              	.L436:
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6948              		.loc 1 4227 28
 6949 0084 BB69     		ldr	r3, [r7, #24]
 6950 0086 DB6A     		ldr	r3, [r3, #44]
 6951 0088 3B61     		str	r3, [r7, #16]
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 201


 6952              		.loc 1 4228 24
 6953 008a BB69     		ldr	r3, [r7, #24]
 6954 008c FA69     		ldr	r2, [r7, #28]
 6955 008e DA62     		str	r2, [r3, #44]
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 6956              		.loc 1 4232 12
 6957 0090 BB69     		ldr	r3, [r7, #24]
 6958 0092 9B69     		ldr	r3, [r3, #24]
 6959              		.loc 1 4232 8
 6960 0094 002B     		cmp	r3, #0
 6961 0096 04DB     		blt	.L438
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 6962              		.loc 1 4234 7
 6963 0098 FB69     		ldr	r3, [r7, #28]
 6964 009a C3F13802 		rsb	r2, r3, #56
 6965 009e BB69     		ldr	r3, [r7, #24]
 6966 00a0 9A61     		str	r2, [r3, #24]
 6967              	.L438:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 6968              		.loc 1 4247 10
 6969 00a2 BB69     		ldr	r3, [r7, #24]
 6970 00a4 5969     		ldr	r1, [r3, #20]
 6971 00a6 3A69     		ldr	r2, [r7, #16]
 6972 00a8 1346     		mov	r3, r2
 6973 00aa 9B00     		lsls	r3, r3, #2
 6974 00ac 1344     		add	r3, r3, r2
 6975 00ae 9B00     		lsls	r3, r3, #2
 6976 00b0 134A     		ldr	r2, .L441+4
 6977 00b2 1344     		add	r3, r3, r2
 6978              		.loc 1 4247 8
 6979 00b4 9942     		cmp	r1, r3
 6980 00b6 1CD1     		bne	.L440
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6981              		.loc 1 4249 11
 6982 00b8 BB69     		ldr	r3, [r7, #24]
 6983 00ba 0433     		adds	r3, r3, #4
 6984 00bc 1846     		mov	r0, r3
 6985 00be FFF7FEFF 		bl	uxListRemove
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 202


4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 6986              		.loc 1 4261 7
 6987 00c2 BB69     		ldr	r3, [r7, #24]
 6988 00c4 DA6A     		ldr	r2, [r3, #44]
 6989 00c6 0F4B     		ldr	r3, .L441+8
 6990 00c8 1B68     		ldr	r3, [r3]
 6991 00ca 9A42     		cmp	r2, r3
 6992 00cc 03D9     		bls	.L439
 6993              		.loc 1 4261 7 is_stmt 0 discriminator 1
 6994 00ce BB69     		ldr	r3, [r7, #24]
 6995 00d0 DB6A     		ldr	r3, [r3, #44]
 6996 00d2 0C4A     		ldr	r2, .L441+8
 6997 00d4 1360     		str	r3, [r2]
 6998              	.L439:
 6999              		.loc 1 4261 7 discriminator 3
 7000 00d6 BB69     		ldr	r3, [r7, #24]
 7001 00d8 DA6A     		ldr	r2, [r3, #44]
 7002 00da 1346     		mov	r3, r2
 7003 00dc 9B00     		lsls	r3, r3, #2
 7004 00de 1344     		add	r3, r3, r2
 7005 00e0 9B00     		lsls	r3, r3, #2
 7006 00e2 074A     		ldr	r2, .L441+4
 7007 00e4 1A44     		add	r2, r2, r3
 7008 00e6 BB69     		ldr	r3, [r7, #24]
 7009 00e8 0433     		adds	r3, r3, #4
 7010 00ea 1946     		mov	r1, r3
 7011 00ec 1046     		mov	r0, r2
 7012 00ee FFF7FEFF 		bl	vListInsertEnd
 7013              	.L440:
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 203


4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7014              		.loc 1 4282 2 is_stmt 1
 7015 00f2 00BF     		nop
 7016 00f4 2037     		adds	r7, r7, #32
 7017              	.LCFI281:
 7018              		.cfi_def_cfa_offset 8
 7019 00f6 BD46     		mov	sp, r7
 7020              	.LCFI282:
 7021              		.cfi_def_cfa_register 13
 7022              		@ sp needed
 7023 00f8 80BD     		pop	{r7, pc}
 7024              	.L442:
 7025 00fa 00BF     		.align	2
 7026              	.L441:
 7027 00fc 00000000 		.word	pxCurrentTCB
 7028 0100 00000000 		.word	pxReadyTasksLists
 7029 0104 00000000 		.word	uxTopReadyPriority
 7030              		.cfi_endproc
 7031              	.LFE58:
 7033              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 7034              		.align	1
 7035              		.global	uxTaskResetEventItemValue
 7036              		.syntax unified
 7037              		.thumb
 7038              		.thumb_func
 7040              	uxTaskResetEventItemValue:
 7041              	.LFB59:
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 204


4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 205


4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 206


4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 207


4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 208


4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 209


4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 7042              		.loc 1 4603 1
 7043              		.cfi_startproc
 7044              		@ args = 0, pretend = 0, frame = 8
 7045              		@ frame_needed = 1, uses_anonymous_args = 0
 7046              		@ link register save eliminated.
 7047 0000 80B4     		push	{r7}
 7048              	.LCFI283:
 7049              		.cfi_def_cfa_offset 4
 7050              		.cfi_offset 7, -4
 7051 0002 83B0     		sub	sp, sp, #12
 7052              	.LCFI284:
 7053              		.cfi_def_cfa_offset 16
 7054 0004 00AF     		add	r7, sp, #0
 7055              	.LCFI285:
 7056              		.cfi_def_cfa_register 7
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7057              		.loc 1 4606 13
 7058 0006 094B     		ldr	r3, .L445
 7059 0008 1B68     		ldr	r3, [r3]
 7060              		.loc 1 4606 11
 7061 000a 9B69     		ldr	r3, [r3, #24]
 7062 000c 7B60     		str	r3, [r7, #4]
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 7063              		.loc 1 4610 2
 7064 000e 074B     		ldr	r3, .L445
 7065 0010 1B68     		ldr	r3, [r3]
 7066 0012 DA6A     		ldr	r2, [r3, #44]
 7067 0014 054B     		ldr	r3, .L445
 7068 0016 1B68     		ldr	r3, [r3]
 7069 0018 C2F13802 		rsb	r2, r2, #56
 7070 001c 9A61     		str	r2, [r3, #24]
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 7071              		.loc 1 4612 9
 7072 001e 7B68     		ldr	r3, [r7, #4]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 7073              		.loc 1 4613 1
 7074 0020 1846     		mov	r0, r3
 7075 0022 0C37     		adds	r7, r7, #12
 7076              	.LCFI286:
 7077              		.cfi_def_cfa_offset 4
 7078 0024 BD46     		mov	sp, r7
 7079              	.LCFI287:
 7080              		.cfi_def_cfa_register 13
 7081              		@ sp needed
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 210


 7082 0026 5DF8047B 		ldr	r7, [sp], #4
 7083              	.LCFI288:
 7084              		.cfi_restore 7
 7085              		.cfi_def_cfa_offset 0
 7086 002a 7047     		bx	lr
 7087              	.L446:
 7088              		.align	2
 7089              	.L445:
 7090 002c 00000000 		.word	pxCurrentTCB
 7091              		.cfi_endproc
 7092              	.LFE59:
 7094              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7095              		.align	1
 7096              		.global	pvTaskIncrementMutexHeldCount
 7097              		.syntax unified
 7098              		.thumb
 7099              		.thumb_func
 7101              	pvTaskIncrementMutexHeldCount:
 7102              	.LFB60:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7103              		.loc 1 4619 2
 7104              		.cfi_startproc
 7105              		@ args = 0, pretend = 0, frame = 0
 7106              		@ frame_needed = 1, uses_anonymous_args = 0
 7107              		@ link register save eliminated.
 7108 0000 80B4     		push	{r7}
 7109              	.LCFI289:
 7110              		.cfi_def_cfa_offset 4
 7111              		.cfi_offset 7, -4
 7112 0002 00AF     		add	r7, sp, #0
 7113              	.LCFI290:
 7114              		.cfi_def_cfa_register 7
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 7115              		.loc 1 4622 20
 7116 0004 074B     		ldr	r3, .L450
 7117 0006 1B68     		ldr	r3, [r3]
 7118              		.loc 1 4622 5
 7119 0008 002B     		cmp	r3, #0
 7120 000a 04D0     		beq	.L448
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 7121              		.loc 1 4624 18
 7122 000c 054B     		ldr	r3, .L450
 7123 000e 1B68     		ldr	r3, [r3]
 7124 0010 5A6D     		ldr	r2, [r3, #84]
 7125              		.loc 1 4624 35
 7126 0012 0132     		adds	r2, r2, #1
 7127 0014 5A65     		str	r2, [r3, #84]
 7128              	.L448:
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 211


4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 7129              		.loc 1 4627 10
 7130 0016 034B     		ldr	r3, .L450
 7131 0018 1B68     		ldr	r3, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7132              		.loc 1 4628 2
 7133 001a 1846     		mov	r0, r3
 7134 001c BD46     		mov	sp, r7
 7135              	.LCFI291:
 7136              		.cfi_def_cfa_register 13
 7137              		@ sp needed
 7138 001e 5DF8047B 		ldr	r7, [sp], #4
 7139              	.LCFI292:
 7140              		.cfi_restore 7
 7141              		.cfi_def_cfa_offset 0
 7142 0022 7047     		bx	lr
 7143              	.L451:
 7144              		.align	2
 7145              	.L450:
 7146 0024 00000000 		.word	pxCurrentTCB
 7147              		.cfi_endproc
 7148              	.LFE60:
 7150              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 7151              		.align	1
 7152              		.global	ulTaskNotifyTake
 7153              		.syntax unified
 7154              		.thumb
 7155              		.thumb_func
 7157              	ulTaskNotifyTake:
 7158              	.LFB61:
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7159              		.loc 1 4636 2
 7160              		.cfi_startproc
 7161              		@ args = 0, pretend = 0, frame = 16
 7162              		@ frame_needed = 1, uses_anonymous_args = 0
 7163 0000 80B5     		push	{r7, lr}
 7164              	.LCFI293:
 7165              		.cfi_def_cfa_offset 8
 7166              		.cfi_offset 7, -8
 7167              		.cfi_offset 14, -4
 7168 0002 84B0     		sub	sp, sp, #16
 7169              	.LCFI294:
 7170              		.cfi_def_cfa_offset 24
 7171 0004 00AF     		add	r7, sp, #0
 7172              	.LCFI295:
 7173              		.cfi_def_cfa_register 7
 7174 0006 7860     		str	r0, [r7, #4]
 7175 0008 3960     		str	r1, [r7]
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 212


4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7176              		.loc 1 4639 3
 7177 000a FFF7FEFF 		bl	vPortEnterCritical
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 7178              		.loc 1 4642 20
 7179 000e 1E4B     		ldr	r3, .L457
 7180 0010 1B68     		ldr	r3, [r3]
 7181 0012 DB6D     		ldr	r3, [r3, #92]
 7182              		.loc 1 4642 6
 7183 0014 002B     		cmp	r3, #0
 7184 0016 13D1     		bne	.L453
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7185              		.loc 1 4645 17
 7186 0018 1B4B     		ldr	r3, .L457
 7187 001a 1B68     		ldr	r3, [r3]
 7188              		.loc 1 4645 33
 7189 001c 0122     		movs	r2, #1
 7190 001e 83F86020 		strb	r2, [r3, #96]
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7191              		.loc 1 4647 7
 7192 0022 3B68     		ldr	r3, [r7]
 7193 0024 002B     		cmp	r3, #0
 7194 0026 0BD0     		beq	.L453
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7195              		.loc 1 4649 6
 7196 0028 0121     		movs	r1, #1
 7197 002a 3868     		ldr	r0, [r7]
 7198 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7199              		.loc 1 4656 6
 7200 0030 164B     		ldr	r3, .L457+4
 7201 0032 4FF08052 		mov	r2, #268435456
 7202 0036 1A60     		str	r2, [r3]
 7203              		.syntax unified
 7204              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7205 0038 BFF34F8F 		dsb
 7206              	@ 0 "" 2
 7207              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7208 003c BFF36F8F 		isb
 7209              	@ 0 "" 2
 7210              		.thumb
 7211              		.syntax unified
 7212              	.L453:
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 213


4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7213              		.loc 1 4668 3
 7214 0040 FFF7FEFF 		bl	vPortExitCritical
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7215              		.loc 1 4670 3
 7216 0044 FFF7FEFF 		bl	vPortEnterCritical
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7217              		.loc 1 4673 27
 7218 0048 0F4B     		ldr	r3, .L457
 7219 004a 1B68     		ldr	r3, [r3]
 7220              		.loc 1 4673 13
 7221 004c DB6D     		ldr	r3, [r3, #92]
 7222 004e FB60     		str	r3, [r7, #12]
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 7223              		.loc 1 4675 6
 7224 0050 FB68     		ldr	r3, [r7, #12]
 7225 0052 002B     		cmp	r3, #0
 7226 0054 0CD0     		beq	.L454
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 7227              		.loc 1 4677 7
 7228 0056 7B68     		ldr	r3, [r7, #4]
 7229 0058 002B     		cmp	r3, #0
 7230 005a 04D0     		beq	.L455
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 7231              		.loc 1 4679 18
 7232 005c 0A4B     		ldr	r3, .L457
 7233 005e 1B68     		ldr	r3, [r3]
 7234              		.loc 1 4679 36
 7235 0060 0022     		movs	r2, #0
 7236 0062 DA65     		str	r2, [r3, #92]
 7237 0064 04E0     		b	.L454
 7238              	.L455:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 7239              		.loc 1 4683 18
 7240 0066 084B     		ldr	r3, .L457
 7241 0068 1B68     		ldr	r3, [r3]
 7242              		.loc 1 4683 47
 7243 006a FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 214


 7244 006c 013A     		subs	r2, r2, #1
 7245              		.loc 1 4683 36
 7246 006e DA65     		str	r2, [r3, #92]
 7247              	.L454:
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7248              		.loc 1 4691 16
 7249 0070 054B     		ldr	r3, .L457
 7250 0072 1B68     		ldr	r3, [r3]
 7251              		.loc 1 4691 32
 7252 0074 0022     		movs	r2, #0
 7253 0076 83F86020 		strb	r2, [r3, #96]
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7254              		.loc 1 4693 3
 7255 007a FFF7FEFF 		bl	vPortExitCritical
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 7256              		.loc 1 4695 10
 7257 007e FB68     		ldr	r3, [r7, #12]
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7258              		.loc 1 4696 2
 7259 0080 1846     		mov	r0, r3
 7260 0082 1037     		adds	r7, r7, #16
 7261              	.LCFI296:
 7262              		.cfi_def_cfa_offset 8
 7263 0084 BD46     		mov	sp, r7
 7264              	.LCFI297:
 7265              		.cfi_def_cfa_register 13
 7266              		@ sp needed
 7267 0086 80BD     		pop	{r7, pc}
 7268              	.L458:
 7269              		.align	2
 7270              	.L457:
 7271 0088 00000000 		.word	pxCurrentTCB
 7272 008c 04ED00E0 		.word	-536810236
 7273              		.cfi_endproc
 7274              	.LFE61:
 7276              		.section	.text.xTaskNotifyWait,"ax",%progbits
 7277              		.align	1
 7278              		.global	xTaskNotifyWait
 7279              		.syntax unified
 7280              		.thumb
 7281              		.thumb_func
 7283              	xTaskNotifyWait:
 7284              	.LFB62:
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 215


4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7285              		.loc 1 4704 2
 7286              		.cfi_startproc
 7287              		@ args = 0, pretend = 0, frame = 24
 7288              		@ frame_needed = 1, uses_anonymous_args = 0
 7289 0000 80B5     		push	{r7, lr}
 7290              	.LCFI298:
 7291              		.cfi_def_cfa_offset 8
 7292              		.cfi_offset 7, -8
 7293              		.cfi_offset 14, -4
 7294 0002 86B0     		sub	sp, sp, #24
 7295              	.LCFI299:
 7296              		.cfi_def_cfa_offset 32
 7297 0004 00AF     		add	r7, sp, #0
 7298              	.LCFI300:
 7299              		.cfi_def_cfa_register 7
 7300 0006 F860     		str	r0, [r7, #12]
 7301 0008 B960     		str	r1, [r7, #8]
 7302 000a 7A60     		str	r2, [r7, #4]
 7303 000c 3B60     		str	r3, [r7]
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7304              		.loc 1 4707 3
 7305 000e FFF7FEFF 		bl	vPortEnterCritical
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7306              		.loc 1 4710 20
 7307 0012 264B     		ldr	r3, .L465
 7308 0014 1B68     		ldr	r3, [r3]
 7309 0016 93F86030 		ldrb	r3, [r3, #96]
 7310 001a DBB2     		uxtb	r3, r3
 7311              		.loc 1 4710 6
 7312 001c 022B     		cmp	r3, #2
 7313 001e 1AD0     		beq	.L460
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 7314              		.loc 1 4715 17
 7315 0020 224B     		ldr	r3, .L465
 7316 0022 1B68     		ldr	r3, [r3]
 7317 0024 D96D     		ldr	r1, [r3, #92]
 7318              		.loc 1 4715 38
 7319 0026 FA68     		ldr	r2, [r7, #12]
 7320 0028 D243     		mvns	r2, r2
 7321              		.loc 1 4715 35
 7322 002a 0A40     		ands	r2, r2, r1
 7323 002c DA65     		str	r2, [r3, #92]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7324              		.loc 1 4718 17
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 216


 7325 002e 1F4B     		ldr	r3, .L465
 7326 0030 1B68     		ldr	r3, [r3]
 7327              		.loc 1 4718 33
 7328 0032 0122     		movs	r2, #1
 7329 0034 83F86020 		strb	r2, [r3, #96]
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7330              		.loc 1 4720 7
 7331 0038 3B68     		ldr	r3, [r7]
 7332 003a 002B     		cmp	r3, #0
 7333 003c 0BD0     		beq	.L460
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7334              		.loc 1 4722 6
 7335 003e 0121     		movs	r1, #1
 7336 0040 3868     		ldr	r0, [r7]
 7337 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7338              		.loc 1 4729 6
 7339 0046 1A4B     		ldr	r3, .L465+4
 7340 0048 4FF08052 		mov	r2, #268435456
 7341 004c 1A60     		str	r2, [r3]
 7342              		.syntax unified
 7343              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7344 004e BFF34F8F 		dsb
 7345              	@ 0 "" 2
 7346              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7347 0052 BFF36F8F 		isb
 7348              	@ 0 "" 2
 7349              		.thumb
 7350              		.syntax unified
 7351              	.L460:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7352              		.loc 1 4741 3
 7353 0056 FFF7FEFF 		bl	vPortExitCritical
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7354              		.loc 1 4743 3
 7355 005a FFF7FEFF 		bl	vPortEnterCritical
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 217


4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 7356              		.loc 1 4747 6
 7357 005e 7B68     		ldr	r3, [r7, #4]
 7358 0060 002B     		cmp	r3, #0
 7359 0062 04D0     		beq	.L461
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7360              		.loc 1 4751 41
 7361 0064 114B     		ldr	r3, .L465
 7362 0066 1B68     		ldr	r3, [r3]
 7363 0068 DA6D     		ldr	r2, [r3, #92]
 7364              		.loc 1 4751 27
 7365 006a 7B68     		ldr	r3, [r7, #4]
 7366 006c 1A60     		str	r2, [r3]
 7367              	.L461:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7368              		.loc 1 4758 20
 7369 006e 0F4B     		ldr	r3, .L465
 7370 0070 1B68     		ldr	r3, [r3]
 7371 0072 93F86030 		ldrb	r3, [r3, #96]
 7372 0076 DBB2     		uxtb	r3, r3
 7373              		.loc 1 4758 6
 7374 0078 022B     		cmp	r3, #2
 7375 007a 02D0     		beq	.L462
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 7376              		.loc 1 4761 13
 7377 007c 0023     		movs	r3, #0
 7378 007e 7B61     		str	r3, [r7, #20]
 7379 0080 08E0     		b	.L463
 7380              	.L462:
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7381              		.loc 1 4767 17
 7382 0082 0A4B     		ldr	r3, .L465
 7383 0084 1B68     		ldr	r3, [r3]
 7384 0086 D96D     		ldr	r1, [r3, #92]
 7385              		.loc 1 4767 38
 7386 0088 BA68     		ldr	r2, [r7, #8]
 7387 008a D243     		mvns	r2, r2
 7388              		.loc 1 4767 35
 7389 008c 0A40     		ands	r2, r2, r1
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 218


 7390 008e DA65     		str	r2, [r3, #92]
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7391              		.loc 1 4768 13
 7392 0090 0123     		movs	r3, #1
 7393 0092 7B61     		str	r3, [r7, #20]
 7394              	.L463:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7395              		.loc 1 4771 16
 7396 0094 054B     		ldr	r3, .L465
 7397 0096 1B68     		ldr	r3, [r3]
 7398              		.loc 1 4771 32
 7399 0098 0022     		movs	r2, #0
 7400 009a 83F86020 		strb	r2, [r3, #96]
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7401              		.loc 1 4773 3
 7402 009e FFF7FEFF 		bl	vPortExitCritical
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7403              		.loc 1 4775 10
 7404 00a2 7B69     		ldr	r3, [r7, #20]
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7405              		.loc 1 4776 2
 7406 00a4 1846     		mov	r0, r3
 7407 00a6 1837     		adds	r7, r7, #24
 7408              	.LCFI301:
 7409              		.cfi_def_cfa_offset 8
 7410 00a8 BD46     		mov	sp, r7
 7411              	.LCFI302:
 7412              		.cfi_def_cfa_register 13
 7413              		@ sp needed
 7414 00aa 80BD     		pop	{r7, pc}
 7415              	.L466:
 7416              		.align	2
 7417              	.L465:
 7418 00ac 00000000 		.word	pxCurrentTCB
 7419 00b0 04ED00E0 		.word	-536810236
 7420              		.cfi_endproc
 7421              	.LFE62:
 7423              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7424              		.align	1
 7425              		.global	xTaskGenericNotify
 7426              		.syntax unified
 7427              		.thumb
 7428              		.thumb_func
 7430              	xTaskGenericNotify:
 7431              	.LFB63:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 219


 7432              		.loc 1 4784 2
 7433              		.cfi_startproc
 7434              		@ args = 0, pretend = 0, frame = 40
 7435              		@ frame_needed = 1, uses_anonymous_args = 0
 7436 0000 80B5     		push	{r7, lr}
 7437              	.LCFI303:
 7438              		.cfi_def_cfa_offset 8
 7439              		.cfi_offset 7, -8
 7440              		.cfi_offset 14, -4
 7441 0002 8AB0     		sub	sp, sp, #40
 7442              	.LCFI304:
 7443              		.cfi_def_cfa_offset 48
 7444 0004 00AF     		add	r7, sp, #0
 7445              	.LCFI305:
 7446              		.cfi_def_cfa_register 7
 7447 0006 F860     		str	r0, [r7, #12]
 7448 0008 B960     		str	r1, [r7, #8]
 7449 000a 3B60     		str	r3, [r7]
 7450 000c 1346     		mov	r3, r2
 7451 000e FB71     		strb	r3, [r7, #7]
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7452              		.loc 1 4786 13
 7453 0010 0123     		movs	r3, #1
 7454 0012 7B62     		str	r3, [r7, #36]
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7455              		.loc 1 4789 3
 7456 0014 FB68     		ldr	r3, [r7, #12]
 7457 0016 002B     		cmp	r3, #0
 7458 0018 0BD1     		bne	.L468
 7459              	.LBB231:
 7460              	.LBB232:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7461              		.loc 2 195 2
 7462              		.syntax unified
 7463              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7464 001a 4FF05003 			mov r3, #80												
 7465 001e 83F31188 		msr basepri, r3											
 7466 0022 BFF36F8F 		isb														
 7467 0026 BFF34F8F 		dsb														
 7468              	
 7469              	@ 0 "" 2
 7470              		.thumb
 7471              		.syntax unified
 7472 002a BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7473              		.loc 2 203 1
 7474 002c 00BF     		nop
 7475              	.L469:
 7476              	.LBE232:
 7477              	.LBE231:
 7478              		.loc 1 4789 3
 7479 002e 00BF     		nop
 7480 0030 FDE7     		b	.L469
 7481              	.L468:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 220


4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7482              		.loc 1 4790 9
 7483 0032 FB68     		ldr	r3, [r7, #12]
 7484 0034 3B62     		str	r3, [r7, #32]
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7485              		.loc 1 4792 3
 7486 0036 FFF7FEFF 		bl	vPortEnterCritical
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7487              		.loc 1 4794 6
 7488 003a 3B68     		ldr	r3, [r7]
 7489 003c 002B     		cmp	r3, #0
 7490 003e 03D0     		beq	.L470
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7491              		.loc 1 4796 42
 7492 0040 3B6A     		ldr	r3, [r7, #32]
 7493 0042 DA6D     		ldr	r2, [r3, #92]
 7494              		.loc 1 4796 35
 7495 0044 3B68     		ldr	r3, [r7]
 7496 0046 1A60     		str	r2, [r3]
 7497              	.L470:
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7498              		.loc 1 4799 26
 7499 0048 3B6A     		ldr	r3, [r7, #32]
 7500 004a 93F86030 		ldrb	r3, [r3, #96]
 7501 004e FB77     		strb	r3, [r7, #31]
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7502              		.loc 1 4801 25
 7503 0050 3B6A     		ldr	r3, [r7, #32]
 7504 0052 0222     		movs	r2, #2
 7505 0054 83F86020 		strb	r2, [r3, #96]
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7506              		.loc 1 4803 4
 7507 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7508 005a 042B     		cmp	r3, #4
 7509 005c 27D8     		bhi	.L471
 7510 005e 01A2     		adr	r2, .L473
 7511 0060 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7512              		.p2align 2
 7513              	.L473:
 7514 0064 D1000000 		.word	.L488+1
 7515 0068 79000000 		.word	.L476+1
 7516 006c 87000000 		.word	.L475+1
 7517 0070 93000000 		.word	.L474+1
 7518 0074 9B000000 		.word	.L472+1
 7519              		.p2align 1
 7520              	.L476:
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7521              		.loc 1 4806 11
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 221


 7522 0078 3B6A     		ldr	r3, [r7, #32]
 7523 007a DA6D     		ldr	r2, [r3, #92]
 7524              		.loc 1 4806 29
 7525 007c BB68     		ldr	r3, [r7, #8]
 7526 007e 1A43     		orrs	r2, r2, r3
 7527 0080 3B6A     		ldr	r3, [r7, #32]
 7528 0082 DA65     		str	r2, [r3, #92]
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7529              		.loc 1 4807 6
 7530 0084 27E0     		b	.L478
 7531              	.L475:
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7532              		.loc 1 4810 13
 7533 0086 3B6A     		ldr	r3, [r7, #32]
 7534 0088 DB6D     		ldr	r3, [r3, #92]
 7535              		.loc 1 4810 32
 7536 008a 5A1C     		adds	r2, r3, #1
 7537 008c 3B6A     		ldr	r3, [r7, #32]
 7538 008e DA65     		str	r2, [r3, #92]
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7539              		.loc 1 4811 6
 7540 0090 21E0     		b	.L478
 7541              	.L474:
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7542              		.loc 1 4814 29
 7543 0092 3B6A     		ldr	r3, [r7, #32]
 7544 0094 BA68     		ldr	r2, [r7, #8]
 7545 0096 DA65     		str	r2, [r3, #92]
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7546              		.loc 1 4815 6
 7547 0098 1DE0     		b	.L478
 7548              	.L472:
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7549              		.loc 1 4818 8
 7550 009a FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7551 009c 022B     		cmp	r3, #2
 7552 009e 03D0     		beq	.L479
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7553              		.loc 1 4820 30
 7554 00a0 3B6A     		ldr	r3, [r7, #32]
 7555 00a2 BA68     		ldr	r2, [r7, #8]
 7556 00a4 DA65     		str	r2, [r3, #92]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7557              		.loc 1 4827 6
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 222


 7558 00a6 16E0     		b	.L478
 7559              	.L479:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7560              		.loc 1 4825 15
 7561 00a8 0023     		movs	r3, #0
 7562 00aa 7B62     		str	r3, [r7, #36]
 7563              		.loc 1 4827 6
 7564 00ac 13E0     		b	.L478
 7565              	.L471:
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7566              		.loc 1 4838 6
 7567 00ae 3B6A     		ldr	r3, [r7, #32]
 7568 00b0 DB6D     		ldr	r3, [r3, #92]
 7569 00b2 B3F1FF3F 		cmp	r3, #-1
 7570 00b6 0DD0     		beq	.L489
 7571              	.LBB233:
 7572              	.LBB234:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7573              		.loc 2 195 2
 7574              		.syntax unified
 7575              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7576 00b8 4FF05003 			mov r3, #80												
 7577 00bc 83F31188 		msr basepri, r3											
 7578 00c0 BFF36F8F 		isb														
 7579 00c4 BFF34F8F 		dsb														
 7580              	
 7581              	@ 0 "" 2
 7582              		.thumb
 7583              		.syntax unified
 7584 00c8 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7585              		.loc 2 203 1
 7586 00ca 00BF     		nop
 7587              	.L482:
 7588              	.LBE234:
 7589              	.LBE233:
 7590              		.loc 1 4838 6
 7591 00cc 00BF     		nop
 7592 00ce FDE7     		b	.L482
 7593              	.L488:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7594              		.loc 1 4832 6
 7595 00d0 00BF     		nop
 7596 00d2 00E0     		b	.L478
 7597              	.L489:
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 223


 7598              		.loc 1 4840 6
 7599 00d4 00BF     		nop
 7600              	.L478:
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7601              		.loc 1 4847 6
 7602 00d6 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7603 00d8 012B     		cmp	r3, #1
 7604 00da 3DD1     		bne	.L483
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7605              		.loc 1 4849 14
 7606 00dc 3B6A     		ldr	r3, [r7, #32]
 7607 00de 0433     		adds	r3, r3, #4
 7608 00e0 1846     		mov	r0, r3
 7609 00e2 FFF7FEFF 		bl	uxListRemove
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 7610              		.loc 1 4850 5
 7611 00e6 3B6A     		ldr	r3, [r7, #32]
 7612 00e8 DA6A     		ldr	r2, [r3, #44]
 7613 00ea 1F4B     		ldr	r3, .L490
 7614 00ec 1B68     		ldr	r3, [r3]
 7615 00ee 9A42     		cmp	r2, r3
 7616 00f0 03D9     		bls	.L484
 7617              		.loc 1 4850 5 is_stmt 0 discriminator 1
 7618 00f2 3B6A     		ldr	r3, [r7, #32]
 7619 00f4 DB6A     		ldr	r3, [r3, #44]
 7620 00f6 1C4A     		ldr	r2, .L490
 7621 00f8 1360     		str	r3, [r2]
 7622              	.L484:
 7623              		.loc 1 4850 5 discriminator 3
 7624 00fa 3B6A     		ldr	r3, [r7, #32]
 7625 00fc DA6A     		ldr	r2, [r3, #44]
 7626 00fe 1346     		mov	r3, r2
 7627 0100 9B00     		lsls	r3, r3, #2
 7628 0102 1344     		add	r3, r3, r2
 7629 0104 9B00     		lsls	r3, r3, #2
 7630 0106 194A     		ldr	r2, .L490+4
 7631 0108 1A44     		add	r2, r2, r3
 7632 010a 3B6A     		ldr	r3, [r7, #32]
 7633 010c 0433     		adds	r3, r3, #4
 7634 010e 1946     		mov	r1, r3
 7635 0110 1046     		mov	r0, r2
 7636 0112 FFF7FEFF 		bl	vListInsertEnd
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7637              		.loc 1 4853 5 is_stmt 1
 7638 0116 3B6A     		ldr	r3, [r7, #32]
 7639 0118 9B6A     		ldr	r3, [r3, #40]
 7640 011a 002B     		cmp	r3, #0
 7641 011c 0BD0     		beq	.L485
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 224


 7642              	.LBB235:
 7643              	.LBB236:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7644              		.loc 2 195 2
 7645              		.syntax unified
 7646              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7647 011e 4FF05003 			mov r3, #80												
 7648 0122 83F31188 		msr basepri, r3											
 7649 0126 BFF36F8F 		isb														
 7650 012a BFF34F8F 		dsb														
 7651              	
 7652              	@ 0 "" 2
 7653              		.thumb
 7654              		.syntax unified
 7655 012e 3B61     		str	r3, [r7, #16]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7656              		.loc 2 203 1
 7657 0130 00BF     		nop
 7658              	.L486:
 7659              	.LBE236:
 7660              	.LBE235:
 7661              		.loc 1 4853 5
 7662 0132 00BF     		nop
 7663 0134 FDE7     		b	.L486
 7664              	.L485:
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 7665              		.loc 1 4867 6
 7666 0136 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7667              		.loc 1 4871 14
 7668 013a 3B6A     		ldr	r3, [r7, #32]
 7669 013c DA6A     		ldr	r2, [r3, #44]
 7670              		.loc 1 4871 41
 7671 013e 0C4B     		ldr	r3, .L490+8
 7672 0140 1B68     		ldr	r3, [r3]
 7673 0142 DB6A     		ldr	r3, [r3, #44]
 7674              		.loc 1 4871 7
 7675 0144 9A42     		cmp	r2, r3
 7676 0146 07D9     		bls	.L483
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 225


4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 7677              		.loc 1 4875 6
 7678 0148 0A4B     		ldr	r3, .L490+12
 7679 014a 4FF08052 		mov	r2, #268435456
 7680 014e 1A60     		str	r2, [r3]
 7681              		.syntax unified
 7682              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7683 0150 BFF34F8F 		dsb
 7684              	@ 0 "" 2
 7685              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7686 0154 BFF36F8F 		isb
 7687              	@ 0 "" 2
 7688              		.thumb
 7689              		.syntax unified
 7690              	.L483:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7691              		.loc 1 4887 3
 7692 0158 FFF7FEFF 		bl	vPortExitCritical
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7693              		.loc 1 4889 10
 7694 015c 7B6A     		ldr	r3, [r7, #36]
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7695              		.loc 1 4890 2
 7696 015e 1846     		mov	r0, r3
 7697 0160 2837     		adds	r7, r7, #40
 7698              	.LCFI306:
 7699              		.cfi_def_cfa_offset 8
 7700 0162 BD46     		mov	sp, r7
 7701              	.LCFI307:
 7702              		.cfi_def_cfa_register 13
 7703              		@ sp needed
 7704 0164 80BD     		pop	{r7, pc}
 7705              	.L491:
 7706 0166 00BF     		.align	2
 7707              	.L490:
 7708 0168 00000000 		.word	uxTopReadyPriority
 7709 016c 00000000 		.word	pxReadyTasksLists
 7710 0170 00000000 		.word	pxCurrentTCB
 7711 0174 04ED00E0 		.word	-536810236
 7712              		.cfi_endproc
 7713              	.LFE63:
 7715              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7716              		.align	1
 7717              		.global	xTaskGenericNotifyFromISR
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 226


 7718              		.syntax unified
 7719              		.thumb
 7720              		.thumb_func
 7722              	xTaskGenericNotifyFromISR:
 7723              	.LFB64:
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7724              		.loc 1 4898 2
 7725              		.cfi_startproc
 7726              		@ args = 4, pretend = 0, frame = 56
 7727              		@ frame_needed = 1, uses_anonymous_args = 0
 7728 0000 80B5     		push	{r7, lr}
 7729              	.LCFI308:
 7730              		.cfi_def_cfa_offset 8
 7731              		.cfi_offset 7, -8
 7732              		.cfi_offset 14, -4
 7733 0002 8EB0     		sub	sp, sp, #56
 7734              	.LCFI309:
 7735              		.cfi_def_cfa_offset 64
 7736 0004 00AF     		add	r7, sp, #0
 7737              	.LCFI310:
 7738              		.cfi_def_cfa_register 7
 7739 0006 F860     		str	r0, [r7, #12]
 7740 0008 B960     		str	r1, [r7, #8]
 7741 000a 3B60     		str	r3, [r7]
 7742 000c 1346     		mov	r3, r2
 7743 000e FB71     		strb	r3, [r7, #7]
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7744              		.loc 1 4901 13
 7745 0010 0123     		movs	r3, #1
 7746 0012 7B63     		str	r3, [r7, #52]
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7747              		.loc 1 4904 3
 7748 0014 FB68     		ldr	r3, [r7, #12]
 7749 0016 002B     		cmp	r3, #0
 7750 0018 0BD1     		bne	.L493
 7751              	.LBB237:
 7752              	.LBB238:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7753              		.loc 2 195 2
 7754              		.syntax unified
 7755              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7756 001a 4FF05003 			mov r3, #80												
 7757 001e 83F31188 		msr basepri, r3											
 7758 0022 BFF36F8F 		isb														
 7759 0026 BFF34F8F 		dsb														
 7760              	
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 227


 7761              	@ 0 "" 2
 7762              		.thumb
 7763              		.syntax unified
 7764 002a 7B62     		str	r3, [r7, #36]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7765              		.loc 2 203 1
 7766 002c 00BF     		nop
 7767              	.L494:
 7768              	.LBE238:
 7769              	.LBE237:
 7770              		.loc 1 4904 3
 7771 002e 00BF     		nop
 7772 0030 FDE7     		b	.L494
 7773              	.L493:
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 7774              		.loc 1 4922 3
 7775 0032 FFF7FEFF 		bl	vPortValidateInterruptPriority
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7776              		.loc 1 4924 9
 7777 0036 FB68     		ldr	r3, [r7, #12]
 7778 0038 3B63     		str	r3, [r7, #48]
 7779              	.LBB239:
 7780              	.LBB240:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7781              		.loc 2 211 2
 7782              		.syntax unified
 7783              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7784 003a EFF31182 			mrs r2, basepri											
 7785 003e 4FF05003 		mov r3, #80												
 7786 0042 83F31188 		msr basepri, r3											
 7787 0046 BFF36F8F 		isb														
 7788 004a BFF34F8F 		dsb														
 7789              	
 7790              	@ 0 "" 2
 7791              		.thumb
 7792              		.syntax unified
 7793 004e 3A62     		str	r2, [r7, #32]
 7794 0050 FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 228


 7795              		.loc 2 223 9
 7796 0052 3B6A     		ldr	r3, [r7, #32]
 7797              	.LBE240:
 7798              	.LBE239:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 7799              		.loc 1 4926 28
 7800 0054 FB62     		str	r3, [r7, #44]
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7801              		.loc 1 4928 6
 7802 0056 3B68     		ldr	r3, [r7]
 7803 0058 002B     		cmp	r3, #0
 7804 005a 03D0     		beq	.L496
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7805              		.loc 1 4930 42
 7806 005c 3B6B     		ldr	r3, [r7, #48]
 7807 005e DA6D     		ldr	r2, [r3, #92]
 7808              		.loc 1 4930 35
 7809 0060 3B68     		ldr	r3, [r7]
 7810 0062 1A60     		str	r2, [r3]
 7811              	.L496:
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7812              		.loc 1 4933 26
 7813 0064 3B6B     		ldr	r3, [r7, #48]
 7814 0066 93F86030 		ldrb	r3, [r3, #96]
 7815 006a 87F82B30 		strb	r3, [r7, #43]
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7816              		.loc 1 4934 25
 7817 006e 3B6B     		ldr	r3, [r7, #48]
 7818 0070 0222     		movs	r2, #2
 7819 0072 83F86020 		strb	r2, [r3, #96]
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7820              		.loc 1 4936 4
 7821 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7822 0078 042B     		cmp	r3, #4
 7823 007a 29D8     		bhi	.L497
 7824 007c 01A2     		adr	r2, .L499
 7825 007e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7826 0082 00BF     		.p2align 2
 7827              	.L499:
 7828 0084 F3000000 		.word	.L517+1
 7829 0088 99000000 		.word	.L502+1
 7830 008c A7000000 		.word	.L501+1
 7831 0090 B3000000 		.word	.L500+1
 7832 0094 BB000000 		.word	.L498+1
 7833              		.p2align 1
 7834              	.L502:
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7835              		.loc 1 4939 11
 7836 0098 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 229


 7837 009a DA6D     		ldr	r2, [r3, #92]
 7838              		.loc 1 4939 29
 7839 009c BB68     		ldr	r3, [r7, #8]
 7840 009e 1A43     		orrs	r2, r2, r3
 7841 00a0 3B6B     		ldr	r3, [r7, #48]
 7842 00a2 DA65     		str	r2, [r3, #92]
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7843              		.loc 1 4940 6
 7844 00a4 28E0     		b	.L504
 7845              	.L501:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7846              		.loc 1 4943 13
 7847 00a6 3B6B     		ldr	r3, [r7, #48]
 7848 00a8 DB6D     		ldr	r3, [r3, #92]
 7849              		.loc 1 4943 32
 7850 00aa 5A1C     		adds	r2, r3, #1
 7851 00ac 3B6B     		ldr	r3, [r7, #48]
 7852 00ae DA65     		str	r2, [r3, #92]
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7853              		.loc 1 4944 6
 7854 00b0 22E0     		b	.L504
 7855              	.L500:
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7856              		.loc 1 4947 29
 7857 00b2 3B6B     		ldr	r3, [r7, #48]
 7858 00b4 BA68     		ldr	r2, [r7, #8]
 7859 00b6 DA65     		str	r2, [r3, #92]
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7860              		.loc 1 4948 6
 7861 00b8 1EE0     		b	.L504
 7862              	.L498:
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7863              		.loc 1 4951 8
 7864 00ba 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7865 00be 022B     		cmp	r3, #2
 7866 00c0 03D0     		beq	.L505
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7867              		.loc 1 4953 30
 7868 00c2 3B6B     		ldr	r3, [r7, #48]
 7869 00c4 BA68     		ldr	r2, [r7, #8]
 7870 00c6 DA65     		str	r2, [r3, #92]
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7871              		.loc 1 4960 6
 7872 00c8 16E0     		b	.L504
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 230


 7873              	.L505:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7874              		.loc 1 4958 15
 7875 00ca 0023     		movs	r3, #0
 7876 00cc 7B63     		str	r3, [r7, #52]
 7877              		.loc 1 4960 6
 7878 00ce 13E0     		b	.L504
 7879              	.L497:
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7880              		.loc 1 4971 6
 7881 00d0 3B6B     		ldr	r3, [r7, #48]
 7882 00d2 DB6D     		ldr	r3, [r3, #92]
 7883 00d4 B3F1FF3F 		cmp	r3, #-1
 7884 00d8 0DD0     		beq	.L518
 7885              	.LBB241:
 7886              	.LBB242:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7887              		.loc 2 195 2
 7888              		.syntax unified
 7889              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7890 00da 4FF05003 			mov r3, #80												
 7891 00de 83F31188 		msr basepri, r3											
 7892 00e2 BFF36F8F 		isb														
 7893 00e6 BFF34F8F 		dsb														
 7894              	
 7895              	@ 0 "" 2
 7896              		.thumb
 7897              		.syntax unified
 7898 00ea BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7899              		.loc 2 203 1
 7900 00ec 00BF     		nop
 7901              	.L508:
 7902              	.LBE242:
 7903              	.LBE241:
 7904              		.loc 1 4971 6
 7905 00ee 00BF     		nop
 7906 00f0 FDE7     		b	.L508
 7907              	.L517:
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 7908              		.loc 1 4965 6
 7909 00f2 00BF     		nop
 7910 00f4 00E0     		b	.L504
 7911              	.L518:
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7912              		.loc 1 4972 6
 7913 00f6 00BF     		nop
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 231


 7914              	.L504:
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 7915              		.loc 1 4979 6
 7916 00f8 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 7917 00fc 012B     		cmp	r3, #1
 7918 00fe 47D1     		bne	.L509
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 7919              		.loc 1 4982 5
 7920 0100 3B6B     		ldr	r3, [r7, #48]
 7921 0102 9B6A     		ldr	r3, [r3, #40]
 7922 0104 002B     		cmp	r3, #0
 7923 0106 0BD0     		beq	.L510
 7924              	.LBB243:
 7925              	.LBB244:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7926              		.loc 2 195 2
 7927              		.syntax unified
 7928              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7929 0108 4FF05003 			mov r3, #80												
 7930 010c 83F31188 		msr basepri, r3											
 7931 0110 BFF36F8F 		isb														
 7932 0114 BFF34F8F 		dsb														
 7933              	
 7934              	@ 0 "" 2
 7935              		.thumb
 7936              		.syntax unified
 7937 0118 7B61     		str	r3, [r7, #20]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 7938              		.loc 2 203 1
 7939 011a 00BF     		nop
 7940              	.L511:
 7941              	.LBE244:
 7942              	.LBE243:
 7943              		.loc 1 4982 5
 7944 011c 00BF     		nop
 7945 011e FDE7     		b	.L511
 7946              	.L510:
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 7947              		.loc 1 4984 30
 7948 0120 214B     		ldr	r3, .L519
 7949 0122 1B68     		ldr	r3, [r3]
 7950              		.loc 1 4984 7
 7951 0124 002B     		cmp	r3, #0
 7952 0126 1DD1     		bne	.L512
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 7953              		.loc 1 4986 15
 7954 0128 3B6B     		ldr	r3, [r7, #48]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 232


 7955 012a 0433     		adds	r3, r3, #4
 7956 012c 1846     		mov	r0, r3
 7957 012e FFF7FEFF 		bl	uxListRemove
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 7958              		.loc 1 4987 6
 7959 0132 3B6B     		ldr	r3, [r7, #48]
 7960 0134 DA6A     		ldr	r2, [r3, #44]
 7961 0136 1D4B     		ldr	r3, .L519+4
 7962 0138 1B68     		ldr	r3, [r3]
 7963 013a 9A42     		cmp	r2, r3
 7964 013c 03D9     		bls	.L513
 7965              		.loc 1 4987 6 is_stmt 0 discriminator 1
 7966 013e 3B6B     		ldr	r3, [r7, #48]
 7967 0140 DB6A     		ldr	r3, [r3, #44]
 7968 0142 1A4A     		ldr	r2, .L519+4
 7969 0144 1360     		str	r3, [r2]
 7970              	.L513:
 7971              		.loc 1 4987 6 discriminator 3
 7972 0146 3B6B     		ldr	r3, [r7, #48]
 7973 0148 DA6A     		ldr	r2, [r3, #44]
 7974 014a 1346     		mov	r3, r2
 7975 014c 9B00     		lsls	r3, r3, #2
 7976 014e 1344     		add	r3, r3, r2
 7977 0150 9B00     		lsls	r3, r3, #2
 7978 0152 174A     		ldr	r2, .L519+8
 7979 0154 1A44     		add	r2, r2, r3
 7980 0156 3B6B     		ldr	r3, [r7, #48]
 7981 0158 0433     		adds	r3, r3, #4
 7982 015a 1946     		mov	r1, r3
 7983 015c 1046     		mov	r0, r2
 7984 015e FFF7FEFF 		bl	vListInsertEnd
 7985 0162 05E0     		b	.L514
 7986              	.L512:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 7987              		.loc 1 4993 6 is_stmt 1
 7988 0164 3B6B     		ldr	r3, [r7, #48]
 7989 0166 1833     		adds	r3, r3, #24
 7990 0168 1946     		mov	r1, r3
 7991 016a 1248     		ldr	r0, .L519+12
 7992 016c FFF7FEFF 		bl	vListInsertEnd
 7993              	.L514:
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 7994              		.loc 1 4996 14
 7995 0170 3B6B     		ldr	r3, [r7, #48]
 7996 0172 DA6A     		ldr	r2, [r3, #44]
 7997              		.loc 1 4996 41
 7998 0174 104B     		ldr	r3, .L519+16
 7999 0176 1B68     		ldr	r3, [r3]
 8000 0178 DB6A     		ldr	r3, [r3, #44]
 8001              		.loc 1 4996 7
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 233


 8002 017a 9A42     		cmp	r2, r3
 8003 017c 08D9     		bls	.L509
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8004              		.loc 1 5000 8
 8005 017e 3B6C     		ldr	r3, [r7, #64]
 8006 0180 002B     		cmp	r3, #0
 8007 0182 02D0     		beq	.L515
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8008              		.loc 1 5002 34
 8009 0184 3B6C     		ldr	r3, [r7, #64]
 8010 0186 0122     		movs	r2, #1
 8011 0188 1A60     		str	r2, [r3]
 8012              	.L515:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8013              		.loc 1 5008 20
 8014 018a 0C4B     		ldr	r3, .L519+20
 8015 018c 0122     		movs	r2, #1
 8016 018e 1A60     		str	r2, [r3]
 8017              	.L509:
 8018 0190 FB6A     		ldr	r3, [r7, #44]
 8019 0192 3B61     		str	r3, [r7, #16]
 8020              	.LBB245:
 8021              	.LBB246:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8022              		.loc 2 229 2
 8023 0194 3B69     		ldr	r3, [r7, #16]
 8024              		.syntax unified
 8025              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8026 0196 83F31188 			msr basepri, r3	
 8027              	@ 0 "" 2
 8028              		.loc 2 233 1
 8029              		.thumb
 8030              		.syntax unified
 8031 019a 00BF     		nop
 8032              	.LBE246:
 8033              	.LBE245:
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8034              		.loc 1 5018 10
 8035 019c 7B6B     		ldr	r3, [r7, #52]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 234


5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8036              		.loc 1 5019 2
 8037 019e 1846     		mov	r0, r3
 8038 01a0 3837     		adds	r7, r7, #56
 8039              	.LCFI311:
 8040              		.cfi_def_cfa_offset 8
 8041 01a2 BD46     		mov	sp, r7
 8042              	.LCFI312:
 8043              		.cfi_def_cfa_register 13
 8044              		@ sp needed
 8045 01a4 80BD     		pop	{r7, pc}
 8046              	.L520:
 8047 01a6 00BF     		.align	2
 8048              	.L519:
 8049 01a8 00000000 		.word	uxSchedulerSuspended
 8050 01ac 00000000 		.word	uxTopReadyPriority
 8051 01b0 00000000 		.word	pxReadyTasksLists
 8052 01b4 00000000 		.word	xPendingReadyList
 8053 01b8 00000000 		.word	pxCurrentTCB
 8054 01bc 00000000 		.word	xYieldPending
 8055              		.cfi_endproc
 8056              	.LFE64:
 8058              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 8059              		.align	1
 8060              		.global	vTaskNotifyGiveFromISR
 8061              		.syntax unified
 8062              		.thumb
 8063              		.thumb_func
 8065              	vTaskNotifyGiveFromISR:
 8066              	.LFB65:
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8067              		.loc 1 5027 2
 8068              		.cfi_startproc
 8069              		@ args = 0, pretend = 0, frame = 40
 8070              		@ frame_needed = 1, uses_anonymous_args = 0
 8071 0000 80B5     		push	{r7, lr}
 8072              	.LCFI313:
 8073              		.cfi_def_cfa_offset 8
 8074              		.cfi_offset 7, -8
 8075              		.cfi_offset 14, -4
 8076 0002 8AB0     		sub	sp, sp, #40
 8077              	.LCFI314:
 8078              		.cfi_def_cfa_offset 48
 8079 0004 00AF     		add	r7, sp, #0
 8080              	.LCFI315:
 8081              		.cfi_def_cfa_register 7
 8082 0006 7860     		str	r0, [r7, #4]
 8083 0008 3960     		str	r1, [r7]
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 235


5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 8084              		.loc 1 5032 3
 8085 000a 7B68     		ldr	r3, [r7, #4]
 8086 000c 002B     		cmp	r3, #0
 8087 000e 0BD1     		bne	.L522
 8088              	.LBB247:
 8089              	.LBB248:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8090              		.loc 2 195 2
 8091              		.syntax unified
 8092              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8093 0010 4FF05003 			mov r3, #80												
 8094 0014 83F31188 		msr basepri, r3											
 8095 0018 BFF36F8F 		isb														
 8096 001c BFF34F8F 		dsb														
 8097              	
 8098              	@ 0 "" 2
 8099              		.thumb
 8100              		.syntax unified
 8101 0020 BB61     		str	r3, [r7, #24]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8102              		.loc 2 203 1
 8103 0022 00BF     		nop
 8104              	.L523:
 8105              	.LBE248:
 8106              	.LBE247:
 8107              		.loc 1 5032 3
 8108 0024 00BF     		nop
 8109 0026 FDE7     		b	.L523
 8110              	.L522:
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8111              		.loc 1 5050 3
 8112 0028 FFF7FEFF 		bl	vPortValidateInterruptPriority
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 8113              		.loc 1 5052 9
 8114 002c 7B68     		ldr	r3, [r7, #4]
 8115 002e 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 236


 8116              	.LBB249:
 8117              	.LBB250:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8118              		.loc 2 211 2
 8119              		.syntax unified
 8120              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8121 0030 EFF31182 			mrs r2, basepri											
 8122 0034 4FF05003 		mov r3, #80												
 8123 0038 83F31188 		msr basepri, r3											
 8124 003c BFF36F8F 		isb														
 8125 0040 BFF34F8F 		dsb														
 8126              	
 8127              	@ 0 "" 2
 8128              		.thumb
 8129              		.syntax unified
 8130 0044 7A61     		str	r2, [r7, #20]
 8131 0046 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 8132              		.loc 2 223 9
 8133 0048 7B69     		ldr	r3, [r7, #20]
 8134              	.LBE250:
 8135              	.LBE249:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8136              		.loc 1 5054 28
 8137 004a 3B62     		str	r3, [r7, #32]
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8138              		.loc 1 5056 26
 8139 004c 7B6A     		ldr	r3, [r7, #36]
 8140 004e 93F86030 		ldrb	r3, [r3, #96]
 8141 0052 FB77     		strb	r3, [r7, #31]
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8142              		.loc 1 5057 25
 8143 0054 7B6A     		ldr	r3, [r7, #36]
 8144 0056 0222     		movs	r2, #2
 8145 0058 83F86020 		strb	r2, [r3, #96]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 8146              		.loc 1 5061 11
 8147 005c 7B6A     		ldr	r3, [r7, #36]
 8148 005e DB6D     		ldr	r3, [r3, #92]
 8149              		.loc 1 5061 30
 8150 0060 5A1C     		adds	r2, r3, #1
 8151 0062 7B6A     		ldr	r3, [r7, #36]
 8152 0064 DA65     		str	r2, [r3, #92]
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8153              		.loc 1 5067 6
 8154 0066 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8155 0068 012B     		cmp	r3, #1
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 237


 8156 006a 47D1     		bne	.L525
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8157              		.loc 1 5070 5
 8158 006c 7B6A     		ldr	r3, [r7, #36]
 8159 006e 9B6A     		ldr	r3, [r3, #40]
 8160 0070 002B     		cmp	r3, #0
 8161 0072 0BD0     		beq	.L526
 8162              	.LBB251:
 8163              	.LBB252:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8164              		.loc 2 195 2
 8165              		.syntax unified
 8166              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8167 0074 4FF05003 			mov r3, #80												
 8168 0078 83F31188 		msr basepri, r3											
 8169 007c BFF36F8F 		isb														
 8170 0080 BFF34F8F 		dsb														
 8171              	
 8172              	@ 0 "" 2
 8173              		.thumb
 8174              		.syntax unified
 8175 0084 FB60     		str	r3, [r7, #12]
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 8176              		.loc 2 203 1
 8177 0086 00BF     		nop
 8178              	.L527:
 8179              	.LBE252:
 8180              	.LBE251:
 8181              		.loc 1 5070 5
 8182 0088 00BF     		nop
 8183 008a FDE7     		b	.L527
 8184              	.L526:
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8185              		.loc 1 5072 30
 8186 008c 204B     		ldr	r3, .L532
 8187 008e 1B68     		ldr	r3, [r3]
 8188              		.loc 1 5072 7
 8189 0090 002B     		cmp	r3, #0
 8190 0092 1DD1     		bne	.L528
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8191              		.loc 1 5074 15
 8192 0094 7B6A     		ldr	r3, [r7, #36]
 8193 0096 0433     		adds	r3, r3, #4
 8194 0098 1846     		mov	r0, r3
 8195 009a FFF7FEFF 		bl	uxListRemove
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8196              		.loc 1 5075 6
 8197 009e 7B6A     		ldr	r3, [r7, #36]
 8198 00a0 DA6A     		ldr	r2, [r3, #44]
 8199 00a2 1C4B     		ldr	r3, .L532+4
 8200 00a4 1B68     		ldr	r3, [r3]
 8201 00a6 9A42     		cmp	r2, r3
 8202 00a8 03D9     		bls	.L529
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 238


 8203              		.loc 1 5075 6 is_stmt 0 discriminator 1
 8204 00aa 7B6A     		ldr	r3, [r7, #36]
 8205 00ac DB6A     		ldr	r3, [r3, #44]
 8206 00ae 194A     		ldr	r2, .L532+4
 8207 00b0 1360     		str	r3, [r2]
 8208              	.L529:
 8209              		.loc 1 5075 6 discriminator 3
 8210 00b2 7B6A     		ldr	r3, [r7, #36]
 8211 00b4 DA6A     		ldr	r2, [r3, #44]
 8212 00b6 1346     		mov	r3, r2
 8213 00b8 9B00     		lsls	r3, r3, #2
 8214 00ba 1344     		add	r3, r3, r2
 8215 00bc 9B00     		lsls	r3, r3, #2
 8216 00be 164A     		ldr	r2, .L532+8
 8217 00c0 1A44     		add	r2, r2, r3
 8218 00c2 7B6A     		ldr	r3, [r7, #36]
 8219 00c4 0433     		adds	r3, r3, #4
 8220 00c6 1946     		mov	r1, r3
 8221 00c8 1046     		mov	r0, r2
 8222 00ca FFF7FEFF 		bl	vListInsertEnd
 8223 00ce 05E0     		b	.L530
 8224              	.L528:
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8225              		.loc 1 5081 6 is_stmt 1
 8226 00d0 7B6A     		ldr	r3, [r7, #36]
 8227 00d2 1833     		adds	r3, r3, #24
 8228 00d4 1946     		mov	r1, r3
 8229 00d6 1148     		ldr	r0, .L532+12
 8230 00d8 FFF7FEFF 		bl	vListInsertEnd
 8231              	.L530:
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8232              		.loc 1 5084 14
 8233 00dc 7B6A     		ldr	r3, [r7, #36]
 8234 00de DA6A     		ldr	r2, [r3, #44]
 8235              		.loc 1 5084 41
 8236 00e0 0F4B     		ldr	r3, .L532+16
 8237 00e2 1B68     		ldr	r3, [r3]
 8238 00e4 DB6A     		ldr	r3, [r3, #44]
 8239              		.loc 1 5084 7
 8240 00e6 9A42     		cmp	r2, r3
 8241 00e8 08D9     		bls	.L525
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8242              		.loc 1 5088 8
 8243 00ea 3B68     		ldr	r3, [r7]
 8244 00ec 002B     		cmp	r3, #0
 8245 00ee 02D0     		beq	.L531
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 239


5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8246              		.loc 1 5090 34
 8247 00f0 3B68     		ldr	r3, [r7]
 8248 00f2 0122     		movs	r2, #1
 8249 00f4 1A60     		str	r2, [r3]
 8250              	.L531:
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8251              		.loc 1 5096 20
 8252 00f6 0B4B     		ldr	r3, .L532+20
 8253 00f8 0122     		movs	r2, #1
 8254 00fa 1A60     		str	r2, [r3]
 8255              	.L525:
 8256 00fc 3B6A     		ldr	r3, [r7, #32]
 8257 00fe BB60     		str	r3, [r7, #8]
 8258              	.LBB253:
 8259              	.LBB254:
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8260              		.loc 2 229 2
 8261 0100 BB68     		ldr	r3, [r7, #8]
 8262              		.syntax unified
 8263              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8264 0102 83F31188 			msr basepri, r3	
 8265              	@ 0 "" 2
 8266              		.loc 2 233 1
 8267              		.thumb
 8268              		.syntax unified
 8269 0106 00BF     		nop
 8270              	.LBE254:
 8271              	.LBE253:
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8272              		.loc 1 5105 2
 8273 0108 00BF     		nop
 8274 010a 2837     		adds	r7, r7, #40
 8275              	.LCFI316:
 8276              		.cfi_def_cfa_offset 8
 8277 010c BD46     		mov	sp, r7
 8278              	.LCFI317:
 8279              		.cfi_def_cfa_register 13
 8280              		@ sp needed
 8281 010e 80BD     		pop	{r7, pc}
 8282              	.L533:
 8283              		.align	2
 8284              	.L532:
 8285 0110 00000000 		.word	uxSchedulerSuspended
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 240


 8286 0114 00000000 		.word	uxTopReadyPriority
 8287 0118 00000000 		.word	pxReadyTasksLists
 8288 011c 00000000 		.word	xPendingReadyList
 8289 0120 00000000 		.word	pxCurrentTCB
 8290 0124 00000000 		.word	xYieldPending
 8291              		.cfi_endproc
 8292              	.LFE65:
 8294              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 8295              		.align	1
 8296              		.global	xTaskNotifyStateClear
 8297              		.syntax unified
 8298              		.thumb
 8299              		.thumb_func
 8301              	xTaskNotifyStateClear:
 8302              	.LFB66:
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8303              		.loc 1 5113 2
 8304              		.cfi_startproc
 8305              		@ args = 0, pretend = 0, frame = 16
 8306              		@ frame_needed = 1, uses_anonymous_args = 0
 8307 0000 80B5     		push	{r7, lr}
 8308              	.LCFI318:
 8309              		.cfi_def_cfa_offset 8
 8310              		.cfi_offset 7, -8
 8311              		.cfi_offset 14, -4
 8312 0002 84B0     		sub	sp, sp, #16
 8313              	.LCFI319:
 8314              		.cfi_def_cfa_offset 24
 8315 0004 00AF     		add	r7, sp, #0
 8316              	.LCFI320:
 8317              		.cfi_def_cfa_register 7
 8318 0006 7860     		str	r0, [r7, #4]
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8319              		.loc 1 5119 11
 8320 0008 7B68     		ldr	r3, [r7, #4]
 8321 000a 002B     		cmp	r3, #0
 8322 000c 02D1     		bne	.L535
 8323              		.loc 1 5119 11 is_stmt 0 discriminator 1
 8324 000e 0E4B     		ldr	r3, .L540
 8325 0010 1B68     		ldr	r3, [r3]
 8326 0012 00E0     		b	.L536
 8327              	.L535:
 8328              		.loc 1 5119 11 discriminator 2
 8329 0014 7B68     		ldr	r3, [r7, #4]
 8330              	.L536:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 241


 8331              		.loc 1 5119 9 is_stmt 1 discriminator 4
 8332 0016 BB60     		str	r3, [r7, #8]
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8333              		.loc 1 5121 3
 8334 0018 FFF7FEFF 		bl	vPortEnterCritical
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8335              		.loc 1 5123 13
 8336 001c BB68     		ldr	r3, [r7, #8]
 8337 001e 93F86030 		ldrb	r3, [r3, #96]
 8338 0022 DBB2     		uxtb	r3, r3
 8339              		.loc 1 5123 6
 8340 0024 022B     		cmp	r3, #2
 8341 0026 06D1     		bne	.L537
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8342              		.loc 1 5125 26
 8343 0028 BB68     		ldr	r3, [r7, #8]
 8344 002a 0022     		movs	r2, #0
 8345 002c 83F86020 		strb	r2, [r3, #96]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8346              		.loc 1 5126 13
 8347 0030 0123     		movs	r3, #1
 8348 0032 FB60     		str	r3, [r7, #12]
 8349 0034 01E0     		b	.L538
 8350              	.L537:
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 8351              		.loc 1 5130 13
 8352 0036 0023     		movs	r3, #0
 8353 0038 FB60     		str	r3, [r7, #12]
 8354              	.L538:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8355              		.loc 1 5133 3
 8356 003a FFF7FEFF 		bl	vPortExitCritical
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8357              		.loc 1 5135 10
 8358 003e FB68     		ldr	r3, [r7, #12]
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8359              		.loc 1 5136 2
 8360 0040 1846     		mov	r0, r3
 8361 0042 1037     		adds	r7, r7, #16
 8362              	.LCFI321:
 8363              		.cfi_def_cfa_offset 8
 8364 0044 BD46     		mov	sp, r7
 8365              	.LCFI322:
 8366              		.cfi_def_cfa_register 13
 8367              		@ sp needed
 8368 0046 80BD     		pop	{r7, pc}
 8369              	.L541:
 8370              		.align	2
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 242


 8371              	.L540:
 8372 0048 00000000 		.word	pxCurrentTCB
 8373              		.cfi_endproc
 8374              	.LFE66:
 8376              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 8377              		.align	1
 8378              		.global	ulTaskNotifyValueClear
 8379              		.syntax unified
 8380              		.thumb
 8381              		.thumb_func
 8383              	ulTaskNotifyValueClear:
 8384              	.LFB67:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8385              		.loc 1 5144 2
 8386              		.cfi_startproc
 8387              		@ args = 0, pretend = 0, frame = 16
 8388              		@ frame_needed = 1, uses_anonymous_args = 0
 8389 0000 80B5     		push	{r7, lr}
 8390              	.LCFI323:
 8391              		.cfi_def_cfa_offset 8
 8392              		.cfi_offset 7, -8
 8393              		.cfi_offset 14, -4
 8394 0002 84B0     		sub	sp, sp, #16
 8395              	.LCFI324:
 8396              		.cfi_def_cfa_offset 24
 8397 0004 00AF     		add	r7, sp, #0
 8398              	.LCFI325:
 8399              		.cfi_def_cfa_register 7
 8400 0006 7860     		str	r0, [r7, #4]
 8401 0008 3960     		str	r1, [r7]
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8402              		.loc 1 5150 11
 8403 000a 7B68     		ldr	r3, [r7, #4]
 8404 000c 002B     		cmp	r3, #0
 8405 000e 02D1     		bne	.L543
 8406              		.loc 1 5150 11 is_stmt 0 discriminator 1
 8407 0010 0C4B     		ldr	r3, .L546
 8408 0012 1B68     		ldr	r3, [r3]
 8409 0014 00E0     		b	.L544
 8410              	.L543:
 8411              		.loc 1 5150 11 discriminator 2
 8412 0016 7B68     		ldr	r3, [r7, #4]
 8413              	.L544:
 8414              		.loc 1 5150 9 is_stmt 1 discriminator 4
 8415 0018 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 243


5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8416              		.loc 1 5152 3
 8417 001a FFF7FEFF 		bl	vPortEnterCritical
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8418              		.loc 1 5156 27
 8419 001e 094B     		ldr	r3, .L546
 8420 0020 1B68     		ldr	r3, [r3]
 8421              		.loc 1 5156 13
 8422 0022 DB6D     		ldr	r3, [r3, #92]
 8423 0024 BB60     		str	r3, [r7, #8]
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8424              		.loc 1 5157 9
 8425 0026 FB68     		ldr	r3, [r7, #12]
 8426 0028 DA6D     		ldr	r2, [r3, #92]
 8427              		.loc 1 5157 30
 8428 002a 3B68     		ldr	r3, [r7]
 8429 002c DB43     		mvns	r3, r3
 8430              		.loc 1 5157 27
 8431 002e 1A40     		ands	r2, r2, r3
 8432 0030 FB68     		ldr	r3, [r7, #12]
 8433 0032 DA65     		str	r2, [r3, #92]
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8434              		.loc 1 5159 3
 8435 0034 FFF7FEFF 		bl	vPortExitCritical
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 8436              		.loc 1 5161 10
 8437 0038 BB68     		ldr	r3, [r7, #8]
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8438              		.loc 1 5162 2
 8439 003a 1846     		mov	r0, r3
 8440 003c 1037     		adds	r7, r7, #16
 8441              	.LCFI326:
 8442              		.cfi_def_cfa_offset 8
 8443 003e BD46     		mov	sp, r7
 8444              	.LCFI327:
 8445              		.cfi_def_cfa_register 13
 8446              		@ sp needed
 8447 0040 80BD     		pop	{r7, pc}
 8448              	.L547:
 8449 0042 00BF     		.align	2
 8450              	.L546:
 8451 0044 00000000 		.word	pxCurrentTCB
 8452              		.cfi_endproc
 8453              	.LFE67:
 8455              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8456              		.align	1
 8457              		.syntax unified
 8458              		.thumb
 8459              		.thumb_func
 8461              	prvAddCurrentTaskToDelayedList:
 8462              	.LFB68:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 244


5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8463              		.loc 1 5178 1
 8464              		.cfi_startproc
 8465              		@ args = 0, pretend = 0, frame = 16
 8466              		@ frame_needed = 1, uses_anonymous_args = 0
 8467 0000 80B5     		push	{r7, lr}
 8468              	.LCFI328:
 8469              		.cfi_def_cfa_offset 8
 8470              		.cfi_offset 7, -8
 8471              		.cfi_offset 14, -4
 8472 0002 84B0     		sub	sp, sp, #16
 8473              	.LCFI329:
 8474              		.cfi_def_cfa_offset 24
 8475 0004 00AF     		add	r7, sp, #0
 8476              	.LCFI330:
 8477              		.cfi_def_cfa_register 7
 8478 0006 7860     		str	r0, [r7, #4]
 8479 0008 3960     		str	r1, [r7]
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8480              		.loc 1 5180 18
 8481 000a 214B     		ldr	r3, .L553
 8482 000c 1B68     		ldr	r3, [r3]
 8483 000e FB60     		str	r3, [r7, #12]
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8484              		.loc 1 5193 35
 8485 0010 204B     		ldr	r3, .L553+4
 8486 0012 1B68     		ldr	r3, [r3]
 8487              		.loc 1 5193 6
 8488 0014 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 245


 8489 0016 1846     		mov	r0, r3
 8490 0018 FFF7FEFF 		bl	uxListRemove
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8491              		.loc 1 5206 5
 8492 001c 7B68     		ldr	r3, [r7, #4]
 8493 001e B3F1FF3F 		cmp	r3, #-1
 8494 0022 0AD1     		bne	.L549
 8495              		.loc 1 5206 41 discriminator 1
 8496 0024 3B68     		ldr	r3, [r7]
 8497 0026 002B     		cmp	r3, #0
 8498 0028 07D0     		beq	.L549
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8499              		.loc 1 5211 56
 8500 002a 1A4B     		ldr	r3, .L553+4
 8501 002c 1B68     		ldr	r3, [r3]
 8502              		.loc 1 5211 4
 8503 002e 0433     		adds	r3, r3, #4
 8504 0030 1946     		mov	r1, r3
 8505 0032 1948     		ldr	r0, .L553+8
 8506 0034 FFF7FEFF 		bl	vListInsertEnd
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 246


5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8507              		.loc 1 5286 1
 8508 0038 26E0     		b	.L552
 8509              	.L549:
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 247


5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8510              		.loc 1 5218 16
 8511 003a FA68     		ldr	r2, [r7, #12]
 8512 003c 7B68     		ldr	r3, [r7, #4]
 8513 003e 1344     		add	r3, r3, r2
 8514 0040 BB60     		str	r3, [r7, #8]
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8515              		.loc 1 5221 4
 8516 0042 144B     		ldr	r3, .L553+4
 8517 0044 1B68     		ldr	r3, [r3]
 8518 0046 BA68     		ldr	r2, [r7, #8]
 8519 0048 5A60     		str	r2, [r3, #4]
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8520              		.loc 1 5223 6
 8521 004a BA68     		ldr	r2, [r7, #8]
 8522 004c FB68     		ldr	r3, [r7, #12]
 8523 004e 9A42     		cmp	r2, r3
 8524 0050 09D2     		bcs	.L551
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8525              		.loc 1 5227 5
 8526 0052 124B     		ldr	r3, .L553+12
 8527 0054 1A68     		ldr	r2, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8528              		.loc 1 5227 60
 8529 0056 0F4B     		ldr	r3, .L553+4
 8530 0058 1B68     		ldr	r3, [r3]
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8531              		.loc 1 5227 5
 8532 005a 0433     		adds	r3, r3, #4
 8533 005c 1946     		mov	r1, r3
 8534 005e 1046     		mov	r0, r2
 8535 0060 FFF7FEFF 		bl	vListInsert
 8536              		.loc 1 5286 1
 8537 0064 10E0     		b	.L552
 8538              	.L551:
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8539              		.loc 1 5233 5
 8540 0066 0E4B     		ldr	r3, .L553+16
 8541 0068 1A68     		ldr	r2, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8542              		.loc 1 5233 52
 8543 006a 0A4B     		ldr	r3, .L553+4
 8544 006c 1B68     		ldr	r3, [r3]
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8545              		.loc 1 5233 5
 8546 006e 0433     		adds	r3, r3, #4
 8547 0070 1946     		mov	r1, r3
 8548 0072 1046     		mov	r0, r2
 8549 0074 FFF7FEFF 		bl	vListInsert
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8550              		.loc 1 5238 21
 8551 0078 0A4B     		ldr	r3, .L553+20
 8552 007a 1B68     		ldr	r3, [r3]
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8553              		.loc 1 5238 7
 8554 007c BA68     		ldr	r2, [r7, #8]
 8555 007e 9A42     		cmp	r2, r3
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 248


 8556 0080 02D2     		bcs	.L552
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8557              		.loc 1 5240 27
 8558 0082 084A     		ldr	r2, .L553+20
 8559 0084 BB68     		ldr	r3, [r7, #8]
 8560 0086 1360     		str	r3, [r2]
 8561              	.L552:
 8562              		.loc 1 5286 1
 8563 0088 00BF     		nop
 8564 008a 1037     		adds	r7, r7, #16
 8565              	.LCFI331:
 8566              		.cfi_def_cfa_offset 8
 8567 008c BD46     		mov	sp, r7
 8568              	.LCFI332:
 8569              		.cfi_def_cfa_register 13
 8570              		@ sp needed
 8571 008e 80BD     		pop	{r7, pc}
 8572              	.L554:
 8573              		.align	2
 8574              	.L553:
 8575 0090 00000000 		.word	xTickCount
 8576 0094 00000000 		.word	pxCurrentTCB
 8577 0098 00000000 		.word	xSuspendedTaskList
 8578 009c 00000000 		.word	pxOverflowDelayedTaskList
 8579 00a0 00000000 		.word	pxDelayedTaskList
 8580 00a4 00000000 		.word	xNextTaskUnblockTime
 8581              		.cfi_endproc
 8582              	.LFE68:
 8584              		.text
 8585              	.Letext0:
 8586              		.file 3 "C:/tools/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi/lib/gcc/arm-none-eabi/1
 8587              		.file 4 "C:/tools/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/include/m
 8588              		.file 5 "C:/tools/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/include/s
 8589              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8590              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8591              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8592              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 8593              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 8594              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 8595              		.file 12 "C:/tools/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi/arm-none-eabi/include/
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 249


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:25     .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:22     .bss.pxCurrentTCB:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:28     .bss.pxReadyTasksLists:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:31     .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:34     .bss.xDelayedTaskList1:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:37     .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:40     .bss.xDelayedTaskList2:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:43     .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:46     .bss.pxDelayedTaskList:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:49     .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:52     .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:55     .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:58     .bss.xPendingReadyList:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:61     .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:64     .bss.xTasksWaitingTermination:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:67     .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:70     .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:73     .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:76     .bss.xSuspendedTaskList:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:79     .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:82     .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:85     .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:88     .bss.xTickCount:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:91     .bss.xTickCount:00000000 xTickCount
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:94     .bss.uxTopReadyPriority:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:97     .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:100    .bss.xSchedulerRunning:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:103    .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:106    .bss.xPendedTicks:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:109    .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:112    .bss.xYieldPending:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:115    .bss.xYieldPending:00000000 xYieldPending
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:118    .bss.xNumOfOverflows:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:121    .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:124    .bss.uxTaskNumber:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:127    .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:130    .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:133    .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:136    .bss.xIdleTaskHandle:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:139    .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:142    .bss.uxSchedulerSuspended:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:145    .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:148    .bss.ulTaskSwitchedInTime:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:151    .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:154    .bss.ulTotalRunTime:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:157    .bss.ulTotalRunTime:00000000 ulTotalRunTime
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:160    .text.xTaskCreateStatic:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:166    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:453    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:679    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:334    .text.xTaskCreate:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:340    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:448    .text.prvInitialiseNewTask:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:674    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5571   .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 250


C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:829    .text.prvAddNewTaskToReadyList:000000c4 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:840    .text.vTaskDelete:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:846    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6192   .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6287   .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1006   .text.vTaskDelete:000000c8 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1018   .text.vTaskDelayUntil:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1024   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2816   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8461   .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2966   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1234   .text.vTaskDelayUntil:000000f4 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1241   .text.vTaskDelay:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1247   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1341   .text.vTaskDelay:00000064 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1347   .text.eTaskGetState:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1353   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1512   .text.eTaskGetState:000000bc $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1521   .text.uxTaskPriorityGet:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1527   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1582   .text.uxTaskPriorityGet:00000030 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1587   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1593   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1684   .text.uxTaskPriorityGetFromISR:00000054 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1689   .text.vTaskPrioritySet:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1695   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1926   .text.vTaskPrioritySet:0000012c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1934   .text.vTaskSuspend:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:1940   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4082   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2113   .text.vTaskSuspend:000000d4 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2123   .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2128   .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2222   .text.prvTaskIsTaskSuspended:0000005c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2228   .text.vTaskResume:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2234   .text.vTaskResume:00000000 vTaskResume
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2374   .text.vTaskResume:000000b0 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2382   .text.xTaskResumeFromISR:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2388   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2562   .text.xTaskResumeFromISR:000000d4 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2571   .rodata:00000000 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2575   .text.vTaskStartScheduler:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2581   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2735   .text.vTaskStartScheduler:000000bc $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5365   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2745   .text.vTaskEndScheduler:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2751   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2805   .text.vTaskEndScheduler:0000002c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2810   .text.vTaskSuspendAll:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2851   .text.vTaskSuspendAll:00000018 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2856   .text.prvGetExpectedIdleTime:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2861   .text.prvGetExpectedIdleTime:00000000 prvGetExpectedIdleTime
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2951   .text.prvGetExpectedIdleTime:0000005c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:2960   .text.xTaskResumeAll:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3814   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3186   .text.xTaskResumeAll:00000118 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3199   .text.xTaskGetTickCount:00000000 $t
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 251


C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3205   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3245   .text.xTaskGetTickCount:0000001c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3250   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3256   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3297   .text.xTaskGetTickCountFromISR:00000020 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3302   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3308   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3339   .text.uxTaskGetNumberOfTasks:00000014 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3344   .text.pcTaskGetName:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3350   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3429   .text.pcTaskGetName:00000048 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3434   .text.uxTaskGetSystemState:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3440   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5923   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3624   .text.uxTaskGetSystemState:00000108 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3634   .text.vTaskStepTick:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3640   .text.vTaskStepTick:00000000 vTaskStepTick
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3714   .text.vTaskStepTick:00000048 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3720   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3726   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3802   .text.xTaskCatchUpTicks:0000004c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:3808   .text.xTaskIncrementTick:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4061   .text.xTaskIncrementTick:00000148 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4076   .text.vTaskSwitchContext:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4256   .text.vTaskSwitchContext:000000d8 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4267   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4273   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4344   .text.vTaskPlaceOnEventList:00000048 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4349   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4355   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4461   .text.vTaskPlaceOnUnorderedEventList:00000074 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4467   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4473   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4553   .text.vTaskPlaceOnEventListRestricted:00000054 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4558   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4564   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4707   .text.xTaskRemoveFromEventList:000000b4 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4717   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4723   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4871   .text.vTaskRemoveFromUnorderedEventList:000000b8 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4880   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4886   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4958   .text.vTaskSetTimeOutState:00000048 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4964   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:4970   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5015   .text.vTaskInternalSetTimeOutState:00000024 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5021   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5027   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5195   .text.xTaskCheckForTimeOut:000000c0 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5201   .text.vTaskMissedYield:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5207   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5239   .text.vTaskMissedYield:00000014 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5244   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5250   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5305   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5311   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5360   .text.prvIdleTask:00000000 $t
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 252


C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5666   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5465   .text.prvIdleTask:00000070 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5473   .text.eTaskConfirmSleepModeStatus:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5479   .text.eTaskConfirmSleepModeStatus:00000000 eTaskConfirmSleepModeStatus
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5558   .text.eTaskConfirmSleepModeStatus:0000004c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5566   .text.prvInitialiseTaskLists:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5649   .text.prvInitialiseTaskLists:00000060 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5661   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5738   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5745   .text.vTaskGetInfo:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5751   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6055   .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5913   .text.vTaskGetInfo:000000c8 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:5918   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6050   .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6119   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6125   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6182   .text.uxTaskGetStackHighWaterMark:00000034 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6187   .text.prvDeleteTCB:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6282   .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6349   .text.prvResetNextTaskUnblockTime:00000038 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6355   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6361   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6401   .text.xTaskGetCurrentTaskHandle:0000001c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6406   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6412   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6474   .text.xTaskGetSchedulerState:00000034 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6480   .text.xTaskPriorityInherit:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6486   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6635   .text.xTaskPriorityInherit:000000c4 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6642   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6648   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6818   .text.xTaskPriorityDisinherit:000000d4 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6825   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:6831   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7027   .text.vTaskPriorityDisinheritAfterTimeout:000000fc $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7034   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7040   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7090   .text.uxTaskResetEventItemValue:0000002c $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7095   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7101   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7146   .text.pvTaskIncrementMutexHeldCount:00000024 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7151   .text.ulTaskNotifyTake:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7157   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7271   .text.ulTaskNotifyTake:00000088 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7277   .text.xTaskNotifyWait:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7283   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7418   .text.xTaskNotifyWait:000000ac $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7424   .text.xTaskGenericNotify:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7430   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7514   .text.xTaskGenericNotify:00000064 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7519   .text.xTaskGenericNotify:00000078 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7708   .text.xTaskGenericNotify:00000168 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7716   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7722   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7828   .text.xTaskGenericNotifyFromISR:00000084 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:7833   .text.xTaskGenericNotifyFromISR:00000098 $t
ARM GAS  C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s 			page 253


C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8049   .text.xTaskGenericNotifyFromISR:000001a8 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8059   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8065   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8285   .text.vTaskNotifyGiveFromISR:00000110 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8295   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8301   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8372   .text.xTaskNotifyStateClear:00000048 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8377   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8383   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8451   .text.ulTaskNotifyValueClear:00000044 $d
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8456   .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\DAELT-~1\AppData\Local\Temp\cc7RKo6i.s:8575   .text.prvAddCurrentTaskToDelayedList:00000090 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
CONFIGURE_TIMER_FOR_RUN_TIME_STATS
xPortStartScheduler
vPortEndScheduler
GET_RUN_TIME_COUNTER_VALUE
vListInsert
vPortSuppressTicksAndSleep
vListInitialise
